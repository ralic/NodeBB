'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = load;
exports.adminHeader = adminHeader;
exports.filterUserCustomSettings = filterUserCustomSettings;
exports.filterUserGetSettings = filterUserGetSettings;
exports.actionSaveSettings = actionSaveSettings;
exports._prepend = _prepend;
exports.__interopRequireWildcard = __interopRequireWildcard;

var _nodebb = require('./nodebb.js');

var NodeBB = _interopRequireWildcard(_nodebb);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var db = NodeBB.db;
var Emailer = NodeBB.Emailer;
var User = NodeBB.User;
var Group = NodeBB.Group;
var Meta = NodeBB.Meta;
var Plugins = NodeBB.Plugins;
var SioAdmin = NodeBB.SioAdmin;
var async = NodeBB.async;
var winston = NodeBB.winston;
var nconf = NodeBB.nconf;


function prepend(msg) {
  return '[Newsletter] ' + msg;
}

// Hook: static:app.load
function load(data, callback) {
  winston.info(prepend('Initializing Newsletter...'));

  var app = data.app;
  var router = data.router;
  var middleware = data.middleware;


  function getGroups(next) {
    db.getSortedSetRevRange('groups:createtime', 0, -1, function (err, groups) {
      if (err) {
        winston.warn('[Newsletter] Failed to load groups: ' + err);
        return next(err);
      }
      function groupsFilter(group, next) {
        next(group.slice(0, 3) !== 'cid' && group !== 'administrators' && group !== 'registered-users');
      }
      function groupsMap(group, next) {
        next(null, { name: group });
      }
      async.waterfall([function (next) {
        async.filter(groups, groupsFilter, function (_groups) {
          next(null, _groups);
        });
      }, function (_groups, next) {
        async.map(_groups, groupsMap, next);
      }], next);
    });
  }

  function render(req, res, next) {
    getGroups(function (err, groups) {
      if (!err) {
        res.render('admin/plugins/newsletter', { groups: groups });
      } else {
        res.send('Error: ' + err);
      }
    });
  }

  router.get('/admin/plugins/newsletter', middleware.admin.buildHeader, render);
  router.get('/api/admin/plugins/newsletter', render);

  SioAdmin.Newsletter = {};

  // The user clicked send on the Newsletter page.
  SioAdmin.Newsletter.send = function (socket, data, callback) {
    // Do all the things.
    async.waterfall([function (next) {
      // Send an alert.
      winston.info(prepend('uid ' + socket.uid + ' is attempting to send a newsletter.'));

      // Set the correct group.
      data.group = data.group === 'everyone' ? 'users:joindate' : 'group:' + data.group + ':members';
      winston.info('[Newsletter] Sending to group "' + data.group + '".');

      // Get the group uids.
      db.getSortedSetRange(data.group, 0, -1, next);
    }, function (uids, next) {
      async.parallel({
        fields: async.apply(User.getUsersFields, uids, ['uid', 'email', 'username', 'userslug', 'banned']),
        settings: async.apply(User.getMultipleUserSettings, uids)
      }, function (err, results) {
        if (err) return next(err);
        for (var i in results.fields) {
          results.fields[i].pluginNewsletterSub = results.settings[i].pluginNewsletterSub;
        }
        next(null, results.fields);
      });
    }, function (users, next) {
      async.filter(users, function (user, next) {
        // Check for nulls and warn.
        if (!(!!user && user.uid !== void 0 && !!user.email && !!user.username)) {
          winston.warn('[Newsletter] Null data at uid ' + user.uid + ', skipping.');
          return next(false);
        }

        // Skip banned users and warn.
        if (parseInt(user.banned, 10) === 1) {
          winston.warn('[Newsletter] Banned user at uid ' + user.uid + ', skipping.');
          return next(false);
        }

        // Skip unsubscribed users.
        if (!parseInt(user.pluginNewsletterSub, 10)) {
          winston.warn('[Newsletter] Unsubscribed user at uid ' + user.uid + ', skipping.');
          return next(false);
        }

        // User is valid.
        return next(true);
      }, function (users) {
        next(null, users);
      });
    }, function (users, next) {
      // Get the site Title.
      Meta.configs.get('title', function (err, title) {
        if (err) return next(err);

        // Send the emails.
        winston.info('[Newsletter] Sending email newsletter to ' + users.length + ' users: ');
        async.eachLimit(users, 100, function (userObj, next) {
          // Email options.
          var options = {
            subject: data.subject,
            username: userObj.username,
            body: data.template.replace('{username}', userObj.username),
            title: title,
            userslug: userObj.userslug,
            url: nconf.get('url')
          };

          Emailer.send('newsletter', userObj.uid, options, next);

          // We're done.
        }, function (err) {
          winston.info('[Newsletter] Finished email loop with error value: ' + err);
          next(err);
        });
      });
    }], function (err) {
      winston.info('[Newsletter] Done sending emails.');

      // Returns true if there were no errors.
      if (err) {
        winston.warn('[Newsletter] Error sending emails: ' + (err.message || err));
        callback(false);
      } else {
        callback(true);
      }

      winston.info('[Newsletter] Finished main loop with error value: ' + err);
    });
  };

  SioAdmin.Newsletter.getGroupsList = function (socket, data, callback) {
    getGroups(function (err, groups) {
      var html = app.render('partials/newsletter-groups', { groups: groups }, function (err, html) {
        callback(null, { html: html });
      });
    });
  };

  // End of app.load
  callback();
}

function adminHeader(customHeader, callback) {
  customHeader.plugins.push({
    route: '/plugins/newsletter',
    icon: 'fa-newspaper-o ',
    name: 'Newsletter'
  });

  callback(null, customHeader);
}

function filterUserCustomSettings(data, next) {
  // {settings: results.settings, customSettings: [], uid: req.uid}
  data.settings.pluginNewsletterSub = data.settings.pluginNewsletterSub !== void 0 ? parseInt(data.settings.pluginNewsletterSub, 10) === 1 : true;

  data.customSettings.push({
    title: '[[newsletter:sub-setting]]',
    content: '\n        <div class="checkbox">\n            <label>\n                <input type="checkbox" data-property="pluginNewsletterSub"' + (data.settings.pluginNewsletterSub ? ' checked' : '') + '> <strong>[[newsletter:sub]]</strong>\n            </label>\n            <a name="newsletter"></a>\n        </div>'
  });

  next(null, data);
}

function filterUserGetSettings(data, next) {
  if (data.settings.pluginNewsletterSub === void 0) data.settings.pluginNewsletterSub = '1';

  next(null, data);
}

function actionSaveSettings(data, next) {
  db.setObjectField('user:' + data.uid + ':settings', 'pluginNewsletterSub', data.settings.pluginNewsletterSub, next);
}

var dev = process.env.NODE_ENV === 'development';

function _prepend(text) {
  return prepend(text);
}
function __interopRequireWildcard(obj) {
  return eval('_interopRequireWildcard')(obj);
}