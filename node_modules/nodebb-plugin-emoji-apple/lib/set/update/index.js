"use strict";

var _ = require("lodash");
var Q = require("q");
var fs = require("fs");
var path = require("path");

var VERSION = 1;

/*===================================================== Exports  =====================================================*/

exports.build = buildIndex;
exports.read = readIndex;

/*==================================================== Functions  ====================================================*/

function readIndex(assetsPath) {
  return Q.nfcall(fs.readFile, path.join(assetsPath, "index.json")).then(function (index) {
    var categoryById = {};
    _.each(JSON.parse(index).categories, function (ids, category) {
      _.each(ids, function (id) {
        categoryById[id] = category;
      });
    });
    return Q.nfcall(fs.readdir, assetsPath).then(function (files) {
      return _.chain(files).map(function (file) {
        var id = path.basename(file, ".png");
        if (categoryById.hasOwnProperty(id)) {
          return { id: id, category: categoryById[id] };
        }
      }).compact().value();
    });
  });
}

function buildIndex(assetsPath, clonePath) {
  return Q.nfcall(fs.readFile, path.join(clonePath, "public", "index.html")).then(categorize).then(function (index) {
    return Q.nfcall(fs.writeFile, path.join(assetsPath, "index.json"), JSON.stringify({
      _v: VERSION, categories: index.categories
    })).then(_.constant(index));
  });
}

function categorize(indexHtml) {
  var ids = [];
  var categories = {};
  var lines = indexHtml.toString().split("\n");
  var category = null;
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    if (category == null) {
      var match = /<ul\s*?class="([^\s"]+)\s+emojis"/.exec(line);
      if (match != null) {
        category = categories[match[1]] = [];
      }
    } else if (/<\/ul>/.test(line)) {
      category = null;
    } else {
      var match = /<img[^>]*?>:<span[^>]*?>([^<]+?)<\/span>:/.exec(line);
      if (match != null) {
        category.push(match[1]);
        ids.push(match[1]);
      }
    }
  }
  return { categories: categories, ids: ids };
}
