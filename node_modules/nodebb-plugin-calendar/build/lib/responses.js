'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserResponse = exports.getAll = exports.removeAll = exports.submitResponse = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _privileges = require('./privileges');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const db = require.main.require('./src/database');
const user = require.main.require('./src/user');

const p = _bluebird2.default.promisify;

const setAdd = p(db.setAdd);
const setsRemove = p(db.setsRemove);
const deleteAll = p(db.deleteAll);
const getSetsMembers = p(db.getSetsMembers);
const isSetMember = p(db.isSetMember);
const getUsersFields = p(user.getUsersFields);

const listKey = 'plugins:calendar:events';
const values = ['yes', 'maybe', 'no'];

const submitResponse = (() => {
  var ref = (0, _bluebird.coroutine)(function* (_ref) {
    let pid = _ref.pid;
    let uid = _ref.uid;
    let value = _ref.value;

    if (!values.includes(value)) {
      throw new Error('[[error:invalid-data]]');
    }
    if (!(yield (0, _privileges.canViewPost)(pid, uid))) {
      throw new Error('[[error:no-privileges]]');
    }

    yield _bluebird2.default.all([setsRemove(values.filter(function (val) {
      return val !== value;
    }).map(function (val) {
      return `${ listKey }:pid:${ pid }:responses:${ val }`;
    }), uid), setAdd(`${ listKey }:pid:${ pid }:responses:${ value }`, uid)]);
  });
  return function submitResponse(_x) {
    return ref.apply(this, arguments);
  };
})();

const removeAll = pid => deleteAll(values.map(val => `${ listKey }:pid:${ pid }:responses:${ val }`));

const getAll = (() => {
  var ref = (0, _bluebird.coroutine)(function* () {
    var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    let pid = _ref2.pid;
    var _ref2$uid = _ref2.uid;
    let uid = _ref2$uid === undefined ? false : _ref2$uid;
    var _ref2$selection = _ref2.selection;
    let selection = _ref2$selection === undefined ? values : _ref2$selection;

    if (uid !== false && !(yield (0, _privileges.canViewPost)(pid, uid))) {
      throw new Error('[[error:no-privileges]]');
    }

    const responseUids = yield getSetsMembers(selection.map(function (val) {
      return `${ listKey }:pid:${ pid }:responses:${ val }`;
    }));
    const userFields = ['userslug', 'picture', 'username', 'icon:bgColor', 'icon:text'];

    var _ref3 = yield _bluebird2.default.all(responseUids.map(function (uids) {
      return getUsersFields(uids, userFields);
    }));

    var _ref4 = (0, _slicedToArray3.default)(_ref3, 3);

    const yes = _ref4[0];
    const maybe = _ref4[1];
    const no = _ref4[2];


    return {
      yes: yes,
      maybe: maybe,
      no: no
    };
  });
  return function getAll(_x2) {
    return ref.apply(this, arguments);
  };
})();

const getUserResponse = (() => {
  var ref = (0, _bluebird.coroutine)(function* (_ref5) {
    let pid = _ref5.pid;
    let uid = _ref5.uid;

    if (!(yield (0, _privileges.canViewPost)(pid, uid))) {
      throw new Error('[[error:no-privileges]]');
    }

    const arr = yield _bluebird2.default.all(values.map(function (val) {
      return isSetMember(`${ listKey }:pid:${ pid }:responses:${ val }`, uid);
    }));

    return values[arr.findIndex(function (val) {
      return !!val;
    })];
  });
  return function getUserResponse(_x4) {
    return ref.apply(this, arguments);
  };
})();

exports.submitResponse = submitResponse;
exports.removeAll = removeAll;
exports.getAll = getAll;
exports.getUserResponse = getUserResponse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVzcG9uc2VzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUdBOzs7O0FBSEEsTUFBTSxLQUFLLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsZ0JBQXJCLENBQVg7QUFDQSxNQUFNLE9BQU8sUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixZQUFyQixDQUFiOztBQUtBLE1BQU0sSUFBSSxtQkFBUSxTQUFsQjs7QUFFQSxNQUFNLFNBQVMsRUFBRSxHQUFHLE1BQUwsQ0FBZjtBQUNBLE1BQU0sYUFBYSxFQUFFLEdBQUcsVUFBTCxDQUFuQjtBQUNBLE1BQU0sWUFBWSxFQUFFLEdBQUcsU0FBTCxDQUFsQjtBQUNBLE1BQU0saUJBQWlCLEVBQUUsR0FBRyxjQUFMLENBQXZCO0FBQ0EsTUFBTSxjQUFjLEVBQUUsR0FBRyxXQUFMLENBQXBCO0FBQ0EsTUFBTSxpQkFBaUIsRUFBRSxLQUFLLGNBQVAsQ0FBdkI7O0FBRUEsTUFBTSxVQUFVLHlCQUFoQjtBQUNBLE1BQU0sU0FBUyxDQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLElBQWpCLENBQWY7O0FBRUEsTUFBTTtBQUFBLHFDQUFpQixpQkFBK0I7QUFBQSxRQUF0QixHQUFzQixRQUF0QixHQUFzQjtBQUFBLFFBQWpCLEdBQWlCLFFBQWpCLEdBQWlCO0FBQUEsUUFBWixLQUFZLFFBQVosS0FBWTs7QUFDcEQsUUFBSSxDQUFDLE9BQU8sUUFBUCxDQUFnQixLQUFoQixDQUFMLEVBQTZCO0FBQzNCLFlBQU0sSUFBSSxLQUFKLENBQVUsd0JBQVYsQ0FBTjtBQUNEO0FBQ0QsUUFBSSxFQUFDLE1BQU0sNkJBQVksR0FBWixFQUFpQixHQUFqQixDQUFQLENBQUosRUFBa0M7QUFDaEMsWUFBTSxJQUFJLEtBQUosQ0FBVSx5QkFBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBTSxtQkFBUSxHQUFSLENBQVksQ0FDaEIsV0FBVyxPQUNSLE1BRFEsQ0FDRDtBQUFBLGFBQU8sUUFBUSxLQUFmO0FBQUEsS0FEQyxFQUVSLEdBRlEsQ0FFSjtBQUFBLGFBQVEsSUFBRSxPQUFRLFVBQU8sR0FBSSxnQkFBYSxHQUFJLEdBQTlDO0FBQUEsS0FGSSxDQUFYLEVBRXlELEdBRnpELENBRGdCLEVBSWhCLE9BQVEsSUFBRSxPQUFRLFVBQU8sR0FBSSxnQkFBYSxLQUFNLEdBQWhELEVBQW1ELEdBQW5ELENBSmdCLENBQVosQ0FBTjtBQU1ELEdBZEs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztBQWdCQSxNQUFNLFlBQVksT0FBTyxVQUN2QixPQUFPLEdBQVAsQ0FBVyxPQUFRLElBQUUsT0FBUSxVQUFPLEdBQUksZ0JBQWEsR0FBSSxHQUF6RCxDQUR1QixDQUF6Qjs7QUFJQSxNQUFNO0FBQUEscUNBQVMsYUFBeUQ7QUFBQSxzRUFBUCxFQUFPOztBQUFBLFFBQWhELEdBQWdELFNBQWhELEdBQWdEO0FBQUEsMEJBQTNDLEdBQTJDO0FBQUEsUUFBM0MsR0FBMkMsNkJBQXJDLEtBQXFDO0FBQUEsZ0NBQTlCLFNBQThCO0FBQUEsUUFBOUIsU0FBOEIsbUNBQWxCLE1BQWtCOztBQUN0RSxRQUFJLFFBQVEsS0FBUixJQUFpQixFQUFDLE1BQU0sNkJBQVksR0FBWixFQUFpQixHQUFqQixDQUFQLENBQXJCLEVBQW1EO0FBQ2pELFlBQU0sSUFBSSxLQUFKLENBQVUseUJBQVYsQ0FBTjtBQUNEOztBQUVELFVBQU0sZUFBZSxNQUFNLGVBQWUsVUFDdkMsR0FEdUMsQ0FDbkM7QUFBQSxhQUFRLElBQUUsT0FBUSxVQUFPLEdBQUksZ0JBQWEsR0FBSSxHQUE5QztBQUFBLEtBRG1DLENBQWYsQ0FBM0I7QUFFQSxVQUFNLGFBQWEsQ0FBQyxVQUFELEVBQWEsU0FBYixFQUF3QixVQUF4QixFQUFvQyxjQUFwQyxFQUFvRCxXQUFwRCxDQUFuQjs7QUFQc0UsZ0JBUzdDLE1BQU0sbUJBQVEsR0FBUixDQUFZLGFBQ3hDLEdBRHdDLENBQ3BDO0FBQUEsYUFBUSxlQUFlLElBQWYsRUFBcUIsVUFBckIsQ0FBUjtBQUFBLEtBRG9DLENBQVosQ0FUdUM7O0FBQUE7O0FBQUEsVUFTL0QsR0FUK0Q7QUFBQSxVQVMxRCxLQVQwRDtBQUFBLFVBU25ELEVBVG1EOzs7QUFZdEUsV0FBTztBQUNMLGNBREs7QUFFTCxrQkFGSztBQUdMO0FBSEssS0FBUDtBQUtELEdBakJLO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUFtQkEsTUFBTTtBQUFBLHFDQUFrQixrQkFBd0I7QUFBQSxRQUFmLEdBQWUsU0FBZixHQUFlO0FBQUEsUUFBVixHQUFVLFNBQVYsR0FBVTs7QUFDOUMsUUFBSSxFQUFDLE1BQU0sNkJBQVksR0FBWixFQUFpQixHQUFqQixDQUFQLENBQUosRUFBa0M7QUFDaEMsWUFBTSxJQUFJLEtBQUosQ0FBVSx5QkFBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBTSxNQUFNLE1BQU0sbUJBQVEsR0FBUixDQUNoQixPQUFPLEdBQVAsQ0FBVztBQUFBLGFBQU8sWUFBYSxJQUFFLE9BQVEsVUFBTyxHQUFJLGdCQUFhLEdBQUksR0FBbkQsRUFBc0QsR0FBdEQsQ0FBUDtBQUFBLEtBQVgsQ0FEZ0IsQ0FBbEI7O0FBSUEsV0FBTyxPQUFPLElBQUksU0FBSixDQUFjO0FBQUEsYUFBTyxDQUFDLENBQUMsR0FBVDtBQUFBLEtBQWQsQ0FBUCxDQUFQO0FBQ0QsR0FWSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O1FBWVMsYyxHQUFBLGM7UUFBZ0IsUyxHQUFBLFM7UUFBVyxNLEdBQUEsTTtRQUFRLGUsR0FBQSxlIiwiZmlsZSI6InJlc3BvbnNlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRiID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL2RhdGFiYXNlJyk7XG5jb25zdCB1c2VyID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3VzZXInKTtcblxuaW1wb3J0IHsgY2FuVmlld1Bvc3QgfSBmcm9tICcuL3ByaXZpbGVnZXMnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuXG5jb25zdCBwID0gUHJvbWlzZS5wcm9taXNpZnk7XG5cbmNvbnN0IHNldEFkZCA9IHAoZGIuc2V0QWRkKTtcbmNvbnN0IHNldHNSZW1vdmUgPSBwKGRiLnNldHNSZW1vdmUpO1xuY29uc3QgZGVsZXRlQWxsID0gcChkYi5kZWxldGVBbGwpO1xuY29uc3QgZ2V0U2V0c01lbWJlcnMgPSBwKGRiLmdldFNldHNNZW1iZXJzKTtcbmNvbnN0IGlzU2V0TWVtYmVyID0gcChkYi5pc1NldE1lbWJlcik7XG5jb25zdCBnZXRVc2Vyc0ZpZWxkcyA9IHAodXNlci5nZXRVc2Vyc0ZpZWxkcyk7XG5cbmNvbnN0IGxpc3RLZXkgPSAncGx1Z2luczpjYWxlbmRhcjpldmVudHMnO1xuY29uc3QgdmFsdWVzID0gWyd5ZXMnLCAnbWF5YmUnLCAnbm8nXTtcblxuY29uc3Qgc3VibWl0UmVzcG9uc2UgPSBhc3luYyAoeyBwaWQsIHVpZCwgdmFsdWUgfSkgPT4ge1xuICBpZiAoIXZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tbZXJyb3I6aW52YWxpZC1kYXRhXV0nKTtcbiAgfVxuICBpZiAoIWF3YWl0IGNhblZpZXdQb3N0KHBpZCwgdWlkKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW1tlcnJvcjpuby1wcml2aWxlZ2VzXV0nKTtcbiAgfVxuXG4gIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBzZXRzUmVtb3ZlKHZhbHVlc1xuICAgICAgLmZpbHRlcih2YWwgPT4gdmFsICE9PSB2YWx1ZSlcbiAgICAgIC5tYXAodmFsID0+IGAke2xpc3RLZXl9OnBpZDoke3BpZH06cmVzcG9uc2VzOiR7dmFsfWApLCB1aWQpLFxuICAgIHNldEFkZChgJHtsaXN0S2V5fTpwaWQ6JHtwaWR9OnJlc3BvbnNlczoke3ZhbHVlfWAsIHVpZCksXG4gIF0pO1xufTtcblxuY29uc3QgcmVtb3ZlQWxsID0gcGlkID0+IGRlbGV0ZUFsbChcbiAgdmFsdWVzLm1hcCh2YWwgPT4gYCR7bGlzdEtleX06cGlkOiR7cGlkfTpyZXNwb25zZXM6JHt2YWx9YClcbik7XG5cbmNvbnN0IGdldEFsbCA9IGFzeW5jICh7IHBpZCwgdWlkID0gZmFsc2UsIHNlbGVjdGlvbiA9IHZhbHVlcyB9ID0ge30pID0+IHtcbiAgaWYgKHVpZCAhPT0gZmFsc2UgJiYgIWF3YWl0IGNhblZpZXdQb3N0KHBpZCwgdWlkKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW1tlcnJvcjpuby1wcml2aWxlZ2VzXV0nKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlVWlkcyA9IGF3YWl0IGdldFNldHNNZW1iZXJzKHNlbGVjdGlvblxuICAgIC5tYXAodmFsID0+IGAke2xpc3RLZXl9OnBpZDoke3BpZH06cmVzcG9uc2VzOiR7dmFsfWApKTtcbiAgY29uc3QgdXNlckZpZWxkcyA9IFsndXNlcnNsdWcnLCAncGljdHVyZScsICd1c2VybmFtZScsICdpY29uOmJnQ29sb3InLCAnaWNvbjp0ZXh0J107XG5cbiAgY29uc3QgW3llcywgbWF5YmUsIG5vXSA9IGF3YWl0IFByb21pc2UuYWxsKHJlc3BvbnNlVWlkc1xuICAgIC5tYXAodWlkcyA9PiBnZXRVc2Vyc0ZpZWxkcyh1aWRzLCB1c2VyRmllbGRzKSkpO1xuXG4gIHJldHVybiB7XG4gICAgeWVzLFxuICAgIG1heWJlLFxuICAgIG5vLFxuICB9O1xufTtcblxuY29uc3QgZ2V0VXNlclJlc3BvbnNlID0gYXN5bmMgKHsgcGlkLCB1aWQgfSkgPT4ge1xuICBpZiAoIWF3YWl0IGNhblZpZXdQb3N0KHBpZCwgdWlkKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW1tlcnJvcjpuby1wcml2aWxlZ2VzXV0nKTtcbiAgfVxuXG4gIGNvbnN0IGFyciA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIHZhbHVlcy5tYXAodmFsID0+IGlzU2V0TWVtYmVyKGAke2xpc3RLZXl9OnBpZDoke3BpZH06cmVzcG9uc2VzOiR7dmFsfWAsIHVpZCkpXG4gICk7XG5cbiAgcmV0dXJuIHZhbHVlc1thcnIuZmluZEluZGV4KHZhbCA9PiAhIXZhbCldO1xufTtcblxuZXhwb3J0IHsgc3VibWl0UmVzcG9uc2UsIHJlbW92ZUFsbCwgZ2V0QWxsLCBnZXRVc2VyUmVzcG9uc2UgfTtcbiJdfQ==