'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserResponse = exports.getAll = exports.removeAll = exports.submitResponse = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _privileges = require('./privileges');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const db = require.main.require('./src/database');
const user = require.main.require('./src/user');

const p = _bluebird2.default.promisify;

const setAdd = p(db.setAdd);
const setsRemove = p(db.setsRemove);
const deleteAll = p(db.deleteAll);
const getSetsMembers = p(db.getSetsMembers);
const isSetMember = p(db.isSetMember);
const getUsersFields = p(user.getUsersFields);

const listKey = 'plugins:calendar:events';
const values = ['yes', 'maybe', 'no'];

const submitResponse = (() => {
  var ref = (0, _bluebird.coroutine)(function* (_ref) {
    let pid = _ref.pid;
    let uid = _ref.uid;
    let value = _ref.value;

    if (!values.includes(value)) {
      throw new Error('[[error:invalid-data]]');
    }
    if (!(yield (0, _privileges.canViewPost)(pid, uid))) {
      throw new Error('[[error:no-privileges]]');
    }

    yield _bluebird2.default.all([setsRemove(values.filter(function (val) {
      return val !== value;
    }).map(function (val) {
      return `${ listKey }:pid:${ pid }:responses:${ val }`;
    }), uid), setAdd(`${ listKey }:pid:${ pid }:responses:${ value }`, uid)]);
  });
  return function submitResponse(_x) {
    return ref.apply(this, arguments);
  };
})();

const removeAll = pid => deleteAll(values.map(val => `${ listKey }:pid:${ pid }:responses:${ val }`));

const getAll = (() => {
  var ref = (0, _bluebird.coroutine)(function* () {
    var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    let pid = _ref2.pid;
    var _ref2$uid = _ref2.uid;
    let uid = _ref2$uid === undefined ? false : _ref2$uid;
    var _ref2$selection = _ref2.selection;
    let selection = _ref2$selection === undefined ? values : _ref2$selection;

    if (uid !== false && !(yield (0, _privileges.canViewPost)(pid, uid))) {
      throw new Error('[[error:no-privileges]]');
    }

    const responseUids = yield getSetsMembers(selection.map(function (val) {
      return `${ listKey }:pid:${ pid }:responses:${ val }`;
    }));
    const userFields = ['userslug', 'picture', 'username', 'icon:bgColor', 'icon:text'];

    var _ref3 = yield _bluebird2.default.all(responseUids.map(function (uids) {
      return getUsersFields(uids, userFields);
    }));

    var _ref4 = _slicedToArray(_ref3, 3);

    const yes = _ref4[0];
    const maybe = _ref4[1];
    const no = _ref4[2];


    return {
      yes: yes,
      maybe: maybe,
      no: no
    };
  });
  return function getAll(_x2) {
    return ref.apply(this, arguments);
  };
})();

const getUserResponse = (() => {
  var ref = (0, _bluebird.coroutine)(function* (_ref5) {
    let pid = _ref5.pid;
    let uid = _ref5.uid;

    if (!(yield (0, _privileges.canViewPost)(pid, uid))) {
      throw new Error('[[error:no-privileges]]');
    }

    const arr = yield _bluebird2.default.all(values.map(function (val) {
      return isSetMember(`${ listKey }:pid:${ pid }:responses:${ val }`, uid);
    }));

    return values[arr.findIndex(function (val) {
      return !!val;
    })];
  });
  return function getUserResponse(_x4) {
    return ref.apply(this, arguments);
  };
})();

exports.submitResponse = submitResponse;
exports.removeAll = removeAll;
exports.getAll = getAll;
exports.getUserResponse = getUserResponse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVzcG9uc2VzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFHQTs7OztBQUhBLE1BQU0sS0FBSyxRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLGdCQUFyQixDQUFYO0FBQ0EsTUFBTSxPQUFPLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsWUFBckIsQ0FBYjs7QUFLQSxNQUFNLElBQUksbUJBQVEsU0FBbEI7O0FBRUEsTUFBTSxTQUFTLEVBQUUsR0FBRyxNQUFMLENBQWY7QUFDQSxNQUFNLGFBQWEsRUFBRSxHQUFHLFVBQUwsQ0FBbkI7QUFDQSxNQUFNLFlBQVksRUFBRSxHQUFHLFNBQUwsQ0FBbEI7QUFDQSxNQUFNLGlCQUFpQixFQUFFLEdBQUcsY0FBTCxDQUF2QjtBQUNBLE1BQU0sY0FBYyxFQUFFLEdBQUcsV0FBTCxDQUFwQjtBQUNBLE1BQU0saUJBQWlCLEVBQUUsS0FBSyxjQUFQLENBQXZCOztBQUVBLE1BQU0sVUFBVSx5QkFBaEI7QUFDQSxNQUFNLFNBQVMsQ0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixJQUFqQixDQUFmOztBQUVBLE1BQU07QUFBQSxxQ0FBaUIsaUJBQStCO0FBQUEsUUFBdEIsR0FBc0IsUUFBdEIsR0FBc0I7QUFBQSxRQUFqQixHQUFpQixRQUFqQixHQUFpQjtBQUFBLFFBQVosS0FBWSxRQUFaLEtBQVk7O0FBQ3BELFFBQUksQ0FBQyxPQUFPLFFBQVAsQ0FBZ0IsS0FBaEIsQ0FBTCxFQUE2QjtBQUMzQixZQUFNLElBQUksS0FBSixDQUFVLHdCQUFWLENBQU47QUFDRDtBQUNELFFBQUksRUFBQyxNQUFNLDZCQUFZLEdBQVosRUFBaUIsR0FBakIsQ0FBUCxDQUFKLEVBQWtDO0FBQ2hDLFlBQU0sSUFBSSxLQUFKLENBQVUseUJBQVYsQ0FBTjtBQUNEOztBQUVELFVBQU0sbUJBQVEsR0FBUixDQUFZLENBQ2hCLFdBQVcsT0FDUixNQURRLENBQ0Q7QUFBQSxhQUFPLFFBQVEsS0FBZjtBQUFBLEtBREMsRUFFUixHQUZRLENBRUo7QUFBQSxhQUFRLElBQUUsT0FBUSxVQUFPLEdBQUksZ0JBQWEsR0FBSSxHQUE5QztBQUFBLEtBRkksQ0FBWCxFQUV5RCxHQUZ6RCxDQURnQixFQUloQixPQUFRLElBQUUsT0FBUSxVQUFPLEdBQUksZ0JBQWEsS0FBTSxHQUFoRCxFQUFtRCxHQUFuRCxDQUpnQixDQUFaLENBQU47QUFNRCxHQWRLO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUFnQkEsTUFBTSxZQUFZLE9BQU8sVUFDdkIsT0FBTyxHQUFQLENBQVcsT0FBUSxJQUFFLE9BQVEsVUFBTyxHQUFJLGdCQUFhLEdBQUksR0FBekQsQ0FEdUIsQ0FBekI7O0FBSUEsTUFBTTtBQUFBLHFDQUFTLGFBQXlEO0FBQUEsc0VBQVAsRUFBTzs7QUFBQSxRQUFoRCxHQUFnRCxTQUFoRCxHQUFnRDtBQUFBLDBCQUEzQyxHQUEyQztBQUFBLFFBQTNDLEdBQTJDLDZCQUFyQyxLQUFxQztBQUFBLGdDQUE5QixTQUE4QjtBQUFBLFFBQTlCLFNBQThCLG1DQUFsQixNQUFrQjs7QUFDdEUsUUFBSSxRQUFRLEtBQVIsSUFBaUIsRUFBQyxNQUFNLDZCQUFZLEdBQVosRUFBaUIsR0FBakIsQ0FBUCxDQUFyQixFQUFtRDtBQUNqRCxZQUFNLElBQUksS0FBSixDQUFVLHlCQUFWLENBQU47QUFDRDs7QUFFRCxVQUFNLGVBQWUsTUFBTSxlQUFlLFVBQ3ZDLEdBRHVDLENBQ25DO0FBQUEsYUFBUSxJQUFFLE9BQVEsVUFBTyxHQUFJLGdCQUFhLEdBQUksR0FBOUM7QUFBQSxLQURtQyxDQUFmLENBQTNCO0FBRUEsVUFBTSxhQUFhLENBQUMsVUFBRCxFQUFhLFNBQWIsRUFBd0IsVUFBeEIsRUFBb0MsY0FBcEMsRUFBb0QsV0FBcEQsQ0FBbkI7O0FBUHNFLGdCQVM3QyxNQUFNLG1CQUFRLEdBQVIsQ0FBWSxhQUN4QyxHQUR3QyxDQUNwQztBQUFBLGFBQVEsZUFBZSxJQUFmLEVBQXFCLFVBQXJCLENBQVI7QUFBQSxLQURvQyxDQUFaLENBVHVDOztBQUFBOztBQUFBLFVBUy9ELEdBVCtEO0FBQUEsVUFTMUQsS0FUMEQ7QUFBQSxVQVNuRCxFQVRtRDs7O0FBWXRFLFdBQU87QUFDTCxjQURLO0FBRUwsa0JBRks7QUFHTDtBQUhLLEtBQVA7QUFLRCxHQWpCSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBbUJBLE1BQU07QUFBQSxxQ0FBa0Isa0JBQXdCO0FBQUEsUUFBZixHQUFlLFNBQWYsR0FBZTtBQUFBLFFBQVYsR0FBVSxTQUFWLEdBQVU7O0FBQzlDLFFBQUksRUFBQyxNQUFNLDZCQUFZLEdBQVosRUFBaUIsR0FBakIsQ0FBUCxDQUFKLEVBQWtDO0FBQ2hDLFlBQU0sSUFBSSxLQUFKLENBQVUseUJBQVYsQ0FBTjtBQUNEOztBQUVELFVBQU0sTUFBTSxNQUFNLG1CQUFRLEdBQVIsQ0FDaEIsT0FBTyxHQUFQLENBQVc7QUFBQSxhQUFPLFlBQWEsSUFBRSxPQUFRLFVBQU8sR0FBSSxnQkFBYSxHQUFJLEdBQW5ELEVBQXNELEdBQXRELENBQVA7QUFBQSxLQUFYLENBRGdCLENBQWxCOztBQUlBLFdBQU8sT0FBTyxJQUFJLFNBQUosQ0FBYztBQUFBLGFBQU8sQ0FBQyxDQUFDLEdBQVQ7QUFBQSxLQUFkLENBQVAsQ0FBUDtBQUNELEdBVks7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztRQVlTLGMsR0FBQSxjO1FBQWdCLFMsR0FBQSxTO1FBQVcsTSxHQUFBLE07UUFBUSxlLEdBQUEsZSIsImZpbGUiOiJyZXNwb25zZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkYiA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9kYXRhYmFzZScpO1xuY29uc3QgdXNlciA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy91c2VyJyk7XG5cbmltcG9ydCB7IGNhblZpZXdQb3N0IH0gZnJvbSAnLi9wcml2aWxlZ2VzJztcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3QgcCA9IFByb21pc2UucHJvbWlzaWZ5O1xuXG5jb25zdCBzZXRBZGQgPSBwKGRiLnNldEFkZCk7XG5jb25zdCBzZXRzUmVtb3ZlID0gcChkYi5zZXRzUmVtb3ZlKTtcbmNvbnN0IGRlbGV0ZUFsbCA9IHAoZGIuZGVsZXRlQWxsKTtcbmNvbnN0IGdldFNldHNNZW1iZXJzID0gcChkYi5nZXRTZXRzTWVtYmVycyk7XG5jb25zdCBpc1NldE1lbWJlciA9IHAoZGIuaXNTZXRNZW1iZXIpO1xuY29uc3QgZ2V0VXNlcnNGaWVsZHMgPSBwKHVzZXIuZ2V0VXNlcnNGaWVsZHMpO1xuXG5jb25zdCBsaXN0S2V5ID0gJ3BsdWdpbnM6Y2FsZW5kYXI6ZXZlbnRzJztcbmNvbnN0IHZhbHVlcyA9IFsneWVzJywgJ21heWJlJywgJ25vJ107XG5cbmNvbnN0IHN1Ym1pdFJlc3BvbnNlID0gYXN5bmMgKHsgcGlkLCB1aWQsIHZhbHVlIH0pID0+IHtcbiAgaWYgKCF2YWx1ZXMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbW2Vycm9yOmludmFsaWQtZGF0YV1dJyk7XG4gIH1cbiAgaWYgKCFhd2FpdCBjYW5WaWV3UG9zdChwaWQsIHVpZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tbZXJyb3I6bm8tcHJpdmlsZWdlc11dJyk7XG4gIH1cblxuICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgc2V0c1JlbW92ZSh2YWx1ZXNcbiAgICAgIC5maWx0ZXIodmFsID0+IHZhbCAhPT0gdmFsdWUpXG4gICAgICAubWFwKHZhbCA9PiBgJHtsaXN0S2V5fTpwaWQ6JHtwaWR9OnJlc3BvbnNlczoke3ZhbH1gKSwgdWlkKSxcbiAgICBzZXRBZGQoYCR7bGlzdEtleX06cGlkOiR7cGlkfTpyZXNwb25zZXM6JHt2YWx1ZX1gLCB1aWQpLFxuICBdKTtcbn07XG5cbmNvbnN0IHJlbW92ZUFsbCA9IHBpZCA9PiBkZWxldGVBbGwoXG4gIHZhbHVlcy5tYXAodmFsID0+IGAke2xpc3RLZXl9OnBpZDoke3BpZH06cmVzcG9uc2VzOiR7dmFsfWApXG4pO1xuXG5jb25zdCBnZXRBbGwgPSBhc3luYyAoeyBwaWQsIHVpZCA9IGZhbHNlLCBzZWxlY3Rpb24gPSB2YWx1ZXMgfSA9IHt9KSA9PiB7XG4gIGlmICh1aWQgIT09IGZhbHNlICYmICFhd2FpdCBjYW5WaWV3UG9zdChwaWQsIHVpZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tbZXJyb3I6bm8tcHJpdmlsZWdlc11dJyk7XG4gIH1cblxuICBjb25zdCByZXNwb25zZVVpZHMgPSBhd2FpdCBnZXRTZXRzTWVtYmVycyhzZWxlY3Rpb25cbiAgICAubWFwKHZhbCA9PiBgJHtsaXN0S2V5fTpwaWQ6JHtwaWR9OnJlc3BvbnNlczoke3ZhbH1gKSk7XG4gIGNvbnN0IHVzZXJGaWVsZHMgPSBbJ3VzZXJzbHVnJywgJ3BpY3R1cmUnLCAndXNlcm5hbWUnLCAnaWNvbjpiZ0NvbG9yJywgJ2ljb246dGV4dCddO1xuXG4gIGNvbnN0IFt5ZXMsIG1heWJlLCBub10gPSBhd2FpdCBQcm9taXNlLmFsbChyZXNwb25zZVVpZHNcbiAgICAubWFwKHVpZHMgPT4gZ2V0VXNlcnNGaWVsZHModWlkcywgdXNlckZpZWxkcykpKTtcblxuICByZXR1cm4ge1xuICAgIHllcyxcbiAgICBtYXliZSxcbiAgICBubyxcbiAgfTtcbn07XG5cbmNvbnN0IGdldFVzZXJSZXNwb25zZSA9IGFzeW5jICh7IHBpZCwgdWlkIH0pID0+IHtcbiAgaWYgKCFhd2FpdCBjYW5WaWV3UG9zdChwaWQsIHVpZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tbZXJyb3I6bm8tcHJpdmlsZWdlc11dJyk7XG4gIH1cblxuICBjb25zdCBhcnIgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICB2YWx1ZXMubWFwKHZhbCA9PiBpc1NldE1lbWJlcihgJHtsaXN0S2V5fTpwaWQ6JHtwaWR9OnJlc3BvbnNlczoke3ZhbH1gLCB1aWQpKVxuICApO1xuXG4gIHJldHVybiB2YWx1ZXNbYXJyLmZpbmRJbmRleCh2YWwgPT4gISF2YWwpXTtcbn07XG5cbmV4cG9ydCB7IHN1Ym1pdFJlc3BvbnNlLCByZW1vdmVBbGwsIGdldEFsbCwgZ2V0VXNlclJlc3BvbnNlIH07XG4iXX0=