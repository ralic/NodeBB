'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const privileges = require.main.require('./src/privileges');
const categories = require.main.require('./src/categories');

// import { getEventsByDate, filterByPid, escapeEvent } from './event';

const p = _bluebird2.default.promisify;

const getAllCategoryFields = p(categories.getAllCategoryFields);
const filterCids = p(privileges.categories.filterCids);

/* eslint-disable */
function shadeColor2(color, percent) {
  var f = parseInt(color.slice(1), 16),
      t = percent < 0 ? 0 : 255,
      p = percent < 0 ? percent * -1 : percent,
      R = f >> 16,
      G = f >> 8 & 0x00FF,
      B = f & 0x0000FF;
  return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
}
/* eslint-enable */

exports.default = (router, middleware) => {
  const renderAdmin = (req, res) => {
    res.render('admin/plugins/calendar', {});
  };
  router.get('/admin/plugins/calendar', middleware.admin.buildHeader, renderAdmin);
  router.get('/api/admin/plugins/calendar', renderAdmin);

  const renderPage = (req, res, next) => {
    const cb = (err, data) => {
      if (err) {
        next(err);
        return;
      }
      res.render('calendar', data);
    };
    //
    // const startDate = new Date();
    // const endDate = new Date();
    // startDate.setDate(-1);
    // endDate.setDate(32);
    //
    // (async uid => {
    //   const events = await getEventsByDate(startDate.valueOf(), endDate.valueOf());
    //   const filtered = await filterByPid(events, uid);
    //   const escaped = await Promise.all(filtered.map(escapeEvent));
    //
    //   return {
    //     cal: JSON.stringify({
    //       events: escaped,
    //       startDate: startDate.valueOf(),
    //       endDate: endDate.valueOf(),
    //     }),
    //   };
    // })(req.uid).asCallback(cb);

    (0, _bluebird.coroutine)(function* () {
      const cats = yield getAllCategoryFields(['cid', 'bgColor']);
      const filtered = yield filterCids('read', cats.map(function (c) {
        return c.cid;
      }), req.uid);

      const colors = cats.filter(function (c) {
        return filtered.includes(c.cid);
      });

      const style = colors.map(function ({ cid, bgColor }) {
        return `.plugin-calendar-cal-event-category-${ cid } {
          background-color: ${ bgColor };
          border-color: ${ shadeColor2(bgColor, -0.2) };
        }`;
      });

      return {
        calendarEventsStyle: style.join('\n'),
        title: '[[calendar:calendar]]'
      };
    })().asCallback(cb);

    // res.render('calendar', {});
  };

  router.get('/calendar', middleware.buildHeader, renderPage);
  router.get('/api/calendar', renderPage);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29udHJvbGxlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxhQUFhLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsa0JBQXJCLENBQW5CO0FBQ0EsTUFBTSxhQUFhLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsa0JBQXJCLENBQW5COzs7O0FBSUEsTUFBTSxJQUFJLG1CQUFRLFNBQWxCOztBQUVBLE1BQU0sdUJBQXVCLEVBQUUsV0FBVyxvQkFBYixDQUE3QjtBQUNBLE1BQU0sYUFBYSxFQUFFLFdBQVcsVUFBWCxDQUFzQixVQUF4QixDQUFuQjs7O0FBR0EsU0FBUyxXQUFULENBQXFCLEtBQXJCLEVBQTRCLE9BQTVCLEVBQXFDO0FBQ25DLE1BQUksSUFBRSxTQUFTLE1BQU0sS0FBTixDQUFZLENBQVosQ0FBVCxFQUF3QixFQUF4QixDQUFOO0FBQUEsTUFBa0MsSUFBRSxVQUFRLENBQVIsR0FBVSxDQUFWLEdBQVksR0FBaEQ7QUFBQSxNQUFvRCxJQUFFLFVBQVEsQ0FBUixHQUFVLFVBQVEsQ0FBQyxDQUFuQixHQUFxQixPQUEzRTtBQUFBLE1BQW1GLElBQUUsS0FBRyxFQUF4RjtBQUFBLE1BQTJGLElBQUUsS0FBRyxDQUFILEdBQUssTUFBbEc7QUFBQSxNQUF5RyxJQUFFLElBQUUsUUFBN0c7QUFDQSxTQUFPLE1BQUksQ0FBQyxZQUFVLENBQUMsS0FBSyxLQUFMLENBQVcsQ0FBQyxJQUFFLENBQUgsSUFBTSxDQUFqQixJQUFvQixDQUFyQixJQUF3QixPQUFsQyxHQUEwQyxDQUFDLEtBQUssS0FBTCxDQUFXLENBQUMsSUFBRSxDQUFILElBQU0sQ0FBakIsSUFBb0IsQ0FBckIsSUFBd0IsS0FBbEUsSUFBeUUsS0FBSyxLQUFMLENBQVcsQ0FBQyxJQUFFLENBQUgsSUFBTSxDQUFqQixJQUFvQixDQUE3RixDQUFELEVBQWtHLFFBQWxHLENBQTJHLEVBQTNHLEVBQStHLEtBQS9HLENBQXFILENBQXJILENBQVg7QUFDRDs7O2tCQUdjLENBQUMsTUFBRCxFQUFTLFVBQVQsS0FBd0I7QUFDckMsUUFBTSxjQUFjLENBQUMsR0FBRCxFQUFNLEdBQU4sS0FBYztBQUNoQyxRQUFJLE1BQUosQ0FBVyx3QkFBWCxFQUFxQyxFQUFyQztBQUNELEdBRkQ7QUFHQSxTQUFPLEdBQVAsQ0FBVyx5QkFBWCxFQUFzQyxXQUFXLEtBQVgsQ0FBaUIsV0FBdkQsRUFBb0UsV0FBcEU7QUFDQSxTQUFPLEdBQVAsQ0FBVyw2QkFBWCxFQUEwQyxXQUExQzs7QUFFQSxRQUFNLGFBQWEsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLElBQVgsS0FBb0I7QUFDckMsVUFBTSxLQUFLLENBQUMsR0FBRCxFQUFNLElBQU4sS0FBZTtBQUN4QixVQUFJLEdBQUosRUFBUztBQUNQLGFBQUssR0FBTDtBQUNBO0FBQ0Q7QUFDRCxVQUFJLE1BQUosQ0FBVyxVQUFYLEVBQXVCLElBQXZCO0FBQ0QsS0FORDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLDZCQUFDLGFBQVk7QUFDWCxZQUFNLE9BQU8sTUFBTSxxQkFBcUIsQ0FBQyxLQUFELEVBQVEsU0FBUixDQUFyQixDQUFuQjtBQUNBLFlBQU0sV0FBVyxNQUFNLFdBQVcsTUFBWCxFQUFtQixLQUFLLEdBQUwsQ0FBUztBQUFBLGVBQUssRUFBRSxHQUFQO0FBQUEsT0FBVCxDQUFuQixFQUF5QyxJQUFJLEdBQTdDLENBQXZCOztBQUVBLFlBQU0sU0FBUyxLQUFLLE1BQUwsQ0FBWTtBQUFBLGVBQUssU0FBUyxRQUFULENBQWtCLEVBQUUsR0FBcEIsQ0FBTDtBQUFBLE9BQVosQ0FBZjs7QUFFQSxZQUFNLFFBQVEsT0FBTyxHQUFQLENBQVcsVUFBQyxFQUFFLEdBQUYsRUFBTyxPQUFQLEVBQUQ7QUFBQSxlQUN0Qix3Q0FBc0MsR0FBSTs4QkFBQSxDQUNyQixPQUFROzBCQUFBLENBQ1osWUFBWSxPQUFaLEVBQXFCLENBQUMsR0FBdEIsQ0FBMkI7VUFIdEI7QUFBQSxPQUFYLENBQWQ7O0FBT0EsYUFBTztBQUNMLDZCQUFxQixNQUFNLElBQU4sQ0FBVyxJQUFYLENBRGhCO0FBRUwsZUFBTztBQUZGLE9BQVA7QUFJRCxLQWpCRCxJQWlCSyxVQWpCTCxDQWlCZ0IsRUFqQmhCOzs7QUFvQkQsR0FoREQ7O0FBa0RBLFNBQU8sR0FBUCxDQUFXLFdBQVgsRUFBd0IsV0FBVyxXQUFuQyxFQUFnRCxVQUFoRDtBQUNBLFNBQU8sR0FBUCxDQUFXLGVBQVgsRUFBNEIsVUFBNUI7QUFDRCxDIiwiZmlsZSI6ImNvbnRyb2xsZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcHJpdmlsZWdlcyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9wcml2aWxlZ2VzJyk7XHJcbmNvbnN0IGNhdGVnb3JpZXMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvY2F0ZWdvcmllcycpO1xyXG5cclxuLy8gaW1wb3J0IHsgZ2V0RXZlbnRzQnlEYXRlLCBmaWx0ZXJCeVBpZCwgZXNjYXBlRXZlbnQgfSBmcm9tICcuL2V2ZW50JztcclxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xyXG5jb25zdCBwID0gUHJvbWlzZS5wcm9taXNpZnk7XHJcblxyXG5jb25zdCBnZXRBbGxDYXRlZ29yeUZpZWxkcyA9IHAoY2F0ZWdvcmllcy5nZXRBbGxDYXRlZ29yeUZpZWxkcyk7XHJcbmNvbnN0IGZpbHRlckNpZHMgPSBwKHByaXZpbGVnZXMuY2F0ZWdvcmllcy5maWx0ZXJDaWRzKTtcclxuXHJcbi8qIGVzbGludC1kaXNhYmxlICovXHJcbmZ1bmN0aW9uIHNoYWRlQ29sb3IyKGNvbG9yLCBwZXJjZW50KSB7XHJcbiAgdmFyIGY9cGFyc2VJbnQoY29sb3Iuc2xpY2UoMSksMTYpLHQ9cGVyY2VudDwwPzA6MjU1LHA9cGVyY2VudDwwP3BlcmNlbnQqLTE6cGVyY2VudCxSPWY+PjE2LEc9Zj4+OCYweDAwRkYsQj1mJjB4MDAwMEZGO1xyXG4gIHJldHVybiBcIiNcIisoMHgxMDAwMDAwKyhNYXRoLnJvdW5kKCh0LVIpKnApK1IpKjB4MTAwMDArKE1hdGgucm91bmQoKHQtRykqcCkrRykqMHgxMDArKE1hdGgucm91bmQoKHQtQikqcCkrQikpLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcclxufVxyXG4vKiBlc2xpbnQtZW5hYmxlICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCAocm91dGVyLCBtaWRkbGV3YXJlKSA9PiB7XHJcbiAgY29uc3QgcmVuZGVyQWRtaW4gPSAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5yZW5kZXIoJ2FkbWluL3BsdWdpbnMvY2FsZW5kYXInLCB7fSk7XHJcbiAgfTtcclxuICByb3V0ZXIuZ2V0KCcvYWRtaW4vcGx1Z2lucy9jYWxlbmRhcicsIG1pZGRsZXdhcmUuYWRtaW4uYnVpbGRIZWFkZXIsIHJlbmRlckFkbWluKTtcclxuICByb3V0ZXIuZ2V0KCcvYXBpL2FkbWluL3BsdWdpbnMvY2FsZW5kYXInLCByZW5kZXJBZG1pbik7XHJcblxyXG4gIGNvbnN0IHJlbmRlclBhZ2UgPSAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIGNvbnN0IGNiID0gKGVyciwgZGF0YSkgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgbmV4dChlcnIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICByZXMucmVuZGVyKCdjYWxlbmRhcicsIGRhdGEpO1xyXG4gICAgfTtcclxuICAgIC8vXHJcbiAgICAvLyBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgLy8gY29uc3QgZW5kRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAvLyBzdGFydERhdGUuc2V0RGF0ZSgtMSk7XHJcbiAgICAvLyBlbmREYXRlLnNldERhdGUoMzIpO1xyXG4gICAgLy9cclxuICAgIC8vIChhc3luYyB1aWQgPT4ge1xyXG4gICAgLy8gICBjb25zdCBldmVudHMgPSBhd2FpdCBnZXRFdmVudHNCeURhdGUoc3RhcnREYXRlLnZhbHVlT2YoKSwgZW5kRGF0ZS52YWx1ZU9mKCkpO1xyXG4gICAgLy8gICBjb25zdCBmaWx0ZXJlZCA9IGF3YWl0IGZpbHRlckJ5UGlkKGV2ZW50cywgdWlkKTtcclxuICAgIC8vICAgY29uc3QgZXNjYXBlZCA9IGF3YWl0IFByb21pc2UuYWxsKGZpbHRlcmVkLm1hcChlc2NhcGVFdmVudCkpO1xyXG4gICAgLy9cclxuICAgIC8vICAgcmV0dXJuIHtcclxuICAgIC8vICAgICBjYWw6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgIC8vICAgICAgIGV2ZW50czogZXNjYXBlZCxcclxuICAgIC8vICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLnZhbHVlT2YoKSxcclxuICAgIC8vICAgICAgIGVuZERhdGU6IGVuZERhdGUudmFsdWVPZigpLFxyXG4gICAgLy8gICAgIH0pLFxyXG4gICAgLy8gICB9O1xyXG4gICAgLy8gfSkocmVxLnVpZCkuYXNDYWxsYmFjayhjYik7XHJcblxyXG4gICAgKGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgY2F0cyA9IGF3YWl0IGdldEFsbENhdGVnb3J5RmllbGRzKFsnY2lkJywgJ2JnQ29sb3InXSk7XHJcbiAgICAgIGNvbnN0IGZpbHRlcmVkID0gYXdhaXQgZmlsdGVyQ2lkcygncmVhZCcsIGNhdHMubWFwKGMgPT4gYy5jaWQpLCByZXEudWlkKTtcclxuXHJcbiAgICAgIGNvbnN0IGNvbG9ycyA9IGNhdHMuZmlsdGVyKGMgPT4gZmlsdGVyZWQuaW5jbHVkZXMoYy5jaWQpKTtcclxuXHJcbiAgICAgIGNvbnN0IHN0eWxlID0gY29sb3JzLm1hcCgoeyBjaWQsIGJnQ29sb3IgfSkgPT5cclxuICAgICAgICBgLnBsdWdpbi1jYWxlbmRhci1jYWwtZXZlbnQtY2F0ZWdvcnktJHtjaWR9IHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YmdDb2xvcn07XHJcbiAgICAgICAgICBib3JkZXItY29sb3I6ICR7c2hhZGVDb2xvcjIoYmdDb2xvciwgLTAuMil9O1xyXG4gICAgICAgIH1gXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGNhbGVuZGFyRXZlbnRzU3R5bGU6IHN0eWxlLmpvaW4oJ1xcbicpLFxyXG4gICAgICAgIHRpdGxlOiAnW1tjYWxlbmRhcjpjYWxlbmRhcl1dJyxcclxuICAgICAgfTtcclxuICAgIH0pKCkuYXNDYWxsYmFjayhjYik7XHJcblxyXG4gICAgLy8gcmVzLnJlbmRlcignY2FsZW5kYXInLCB7fSk7XHJcbiAgfTtcclxuXHJcbiAgcm91dGVyLmdldCgnL2NhbGVuZGFyJywgbWlkZGxld2FyZS5idWlsZEhlYWRlciwgcmVuZGVyUGFnZSk7XHJcbiAgcm91dGVyLmdldCgnL2FwaS9jYWxlbmRhcicsIHJlbmRlclBhZ2UpO1xyXG59O1xyXG4iXX0=