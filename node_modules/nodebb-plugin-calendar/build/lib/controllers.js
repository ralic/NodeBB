'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const privileges = require.main.require('./src/privileges');
const categories = require.main.require('./src/categories');

// import { getEventsByDate, filterByPid, escapeEvent } from './event';

const p = _bluebird2.default.promisify;

const getAllCategoryFields = p(categories.getAllCategoryFields);
const filterCids = p(privileges.categories.filterCids);

/* eslint-disable */
function shadeColor2(color, percent) {
  var f = parseInt(color.slice(1), 16),
      t = percent < 0 ? 0 : 255,
      p = percent < 0 ? percent * -1 : percent,
      R = f >> 16,
      G = f >> 8 & 0x00FF,
      B = f & 0x0000FF;
  return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
}
/* eslint-enable */

exports.default = (router, middleware) => {
  const renderAdmin = (req, res) => {
    res.render('admin/plugins/calendar', {});
  };
  router.get('/admin/plugins/calendar', middleware.admin.buildHeader, renderAdmin);
  router.get('/api/admin/plugins/calendar', renderAdmin);

  const renderPage = (req, res, next) => {
    const cb = (err, data) => {
      if (err) {
        next(err);
        return;
      }
      res.render('calendar', data);
    };
    //
    // const startDate = new Date();
    // const endDate = new Date();
    // startDate.setDate(-1);
    // endDate.setDate(32);
    //
    // (async uid => {
    //   const events = await getEventsByDate(startDate.valueOf(), endDate.valueOf());
    //   const filtered = await filterByPid(events, uid);
    //   const escaped = await Promise.all(filtered.map(escapeEvent));
    //
    //   return {
    //     cal: JSON.stringify({
    //       events: escaped,
    //       startDate: startDate.valueOf(),
    //       endDate: endDate.valueOf(),
    //     }),
    //   };
    // })(req.uid).asCallback(cb);

    (0, _bluebird.coroutine)(function* () {
      const cats = yield getAllCategoryFields(['cid', 'bgColor']);
      const filtered = yield filterCids('read', cats.map(function (c) {
        return c.cid;
      }), req.uid);

      const colors = cats.filter(function (c) {
        return filtered.includes(c.cid);
      });

      const style = colors.map(function (_ref) {
        let cid = _ref.cid;
        let bgColor = _ref.bgColor;
        return `.plugin-calendar-cal-event-category-${ cid } {
          background-color: ${ bgColor };
          border-color: ${ shadeColor2(bgColor, -0.2) };
        }`;
      });

      return {
        calendarEventsStyle: style.join('\n'),
        title: '[[calendar:calendar]]'
      };
    })().asCallback(cb);

    // res.render('calendar', {});
  };

  router.get('/calendar', middleware.buildHeader, renderPage);
  router.get('/api/calendar', renderPage);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29udHJvbGxlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxhQUFhLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsa0JBQXJCLENBQW5CO0FBQ0EsTUFBTSxhQUFhLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsa0JBQXJCLENBQW5COzs7O0FBSUEsTUFBTSxJQUFJLG1CQUFRLFNBQWxCOztBQUVBLE1BQU0sdUJBQXVCLEVBQUUsV0FBVyxvQkFBYixDQUE3QjtBQUNBLE1BQU0sYUFBYSxFQUFFLFdBQVcsVUFBWCxDQUFzQixVQUF4QixDQUFuQjs7O0FBR0EsU0FBUyxXQUFULENBQXFCLEtBQXJCLEVBQTRCLE9BQTVCLEVBQXFDO0FBQ25DLE1BQUksSUFBRSxTQUFTLE1BQU0sS0FBTixDQUFZLENBQVosQ0FBVCxFQUF3QixFQUF4QixDQUFOO0FBQUEsTUFBa0MsSUFBRSxVQUFRLENBQVIsR0FBVSxDQUFWLEdBQVksR0FBaEQ7QUFBQSxNQUFvRCxJQUFFLFVBQVEsQ0FBUixHQUFVLFVBQVEsQ0FBQyxDQUFuQixHQUFxQixPQUEzRTtBQUFBLE1BQW1GLElBQUUsS0FBRyxFQUF4RjtBQUFBLE1BQTJGLElBQUUsS0FBRyxDQUFILEdBQUssTUFBbEc7QUFBQSxNQUF5RyxJQUFFLElBQUUsUUFBN0c7QUFDQSxTQUFPLE1BQUksQ0FBQyxZQUFVLENBQUMsS0FBSyxLQUFMLENBQVcsQ0FBQyxJQUFFLENBQUgsSUFBTSxDQUFqQixJQUFvQixDQUFyQixJQUF3QixPQUFsQyxHQUEwQyxDQUFDLEtBQUssS0FBTCxDQUFXLENBQUMsSUFBRSxDQUFILElBQU0sQ0FBakIsSUFBb0IsQ0FBckIsSUFBd0IsS0FBbEUsSUFBeUUsS0FBSyxLQUFMLENBQVcsQ0FBQyxJQUFFLENBQUgsSUFBTSxDQUFqQixJQUFvQixDQUE3RixDQUFELEVBQWtHLFFBQWxHLENBQTJHLEVBQTNHLEVBQStHLEtBQS9HLENBQXFILENBQXJILENBQVg7QUFDRDs7O2tCQUdjLENBQUMsTUFBRCxFQUFTLFVBQVQsS0FBd0I7QUFDckMsUUFBTSxjQUFjLENBQUMsR0FBRCxFQUFNLEdBQU4sS0FBYztBQUNoQyxRQUFJLE1BQUosQ0FBVyx3QkFBWCxFQUFxQyxFQUFyQztBQUNELEdBRkQ7QUFHQSxTQUFPLEdBQVAsQ0FBVyx5QkFBWCxFQUFzQyxXQUFXLEtBQVgsQ0FBaUIsV0FBdkQsRUFBb0UsV0FBcEU7QUFDQSxTQUFPLEdBQVAsQ0FBVyw2QkFBWCxFQUEwQyxXQUExQzs7QUFFQSxRQUFNLGFBQWEsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLElBQVgsS0FBb0I7QUFDckMsVUFBTSxLQUFLLENBQUMsR0FBRCxFQUFNLElBQU4sS0FBZTtBQUN4QixVQUFJLEdBQUosRUFBUztBQUNQLGFBQUssR0FBTDtBQUNBO0FBQ0Q7QUFDRCxVQUFJLE1BQUosQ0FBVyxVQUFYLEVBQXVCLElBQXZCO0FBQ0QsS0FORDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLDZCQUFDLGFBQVk7QUFDWCxZQUFNLE9BQU8sTUFBTSxxQkFBcUIsQ0FBQyxLQUFELEVBQVEsU0FBUixDQUFyQixDQUFuQjtBQUNBLFlBQU0sV0FBVyxNQUFNLFdBQVcsTUFBWCxFQUFtQixLQUFLLEdBQUwsQ0FBUztBQUFBLGVBQUssRUFBRSxHQUFQO0FBQUEsT0FBVCxDQUFuQixFQUF5QyxJQUFJLEdBQTdDLENBQXZCOztBQUVBLFlBQU0sU0FBUyxLQUFLLE1BQUwsQ0FBWTtBQUFBLGVBQUssU0FBUyxRQUFULENBQWtCLEVBQUUsR0FBcEIsQ0FBTDtBQUFBLE9BQVosQ0FBZjs7QUFFQSxZQUFNLFFBQVEsT0FBTyxHQUFQLENBQVc7QUFBQSxZQUFHLEdBQUgsUUFBRyxHQUFIO0FBQUEsWUFBUSxPQUFSLFFBQVEsT0FBUjtBQUFBLGVBQ3RCLHdDQUFzQyxHQUFJOzhCQUFBLENBQ3JCLE9BQVE7MEJBQUEsQ0FDWixZQUFZLE9BQVosRUFBcUIsQ0FBQyxHQUF0QixDQUEyQjtVQUh0QjtBQUFBLE9BQVgsQ0FBZDs7QUFPQSxhQUFPO0FBQ0wsNkJBQXFCLE1BQU0sSUFBTixDQUFXLElBQVgsQ0FEaEI7QUFFTCxlQUFPO0FBRkYsT0FBUDtBQUlELEtBakJELElBaUJLLFVBakJMLENBaUJnQixFQWpCaEI7OztBQW9CRCxHQWhERDs7QUFrREEsU0FBTyxHQUFQLENBQVcsV0FBWCxFQUF3QixXQUFXLFdBQW5DLEVBQWdELFVBQWhEO0FBQ0EsU0FBTyxHQUFQLENBQVcsZUFBWCxFQUE0QixVQUE1QjtBQUNELEMiLCJmaWxlIjoiY29udHJvbGxlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwcml2aWxlZ2VzID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3ByaXZpbGVnZXMnKTtcclxuY29uc3QgY2F0ZWdvcmllcyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9jYXRlZ29yaWVzJyk7XHJcblxyXG4vLyBpbXBvcnQgeyBnZXRFdmVudHNCeURhdGUsIGZpbHRlckJ5UGlkLCBlc2NhcGVFdmVudCB9IGZyb20gJy4vZXZlbnQnO1xyXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XHJcbmNvbnN0IHAgPSBQcm9taXNlLnByb21pc2lmeTtcclxuXHJcbmNvbnN0IGdldEFsbENhdGVnb3J5RmllbGRzID0gcChjYXRlZ29yaWVzLmdldEFsbENhdGVnb3J5RmllbGRzKTtcclxuY29uc3QgZmlsdGVyQ2lkcyA9IHAocHJpdmlsZWdlcy5jYXRlZ29yaWVzLmZpbHRlckNpZHMpO1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgKi9cclxuZnVuY3Rpb24gc2hhZGVDb2xvcjIoY29sb3IsIHBlcmNlbnQpIHtcclxuICB2YXIgZj1wYXJzZUludChjb2xvci5zbGljZSgxKSwxNiksdD1wZXJjZW50PDA/MDoyNTUscD1wZXJjZW50PDA/cGVyY2VudCotMTpwZXJjZW50LFI9Zj4+MTYsRz1mPj44JjB4MDBGRixCPWYmMHgwMDAwRkY7XHJcbiAgcmV0dXJuIFwiI1wiKygweDEwMDAwMDArKE1hdGgucm91bmQoKHQtUikqcCkrUikqMHgxMDAwMCsoTWF0aC5yb3VuZCgodC1HKSpwKStHKSoweDEwMCsoTWF0aC5yb3VuZCgodC1CKSpwKStCKSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG59XHJcbi8qIGVzbGludC1lbmFibGUgKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IChyb3V0ZXIsIG1pZGRsZXdhcmUpID0+IHtcclxuICBjb25zdCByZW5kZXJBZG1pbiA9IChyZXEsIHJlcykgPT4ge1xyXG4gICAgcmVzLnJlbmRlcignYWRtaW4vcGx1Z2lucy9jYWxlbmRhcicsIHt9KTtcclxuICB9O1xyXG4gIHJvdXRlci5nZXQoJy9hZG1pbi9wbHVnaW5zL2NhbGVuZGFyJywgbWlkZGxld2FyZS5hZG1pbi5idWlsZEhlYWRlciwgcmVuZGVyQWRtaW4pO1xyXG4gIHJvdXRlci5nZXQoJy9hcGkvYWRtaW4vcGx1Z2lucy9jYWxlbmRhcicsIHJlbmRlckFkbWluKTtcclxuXHJcbiAgY29uc3QgcmVuZGVyUGFnZSA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgY29uc3QgY2IgPSAoZXJyLCBkYXRhKSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICBuZXh0KGVycik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5yZW5kZXIoJ2NhbGVuZGFyJywgZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgLy9cclxuICAgIC8vIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAvLyBjb25zdCBlbmREYXRlID0gbmV3IERhdGUoKTtcclxuICAgIC8vIHN0YXJ0RGF0ZS5zZXREYXRlKC0xKTtcclxuICAgIC8vIGVuZERhdGUuc2V0RGF0ZSgzMik7XHJcbiAgICAvL1xyXG4gICAgLy8gKGFzeW5jIHVpZCA9PiB7XHJcbiAgICAvLyAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldEV2ZW50c0J5RGF0ZShzdGFydERhdGUudmFsdWVPZigpLCBlbmREYXRlLnZhbHVlT2YoKSk7XHJcbiAgICAvLyAgIGNvbnN0IGZpbHRlcmVkID0gYXdhaXQgZmlsdGVyQnlQaWQoZXZlbnRzLCB1aWQpO1xyXG4gICAgLy8gICBjb25zdCBlc2NhcGVkID0gYXdhaXQgUHJvbWlzZS5hbGwoZmlsdGVyZWQubWFwKGVzY2FwZUV2ZW50KSk7XHJcbiAgICAvL1xyXG4gICAgLy8gICByZXR1cm4ge1xyXG4gICAgLy8gICAgIGNhbDogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgLy8gICAgICAgZXZlbnRzOiBlc2NhcGVkLFxyXG4gICAgLy8gICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUudmFsdWVPZigpLFxyXG4gICAgLy8gICAgICAgZW5kRGF0ZTogZW5kRGF0ZS52YWx1ZU9mKCksXHJcbiAgICAvLyAgICAgfSksXHJcbiAgICAvLyAgIH07XHJcbiAgICAvLyB9KShyZXEudWlkKS5hc0NhbGxiYWNrKGNiKTtcclxuXHJcbiAgICAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjYXRzID0gYXdhaXQgZ2V0QWxsQ2F0ZWdvcnlGaWVsZHMoWydjaWQnLCAnYmdDb2xvciddKTtcclxuICAgICAgY29uc3QgZmlsdGVyZWQgPSBhd2FpdCBmaWx0ZXJDaWRzKCdyZWFkJywgY2F0cy5tYXAoYyA9PiBjLmNpZCksIHJlcS51aWQpO1xyXG5cclxuICAgICAgY29uc3QgY29sb3JzID0gY2F0cy5maWx0ZXIoYyA9PiBmaWx0ZXJlZC5pbmNsdWRlcyhjLmNpZCkpO1xyXG5cclxuICAgICAgY29uc3Qgc3R5bGUgPSBjb2xvcnMubWFwKCh7IGNpZCwgYmdDb2xvciB9KSA9PlxyXG4gICAgICAgIGAucGx1Z2luLWNhbGVuZGFyLWNhbC1ldmVudC1jYXRlZ29yeS0ke2NpZH0ge1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtiZ0NvbG9yfTtcclxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtzaGFkZUNvbG9yMihiZ0NvbG9yLCAtMC4yKX07XHJcbiAgICAgICAgfWBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgY2FsZW5kYXJFdmVudHNTdHlsZTogc3R5bGUuam9pbignXFxuJyksXHJcbiAgICAgICAgdGl0bGU6ICdbW2NhbGVuZGFyOmNhbGVuZGFyXV0nLFxyXG4gICAgICB9O1xyXG4gICAgfSkoKS5hc0NhbGxiYWNrKGNiKTtcclxuXHJcbiAgICAvLyByZXMucmVuZGVyKCdjYWxlbmRhcicsIHt9KTtcclxuICB9O1xyXG5cclxuICByb3V0ZXIuZ2V0KCcvY2FsZW5kYXInLCBtaWRkbGV3YXJlLmJ1aWxkSGVhZGVyLCByZW5kZXJQYWdlKTtcclxuICByb3V0ZXIuZ2V0KCcvYXBpL2NhbGVuZGFyJywgcmVuZGVyUGFnZSk7XHJcbn07XHJcbiJdfQ==