'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.privilegesListHuman = exports.privilegesGroupsList = exports.privilegesList = exports.canPostEvent = exports.canViewPost = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

const p = _bluebird2.default.promisify;

const privileges = require.main.require('./src/privileges');
const privilegesPostCan = p(privileges.posts.can);
const privilegesTopicCan = p(privileges.topics.can);
const canViewPost = (pid, uid) => privilegesPostCan('read', pid, uid);
const canPostEvent = (tid, uid) => privilegesTopicCan('plugin-calendar:event:post', tid, uid);

const privilegesList = (list, callback) => callback(null, [].concat(_toConsumableArray(list), ['plugin-calendar:event:post']));
const privilegesGroupsList = (list, callback) => callback(null, [].concat(_toConsumableArray(list), ['groups:plugin-calendar:event:post']));
const privilegesListHuman = (list, callback) => callback(null, [].concat(_toConsumableArray(list), [{ name: 'Post events' }]));

exports.canViewPost = canViewPost;
exports.canPostEvent = canPostEvent;
exports.privilegesList = privilegesList;
exports.privilegesGroupsList = privilegesGroupsList;
exports.privilegesListHuman = privilegesListHuman;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcHJpdmlsZWdlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7O0FBQ0EsTUFBTSxJQUFJLG1CQUFRLFNBQWxCOztBQUVBLE1BQU0sYUFBYSxRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLGtCQUFyQixDQUFuQjtBQUNBLE1BQU0sb0JBQW9CLEVBQUUsV0FBVyxLQUFYLENBQWlCLEdBQW5CLENBQTFCO0FBQ0EsTUFBTSxxQkFBcUIsRUFBRSxXQUFXLE1BQVgsQ0FBa0IsR0FBcEIsQ0FBM0I7QUFDQSxNQUFNLGNBQWMsQ0FBQyxHQUFELEVBQU0sR0FBTixLQUFjLGtCQUFrQixNQUFsQixFQUEwQixHQUExQixFQUErQixHQUEvQixDQUFsQztBQUNBLE1BQU0sZUFBZSxDQUFDLEdBQUQsRUFBTSxHQUFOLEtBQWMsbUJBQW1CLDRCQUFuQixFQUFpRCxHQUFqRCxFQUFzRCxHQUF0RCxDQUFuQzs7QUFFQSxNQUFNLGlCQUFpQixDQUFDLElBQUQsRUFBTyxRQUFQLEtBQ3JCLFNBQVMsSUFBVCwrQkFBbUIsSUFBbkIsSUFBeUIsNEJBQXpCLEdBREY7QUFFQSxNQUFNLHVCQUF1QixDQUFDLElBQUQsRUFBTyxRQUFQLEtBQzNCLFNBQVMsSUFBVCwrQkFBbUIsSUFBbkIsSUFBeUIsbUNBQXpCLEdBREY7QUFFQSxNQUFNLHNCQUFzQixDQUFDLElBQUQsRUFBTyxRQUFQLEtBQzFCLFNBQVMsSUFBVCwrQkFBbUIsSUFBbkIsSUFBeUIsRUFBRSxNQUFNLGFBQVIsRUFBekIsR0FERjs7UUFJRSxXLEdBQUEsVztRQUNBLFksR0FBQSxZO1FBQ0EsYyxHQUFBLGM7UUFDQSxvQixHQUFBLG9CO1FBQ0EsbUIsR0FBQSxtQiIsImZpbGUiOiJwcml2aWxlZ2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xyXG5jb25zdCBwID0gUHJvbWlzZS5wcm9taXNpZnk7XHJcblxyXG5jb25zdCBwcml2aWxlZ2VzID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3ByaXZpbGVnZXMnKTtcclxuY29uc3QgcHJpdmlsZWdlc1Bvc3RDYW4gPSBwKHByaXZpbGVnZXMucG9zdHMuY2FuKTtcclxuY29uc3QgcHJpdmlsZWdlc1RvcGljQ2FuID0gcChwcml2aWxlZ2VzLnRvcGljcy5jYW4pO1xyXG5jb25zdCBjYW5WaWV3UG9zdCA9IChwaWQsIHVpZCkgPT4gcHJpdmlsZWdlc1Bvc3RDYW4oJ3JlYWQnLCBwaWQsIHVpZCk7XHJcbmNvbnN0IGNhblBvc3RFdmVudCA9ICh0aWQsIHVpZCkgPT4gcHJpdmlsZWdlc1RvcGljQ2FuKCdwbHVnaW4tY2FsZW5kYXI6ZXZlbnQ6cG9zdCcsIHRpZCwgdWlkKTtcclxuXHJcbmNvbnN0IHByaXZpbGVnZXNMaXN0ID0gKGxpc3QsIGNhbGxiYWNrKSA9PlxyXG4gIGNhbGxiYWNrKG51bGwsIFsuLi5saXN0LCAncGx1Z2luLWNhbGVuZGFyOmV2ZW50OnBvc3QnXSk7XHJcbmNvbnN0IHByaXZpbGVnZXNHcm91cHNMaXN0ID0gKGxpc3QsIGNhbGxiYWNrKSA9PlxyXG4gIGNhbGxiYWNrKG51bGwsIFsuLi5saXN0LCAnZ3JvdXBzOnBsdWdpbi1jYWxlbmRhcjpldmVudDpwb3N0J10pO1xyXG5jb25zdCBwcml2aWxlZ2VzTGlzdEh1bWFuID0gKGxpc3QsIGNhbGxiYWNrKSA9PlxyXG4gIGNhbGxiYWNrKG51bGwsIFsuLi5saXN0LCB7IG5hbWU6ICdQb3N0IGV2ZW50cycgfV0pO1xyXG5cclxuZXhwb3J0IHtcclxuICBjYW5WaWV3UG9zdCxcclxuICBjYW5Qb3N0RXZlbnQsXHJcbiAgcHJpdmlsZWdlc0xpc3QsXHJcbiAgcHJpdmlsZWdlc0dyb3Vwc0xpc3QsXHJcbiAgcHJpdmlsZWdlc0xpc3RIdW1hbixcclxufTtcclxuIl19