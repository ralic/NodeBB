'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.privilegesListHuman = exports.privilegesGroupsList = exports.privilegesList = exports.canPostEvent = exports.canViewPost = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const p = _bluebird2.default.promisify;

const privileges = require.main.require('./src/privileges');
const privilegesPostCan = p(privileges.posts.can);
const privilegesTopicCan = p(privileges.topics.can);
const canViewPost = (pid, uid) => privilegesPostCan('read', pid, uid);
const canPostEvent = (tid, uid) => privilegesTopicCan('plugin-calendar:event:post', tid, uid);

const privilegesList = (list, callback) => callback(null, [].concat((0, _toConsumableArray3.default)(list), ['plugin-calendar:event:post']));
const privilegesGroupsList = (list, callback) => callback(null, [].concat((0, _toConsumableArray3.default)(list), ['groups:plugin-calendar:event:post']));
const privilegesListHuman = (list, callback) => callback(null, [].concat((0, _toConsumableArray3.default)(list), [{ name: 'Post events' }]));

exports.canViewPost = canViewPost;
exports.canPostEvent = canPostEvent;
exports.privilegesList = privilegesList;
exports.privilegesGroupsList = privilegesGroupsList;
exports.privilegesListHuman = privilegesListHuman;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcHJpdmlsZWdlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzs7Ozs7QUFDQSxNQUFNLElBQUksbUJBQVEsU0FBbEI7O0FBRUEsTUFBTSxhQUFhLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsa0JBQXJCLENBQW5CO0FBQ0EsTUFBTSxvQkFBb0IsRUFBRSxXQUFXLEtBQVgsQ0FBaUIsR0FBbkIsQ0FBMUI7QUFDQSxNQUFNLHFCQUFxQixFQUFFLFdBQVcsTUFBWCxDQUFrQixHQUFwQixDQUEzQjtBQUNBLE1BQU0sY0FBYyxDQUFDLEdBQUQsRUFBTSxHQUFOLEtBQWMsa0JBQWtCLE1BQWxCLEVBQTBCLEdBQTFCLEVBQStCLEdBQS9CLENBQWxDO0FBQ0EsTUFBTSxlQUFlLENBQUMsR0FBRCxFQUFNLEdBQU4sS0FBYyxtQkFBbUIsNEJBQW5CLEVBQWlELEdBQWpELEVBQXNELEdBQXRELENBQW5DOztBQUVBLE1BQU0saUJBQWlCLENBQUMsSUFBRCxFQUFPLFFBQVAsS0FDckIsU0FBUyxJQUFULDZDQUFtQixJQUFuQixJQUF5Qiw0QkFBekIsR0FERjtBQUVBLE1BQU0sdUJBQXVCLENBQUMsSUFBRCxFQUFPLFFBQVAsS0FDM0IsU0FBUyxJQUFULDZDQUFtQixJQUFuQixJQUF5QixtQ0FBekIsR0FERjtBQUVBLE1BQU0sc0JBQXNCLENBQUMsSUFBRCxFQUFPLFFBQVAsS0FDMUIsU0FBUyxJQUFULDZDQUFtQixJQUFuQixJQUF5QixFQUFFLE1BQU0sYUFBUixFQUF6QixHQURGOztRQUlFLFcsR0FBQSxXO1FBQ0EsWSxHQUFBLFk7UUFDQSxjLEdBQUEsYztRQUNBLG9CLEdBQUEsb0I7UUFDQSxtQixHQUFBLG1CIiwiZmlsZSI6InByaXZpbGVnZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XHJcbmNvbnN0IHAgPSBQcm9taXNlLnByb21pc2lmeTtcclxuXHJcbmNvbnN0IHByaXZpbGVnZXMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvcHJpdmlsZWdlcycpO1xyXG5jb25zdCBwcml2aWxlZ2VzUG9zdENhbiA9IHAocHJpdmlsZWdlcy5wb3N0cy5jYW4pO1xyXG5jb25zdCBwcml2aWxlZ2VzVG9waWNDYW4gPSBwKHByaXZpbGVnZXMudG9waWNzLmNhbik7XHJcbmNvbnN0IGNhblZpZXdQb3N0ID0gKHBpZCwgdWlkKSA9PiBwcml2aWxlZ2VzUG9zdENhbigncmVhZCcsIHBpZCwgdWlkKTtcclxuY29uc3QgY2FuUG9zdEV2ZW50ID0gKHRpZCwgdWlkKSA9PiBwcml2aWxlZ2VzVG9waWNDYW4oJ3BsdWdpbi1jYWxlbmRhcjpldmVudDpwb3N0JywgdGlkLCB1aWQpO1xyXG5cclxuY29uc3QgcHJpdmlsZWdlc0xpc3QgPSAobGlzdCwgY2FsbGJhY2spID0+XHJcbiAgY2FsbGJhY2sobnVsbCwgWy4uLmxpc3QsICdwbHVnaW4tY2FsZW5kYXI6ZXZlbnQ6cG9zdCddKTtcclxuY29uc3QgcHJpdmlsZWdlc0dyb3Vwc0xpc3QgPSAobGlzdCwgY2FsbGJhY2spID0+XHJcbiAgY2FsbGJhY2sobnVsbCwgWy4uLmxpc3QsICdncm91cHM6cGx1Z2luLWNhbGVuZGFyOmV2ZW50OnBvc3QnXSk7XHJcbmNvbnN0IHByaXZpbGVnZXNMaXN0SHVtYW4gPSAobGlzdCwgY2FsbGJhY2spID0+XHJcbiAgY2FsbGJhY2sobnVsbCwgWy4uLmxpc3QsIHsgbmFtZTogJ1Bvc3QgZXZlbnRzJyB9XSk7XHJcblxyXG5leHBvcnQge1xyXG4gIGNhblZpZXdQb3N0LFxyXG4gIGNhblBvc3RFdmVudCxcclxuICBwcml2aWxlZ2VzTGlzdCxcclxuICBwcml2aWxlZ2VzR3JvdXBzTGlzdCxcclxuICBwcml2aWxlZ2VzTGlzdEh1bWFuLFxyXG59O1xyXG4iXX0=