'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.templates = exports.tagTemplate = exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const tagTemplate = (name, content) => `\\s*\\[\\s*${ name }\\s*\\]\\s*(${ content })\\s*\\[\\s*\\/${ name }\\s*\\]\\s*`;

const regExps = {
  name: '.*',
  allday: 'true|false',
  startDate: '[0-9]+',
  endDate: '[0-9]+',
  reminders: '\\[[0-9,\\s]*\\]',
  location: '.*',
  description: '[\\w\\W]*'
};

const full = Object.keys(regExps).map(r => {
  regExps[r] = tagTemplate(r, regExps[r]);
  return regExps[r].replace('(', '(?:');
}).join('');
const eventRegExp = tagTemplate('event', full);

const parse = text => {
  const matches = text.match(eventRegExp);
  if (!matches || !matches.length || !Array.isArray(matches)) {
    return null;
  }
  const match = matches[0];
  const results = {};
  Object.keys(regExps).forEach(r => {
    results[r] = match.match(regExps[r])[1].trim();
  });

  return {
    name: results.name,
    allday: results.allday === 'true',
    startDate: parseInt(results.startDate, 10),
    endDate: parseInt(results.endDate, 10),
    reminders: JSON.parse(results.reminders).sort((a, b) => b - a),
    location: results.location,
    description: results.description
  };
};

const templates = (0, _extends3.default)({}, regExps, {
  event: eventRegExp
});

exports.default = parse;
exports.tagTemplate = tagTemplate;
exports.templates = templates;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGFyc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLE1BQU0sY0FBYyxDQUFDLElBQUQsRUFBTyxPQUFQLEtBQ2pCLGVBQWEsSUFBSyxpQkFBYyxPQUFRLG9CQUFpQixJQUFLLGNBRGpFOztBQUdBLE1BQU0sVUFBVTtBQUNkLFFBQU0sSUFEUTtBQUVkLFVBQVEsWUFGTTtBQUdkLGFBQVcsUUFIRztBQUlkLFdBQVMsUUFKSztBQUtkLGFBQVcsa0JBTEc7QUFNZCxZQUFVLElBTkk7QUFPZCxlQUFhO0FBUEMsQ0FBaEI7O0FBVUEsTUFBTSxPQUFPLE9BQU8sSUFBUCxDQUFZLE9BQVosRUFBcUIsR0FBckIsQ0FBeUIsS0FBSztBQUN6QyxVQUFRLENBQVIsSUFBYSxZQUFZLENBQVosRUFBZSxRQUFRLENBQVIsQ0FBZixDQUFiO0FBQ0EsU0FBTyxRQUFRLENBQVIsRUFBVyxPQUFYLENBQW1CLEdBQW5CLEVBQXdCLEtBQXhCLENBQVA7QUFDRCxDQUhZLEVBR1YsSUFIVSxDQUdMLEVBSEssQ0FBYjtBQUlBLE1BQU0sY0FBYyxZQUFZLE9BQVosRUFBcUIsSUFBckIsQ0FBcEI7O0FBRUEsTUFBTSxRQUFRLFFBQVE7QUFDcEIsUUFBTSxVQUFVLEtBQUssS0FBTCxDQUFXLFdBQVgsQ0FBaEI7QUFDQSxNQUFJLENBQUMsT0FBRCxJQUFZLENBQUMsUUFBUSxNQUFyQixJQUErQixDQUFDLE1BQU0sT0FBTixDQUFjLE9BQWQsQ0FBcEMsRUFBNEQ7QUFDMUQsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxRQUFNLFFBQVEsUUFBUSxDQUFSLENBQWQ7QUFDQSxRQUFNLFVBQVUsRUFBaEI7QUFDQSxTQUFPLElBQVAsQ0FBWSxPQUFaLEVBQXFCLE9BQXJCLENBQTZCLEtBQUs7QUFDaEMsWUFBUSxDQUFSLElBQWEsTUFBTSxLQUFOLENBQVksUUFBUSxDQUFSLENBQVosRUFBd0IsQ0FBeEIsRUFBMkIsSUFBM0IsRUFBYjtBQUNELEdBRkQ7O0FBSUEsU0FBTztBQUNMLFVBQU0sUUFBUSxJQURUO0FBRUwsWUFBUSxRQUFRLE1BQVIsS0FBbUIsTUFGdEI7QUFHTCxlQUFXLFNBQVMsUUFBUSxTQUFqQixFQUE0QixFQUE1QixDQUhOO0FBSUwsYUFBUyxTQUFTLFFBQVEsT0FBakIsRUFBMEIsRUFBMUIsQ0FKSjtBQUtMLGVBQVcsS0FBSyxLQUFMLENBQVcsUUFBUSxTQUFuQixFQUE4QixJQUE5QixDQUFtQyxDQUFDLENBQUQsRUFBSSxDQUFKLEtBQVUsSUFBSSxDQUFqRCxDQUxOO0FBTUwsY0FBVSxRQUFRLFFBTmI7QUFPTCxpQkFBYSxRQUFRO0FBUGhCLEdBQVA7QUFTRCxDQXBCRDs7QUFzQkEsTUFBTSx1Q0FDRCxPQURDO0FBRUosU0FBTztBQUZILEVBQU47O1FBTVcsTyxHQUFULEs7UUFDQSxXLEdBQUEsVztRQUNBLFMsR0FBQSxTIiwiZmlsZSI6InBhcnNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFnVGVtcGxhdGUgPSAobmFtZSwgY29udGVudCkgPT5cbiAgYFxcXFxzKlxcXFxbXFxcXHMqJHtuYW1lfVxcXFxzKlxcXFxdXFxcXHMqKCR7Y29udGVudH0pXFxcXHMqXFxcXFtcXFxccypcXFxcLyR7bmFtZX1cXFxccypcXFxcXVxcXFxzKmA7XG5cbmNvbnN0IHJlZ0V4cHMgPSB7XG4gIG5hbWU6ICcuKicsXG4gIGFsbGRheTogJ3RydWV8ZmFsc2UnLFxuICBzdGFydERhdGU6ICdbMC05XSsnLFxuICBlbmREYXRlOiAnWzAtOV0rJyxcbiAgcmVtaW5kZXJzOiAnXFxcXFtbMC05LFxcXFxzXSpcXFxcXScsXG4gIGxvY2F0aW9uOiAnLionLFxuICBkZXNjcmlwdGlvbjogJ1tcXFxcd1xcXFxXXSonLFxufTtcblxuY29uc3QgZnVsbCA9IE9iamVjdC5rZXlzKHJlZ0V4cHMpLm1hcChyID0+IHtcbiAgcmVnRXhwc1tyXSA9IHRhZ1RlbXBsYXRlKHIsIHJlZ0V4cHNbcl0pO1xuICByZXR1cm4gcmVnRXhwc1tyXS5yZXBsYWNlKCcoJywgJyg/OicpO1xufSkuam9pbignJyk7XG5jb25zdCBldmVudFJlZ0V4cCA9IHRhZ1RlbXBsYXRlKCdldmVudCcsIGZ1bGwpO1xuXG5jb25zdCBwYXJzZSA9IHRleHQgPT4ge1xuICBjb25zdCBtYXRjaGVzID0gdGV4dC5tYXRjaChldmVudFJlZ0V4cCk7XG4gIGlmICghbWF0Y2hlcyB8fCAhbWF0Y2hlcy5sZW5ndGggfHwgIUFycmF5LmlzQXJyYXkobWF0Y2hlcykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBtYXRjaCA9IG1hdGNoZXNbMF07XG4gIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgT2JqZWN0LmtleXMocmVnRXhwcykuZm9yRWFjaChyID0+IHtcbiAgICByZXN1bHRzW3JdID0gbWF0Y2gubWF0Y2gocmVnRXhwc1tyXSlbMV0udHJpbSgpO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IHJlc3VsdHMubmFtZSxcbiAgICBhbGxkYXk6IHJlc3VsdHMuYWxsZGF5ID09PSAndHJ1ZScsXG4gICAgc3RhcnREYXRlOiBwYXJzZUludChyZXN1bHRzLnN0YXJ0RGF0ZSwgMTApLFxuICAgIGVuZERhdGU6IHBhcnNlSW50KHJlc3VsdHMuZW5kRGF0ZSwgMTApLFxuICAgIHJlbWluZGVyczogSlNPTi5wYXJzZShyZXN1bHRzLnJlbWluZGVycykuc29ydCgoYSwgYikgPT4gYiAtIGEpLFxuICAgIGxvY2F0aW9uOiByZXN1bHRzLmxvY2F0aW9uLFxuICAgIGRlc2NyaXB0aW9uOiByZXN1bHRzLmRlc2NyaXB0aW9uLFxuICB9O1xufTtcblxuY29uc3QgdGVtcGxhdGVzID0ge1xuICAuLi5yZWdFeHBzLFxuICBldmVudDogZXZlbnRSZWdFeHAsXG59O1xuXG5leHBvcnQge1xuICBwYXJzZSBhcyBkZWZhdWx0LFxuICB0YWdUZW1wbGF0ZSxcbiAgdGVtcGxhdGVzLFxufTtcbiJdfQ==