'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

const tagTemplate = (name, content) => `\\s*\\[\\s*${ name }\\s*\\]\\s*(${ content })\\s*\\[\\s*\\/${ name }\\s*\\]\\s*`;

const regExps = {
  name: '.*',
  allday: 'true|false',
  startDate: '[0-9]+',
  endDate: '[0-9]+',
  reminders: '\\[[0-9,\\s]*\\]',
  location: '.*',
  description: '[\\w\\W]*'
};

const full = Object.keys(regExps).map(r => {
  regExps[r] = tagTemplate(r, regExps[r]);
  return regExps[r].replace('(', '(?:');
}).join('');
const eventRegExp = tagTemplate('event', full);

const parse = text => {
  const matches = text.match(eventRegExp);
  if (!matches || !matches.length || !Array.isArray(matches)) {
    return null;
  }
  const match = matches[0];
  const results = {};
  Object.keys(regExps).forEach(r => {
    results[r] = match.match(regExps[r])[1].trim();
  });

  return {
    name: results.name,
    allday: results.allday === 'true',
    startDate: parseInt(results.startDate, 10),
    endDate: parseInt(results.endDate, 10),
    reminders: JSON.parse(results.reminders).sort((a, b) => b - a),
    location: results.location,
    description: results.description
  };
};

const templates = _extends({}, regExps, {
  event: eventRegExp
});

exports.default = parse;
exports.tagTemplate = tagTemplate;
exports.templates = templates;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGFyc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUFNLGNBQWMsQ0FBQyxJQUFELEVBQU8sT0FBUCxLQUNqQixlQUFhLElBQUssaUJBQWMsT0FBUSxvQkFBaUIsSUFBSyxjQURqRTs7QUFHQSxNQUFNLFVBQVU7QUFDZCxRQUFNLElBRFE7QUFFZCxVQUFRLFlBRk07QUFHZCxhQUFXLFFBSEc7QUFJZCxXQUFTLFFBSks7QUFLZCxhQUFXLGtCQUxHO0FBTWQsWUFBVSxJQU5JO0FBT2QsZUFBYTtBQVBDLENBQWhCOztBQVVBLE1BQU0sT0FBTyxPQUFPLElBQVAsQ0FBWSxPQUFaLEVBQXFCLEdBQXJCLENBQXlCLEtBQUs7QUFDekMsVUFBUSxDQUFSLElBQWEsWUFBWSxDQUFaLEVBQWUsUUFBUSxDQUFSLENBQWYsQ0FBYjtBQUNBLFNBQU8sUUFBUSxDQUFSLEVBQVcsT0FBWCxDQUFtQixHQUFuQixFQUF3QixLQUF4QixDQUFQO0FBQ0QsQ0FIWSxFQUdWLElBSFUsQ0FHTCxFQUhLLENBQWI7QUFJQSxNQUFNLGNBQWMsWUFBWSxPQUFaLEVBQXFCLElBQXJCLENBQXBCOztBQUVBLE1BQU0sUUFBUSxRQUFRO0FBQ3BCLFFBQU0sVUFBVSxLQUFLLEtBQUwsQ0FBVyxXQUFYLENBQWhCO0FBQ0EsTUFBSSxDQUFDLE9BQUQsSUFBWSxDQUFDLFFBQVEsTUFBckIsSUFBK0IsQ0FBQyxNQUFNLE9BQU4sQ0FBYyxPQUFkLENBQXBDLEVBQTREO0FBQzFELFdBQU8sSUFBUDtBQUNEO0FBQ0QsUUFBTSxRQUFRLFFBQVEsQ0FBUixDQUFkO0FBQ0EsUUFBTSxVQUFVLEVBQWhCO0FBQ0EsU0FBTyxJQUFQLENBQVksT0FBWixFQUFxQixPQUFyQixDQUE2QixLQUFLO0FBQ2hDLFlBQVEsQ0FBUixJQUFhLE1BQU0sS0FBTixDQUFZLFFBQVEsQ0FBUixDQUFaLEVBQXdCLENBQXhCLEVBQTJCLElBQTNCLEVBQWI7QUFDRCxHQUZEOztBQUlBLFNBQU87QUFDTCxVQUFNLFFBQVEsSUFEVDtBQUVMLFlBQVEsUUFBUSxNQUFSLEtBQW1CLE1BRnRCO0FBR0wsZUFBVyxTQUFTLFFBQVEsU0FBakIsRUFBNEIsRUFBNUIsQ0FITjtBQUlMLGFBQVMsU0FBUyxRQUFRLE9BQWpCLEVBQTBCLEVBQTFCLENBSko7QUFLTCxlQUFXLEtBQUssS0FBTCxDQUFXLFFBQVEsU0FBbkIsRUFBOEIsSUFBOUIsQ0FBbUMsQ0FBQyxDQUFELEVBQUksQ0FBSixLQUFVLElBQUksQ0FBakQsQ0FMTjtBQU1MLGNBQVUsUUFBUSxRQU5iO0FBT0wsaUJBQWEsUUFBUTtBQVBoQixHQUFQO0FBU0QsQ0FwQkQ7O0FBc0JBLE1BQU0seUJBQ0QsT0FEQztBQUVKLFNBQU87QUFGSCxFQUFOOztRQU1XLE8sR0FBVCxLO1FBQ0EsVyxHQUFBLFc7UUFDQSxTLEdBQUEsUyIsImZpbGUiOiJwYXJzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhZ1RlbXBsYXRlID0gKG5hbWUsIGNvbnRlbnQpID0+XG4gIGBcXFxccypcXFxcW1xcXFxzKiR7bmFtZX1cXFxccypcXFxcXVxcXFxzKigke2NvbnRlbnR9KVxcXFxzKlxcXFxbXFxcXHMqXFxcXC8ke25hbWV9XFxcXHMqXFxcXF1cXFxccypgO1xuXG5jb25zdCByZWdFeHBzID0ge1xuICBuYW1lOiAnLionLFxuICBhbGxkYXk6ICd0cnVlfGZhbHNlJyxcbiAgc3RhcnREYXRlOiAnWzAtOV0rJyxcbiAgZW5kRGF0ZTogJ1swLTldKycsXG4gIHJlbWluZGVyczogJ1xcXFxbWzAtOSxcXFxcc10qXFxcXF0nLFxuICBsb2NhdGlvbjogJy4qJyxcbiAgZGVzY3JpcHRpb246ICdbXFxcXHdcXFxcV10qJyxcbn07XG5cbmNvbnN0IGZ1bGwgPSBPYmplY3Qua2V5cyhyZWdFeHBzKS5tYXAociA9PiB7XG4gIHJlZ0V4cHNbcl0gPSB0YWdUZW1wbGF0ZShyLCByZWdFeHBzW3JdKTtcbiAgcmV0dXJuIHJlZ0V4cHNbcl0ucmVwbGFjZSgnKCcsICcoPzonKTtcbn0pLmpvaW4oJycpO1xuY29uc3QgZXZlbnRSZWdFeHAgPSB0YWdUZW1wbGF0ZSgnZXZlbnQnLCBmdWxsKTtcblxuY29uc3QgcGFyc2UgPSB0ZXh0ID0+IHtcbiAgY29uc3QgbWF0Y2hlcyA9IHRleHQubWF0Y2goZXZlbnRSZWdFeHApO1xuICBpZiAoIW1hdGNoZXMgfHwgIW1hdGNoZXMubGVuZ3RoIHx8ICFBcnJheS5pc0FycmF5KG1hdGNoZXMpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgbWF0Y2ggPSBtYXRjaGVzWzBdO1xuICBjb25zdCByZXN1bHRzID0ge307XG4gIE9iamVjdC5rZXlzKHJlZ0V4cHMpLmZvckVhY2gociA9PiB7XG4gICAgcmVzdWx0c1tyXSA9IG1hdGNoLm1hdGNoKHJlZ0V4cHNbcl0pWzFdLnRyaW0oKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiByZXN1bHRzLm5hbWUsXG4gICAgYWxsZGF5OiByZXN1bHRzLmFsbGRheSA9PT0gJ3RydWUnLFxuICAgIHN0YXJ0RGF0ZTogcGFyc2VJbnQocmVzdWx0cy5zdGFydERhdGUsIDEwKSxcbiAgICBlbmREYXRlOiBwYXJzZUludChyZXN1bHRzLmVuZERhdGUsIDEwKSxcbiAgICByZW1pbmRlcnM6IEpTT04ucGFyc2UocmVzdWx0cy5yZW1pbmRlcnMpLnNvcnQoKGEsIGIpID0+IGIgLSBhKSxcbiAgICBsb2NhdGlvbjogcmVzdWx0cy5sb2NhdGlvbixcbiAgICBkZXNjcmlwdGlvbjogcmVzdWx0cy5kZXNjcmlwdGlvbixcbiAgfTtcbn07XG5cbmNvbnN0IHRlbXBsYXRlcyA9IHtcbiAgLi4ucmVnRXhwcyxcbiAgZXZlbnQ6IGV2ZW50UmVnRXhwLFxufTtcblxuZXhwb3J0IHtcbiAgcGFyc2UgYXMgZGVmYXVsdCxcbiAgdGFnVGVtcGxhdGUsXG4gIHRlbXBsYXRlcyxcbn07XG4iXX0=