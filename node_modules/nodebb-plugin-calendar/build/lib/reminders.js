'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notify = exports.initNotifierDaemon = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _responses = require('./responses');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const db = require.main.require('./src/database');
const notifications = require.main.require('./src/notifications');
const posts = require.main.require('./src/posts');
const meta = require.main.require('./src/meta');

// import { fork } from 'child_process';

const p = _bluebird2.default.promisify;

const getSortedSetRange = p(db.getSortedSetRange);
const getObjectsFields = p(db.getObjectsFields);
const createNotif = p(notifications.create);
const pushNotif = p(notifications.push);
const getPostField = p(posts.getPostField);
const getSetting = p(meta.settings.getOne);

const listKey = 'plugins:calendar:events';

const getAll = (() => {
  var ref = (0, _bluebird.coroutine)(function* () {
    const keys = yield getSortedSetRange(listKey, 0, -1);
    const events = yield getObjectsFields(keys, ['pid', 'reminders', 'startDate']);

    return events;
  });
  return function getAll() {
    return ref.apply(this, arguments);
  };
})();

const notify = (() => {
  var ref = (0, _bluebird.coroutine)(function* ({ event, reminder, message }) {
    let uids;
    // if reminder is for the event start
    // notify 'maybe' and 'yes' responders
    // otherwise, notify only 'yes' responders
    if (reminder === 0) {
      const responses = yield (0, _responses.getAll)({
        pid: event.pid,
        selection: ['yes', 'maybe']
      });
      uids = [...responses.yes, ...responses.maybe];
    } else {
      const responses = yield (0, _responses.getAll)({
        pid: event.pid,
        selection: ['yes']
      });
      uids = responses.yes;
    }

    const content = yield getPostField(event.pid, 'content');
    const notif = yield createNotif({
      bodyShort: `[[calendar:event_starting, ${ message }, ${ event.name }]]`,
      bodyLong: content,
      nid: `plugin-calendar:tid:${ event.tid }:pid:${ event.pid }:event`,
      pid: event.pid,
      tid: event.tid,
      from: event.uid,
      path: `/post/${ event.pid }`,
      importance: 1
    });
    yield pushNotif(notif, uids);
  });
  return function notify(_x) {
    return ref.apply(this, arguments);
  };
})();

const initNotifierDaemon = (() => {
  var ref = (0, _bluebird.coroutine)(function* () {
    // ms between checking for reminders
    // pulled from settings
    const checkingInterval = yield getSetting('plugin-calendar', 'checkingInterval');

    const checkReminders = (() => {
      var ref = (0, _bluebird.coroutine)(function* () {
        // timespan we check is a checkingInterval in the future
        // so as to avoid sending notifications too late
        const start = Date.now() + checkingInterval;
        const end = start + checkingInterval;

        const events = yield getAll();

        const mom = (0, _moment2.default)(start);

        yield _bluebird2.default.all(events.map(function (event) {
          const reminder = [0, ...event.reminders].find(function (r) {
            const remDate = event.startDate - r;
            return remDate > start && remDate < end;
          });
          if (reminder === 0) {
            return {
              event,
              reminder,
              message: '[[calendar:now]]'
            };
          }
          if (reminder) {
            const message = mom.to(event.startDate);
            return { event, reminder, message };
          }
          return null;
        }).filter(Boolean).map(notify));
      });
      return function checkReminders() {
        return ref.apply(this, arguments);
      };
    })();

    const daemon = function daemon() {
      checkReminders().asCallback(function () {
        return setTimeout(daemon, checkingInterval);
      });
    };
    daemon();
  });
  return function initNotifierDaemon() {
    return ref.apply(this, arguments);
  };
})();

exports.initNotifierDaemon = initNotifierDaemon;
exports.notify = notify;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVtaW5kZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBTUE7O0FBQ0E7Ozs7OztBQVBBLE1BQU0sS0FBSyxRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLGdCQUFyQixDQUFYO0FBQ0EsTUFBTSxnQkFBZ0IsUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixxQkFBckIsQ0FBdEI7QUFDQSxNQUFNLFFBQVEsUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixhQUFyQixDQUFkO0FBQ0EsTUFBTSxPQUFPLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsWUFBckIsQ0FBYjs7OztBQU1BLE1BQU0sSUFBSSxtQkFBUSxTQUFsQjs7QUFFQSxNQUFNLG9CQUFvQixFQUFFLEdBQUcsaUJBQUwsQ0FBMUI7QUFDQSxNQUFNLG1CQUFtQixFQUFFLEdBQUcsZ0JBQUwsQ0FBekI7QUFDQSxNQUFNLGNBQWMsRUFBRSxjQUFjLE1BQWhCLENBQXBCO0FBQ0EsTUFBTSxZQUFZLEVBQUUsY0FBYyxJQUFoQixDQUFsQjtBQUNBLE1BQU0sZUFBZSxFQUFFLE1BQU0sWUFBUixDQUFyQjtBQUNBLE1BQU0sYUFBYSxFQUFFLEtBQUssUUFBTCxDQUFjLE1BQWhCLENBQW5COztBQUVBLE1BQU0sVUFBVSx5QkFBaEI7O0FBRUEsTUFBTTtBQUFBLHFDQUFTLGFBQVk7QUFDekIsVUFBTSxPQUFPLE1BQU0sa0JBQWtCLE9BQWxCLEVBQTJCLENBQTNCLEVBQThCLENBQUMsQ0FBL0IsQ0FBbkI7QUFDQSxVQUFNLFNBQVMsTUFBTSxpQkFBaUIsSUFBakIsRUFBdUIsQ0FBQyxLQUFELEVBQVEsV0FBUixFQUFxQixXQUFyQixDQUF2QixDQUFyQjs7QUFFQSxXQUFPLE1BQVA7QUFDRCxHQUxLO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUFPQSxNQUFNO0FBQUEscUNBQVMsV0FBTyxFQUFFLEtBQUYsRUFBUyxRQUFULEVBQW1CLE9BQW5CLEVBQVAsRUFBd0M7QUFDckQsUUFBSSxJQUFKOzs7O0FBSUEsUUFBSSxhQUFhLENBQWpCLEVBQW9CO0FBQ2xCLFlBQU0sWUFBWSxNQUFNLHVCQUFhO0FBQ25DLGFBQUssTUFBTSxHQUR3QjtBQUVuQyxtQkFBVyxDQUFDLEtBQUQsRUFBUSxPQUFSO0FBRndCLE9BQWIsQ0FBeEI7QUFJQSxhQUFPLENBQUMsR0FBRyxVQUFVLEdBQWQsRUFBbUIsR0FBRyxVQUFVLEtBQWhDLENBQVA7QUFDRCxLQU5ELE1BTU87QUFDTCxZQUFNLFlBQVksTUFBTSx1QkFBYTtBQUNuQyxhQUFLLE1BQU0sR0FEd0I7QUFFbkMsbUJBQVcsQ0FBQyxLQUFEO0FBRndCLE9BQWIsQ0FBeEI7QUFJQSxhQUFPLFVBQVUsR0FBakI7QUFDRDs7QUFFRCxVQUFNLFVBQVUsTUFBTSxhQUFhLE1BQU0sR0FBbkIsRUFBd0IsU0FBeEIsQ0FBdEI7QUFDQSxVQUFNLFFBQVEsTUFBTSxZQUFZO0FBQzlCLGlCQUFZLCtCQUE2QixPQUFRLE9BQUksTUFBTSxJQUFLLEtBRGxDO0FBRTlCLGdCQUFVLE9BRm9CO0FBRzlCLFdBQU0sd0JBQXNCLE1BQU0sR0FBSSxVQUFPLE1BQU0sR0FBSSxTQUh6QjtBQUk5QixXQUFLLE1BQU0sR0FKbUI7QUFLOUIsV0FBSyxNQUFNLEdBTG1CO0FBTTlCLFlBQU0sTUFBTSxHQU5rQjtBQU85QixZQUFPLFVBQVEsTUFBTSxHQUFJLEdBUEs7QUFROUIsa0JBQVk7QUFSa0IsS0FBWixDQUFwQjtBQVVBLFVBQU0sVUFBVSxLQUFWLEVBQWlCLElBQWpCLENBQU47QUFDRCxHQS9CSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBaUNBLE1BQU07QUFBQSxxQ0FBcUIsYUFBWTs7O0FBR3JDLFVBQU0sbUJBQW1CLE1BQU0sV0FBVyxpQkFBWCxFQUE4QixrQkFBOUIsQ0FBL0I7O0FBRUEsVUFBTTtBQUFBLHlDQUFpQixhQUFZOzs7QUFHakMsY0FBTSxRQUFRLEtBQUssR0FBTCxLQUFhLGdCQUEzQjtBQUNBLGNBQU0sTUFBTSxRQUFRLGdCQUFwQjs7QUFFQSxjQUFNLFNBQVMsTUFBTSxRQUFyQjs7QUFFQSxjQUFNLE1BQU0sc0JBQU8sS0FBUCxDQUFaOztBQUVBLGNBQU0sbUJBQVEsR0FBUixDQUNKLE9BQ0MsR0FERCxDQUNLLGlCQUFTO0FBQ1osZ0JBQU0sV0FBVyxDQUFDLENBQUQsRUFBSSxHQUFHLE1BQU0sU0FBYixFQUF3QixJQUF4QixDQUE2QixhQUFLO0FBQ2pELGtCQUFNLFVBQVUsTUFBTSxTQUFOLEdBQWtCLENBQWxDO0FBQ0EsbUJBQU8sVUFBVSxLQUFWLElBQW1CLFVBQVUsR0FBcEM7QUFDRCxXQUhnQixDQUFqQjtBQUlBLGNBQUksYUFBYSxDQUFqQixFQUFvQjtBQUNsQixtQkFBTztBQUNMLG1CQURLO0FBRUwsc0JBRks7QUFHTCx1QkFBUztBQUhKLGFBQVA7QUFLRDtBQUNELGNBQUksUUFBSixFQUFjO0FBQ1osa0JBQU0sVUFBVSxJQUFJLEVBQUosQ0FBTyxNQUFNLFNBQWIsQ0FBaEI7QUFDQSxtQkFBTyxFQUFFLEtBQUYsRUFBUyxRQUFULEVBQW1CLE9BQW5CLEVBQVA7QUFDRDtBQUNELGlCQUFPLElBQVA7QUFDRCxTQWxCRCxFQW1CQyxNQW5CRCxDQW1CUSxPQW5CUixFQW9CQyxHQXBCRCxDQW9CSyxNQXBCTCxDQURJLENBQU47QUF1QkQsT0FqQ0s7QUFBQTtBQUFBO0FBQUE7QUFBQSxRQUFOOztBQW1DQSxVQUFNLFNBQVMsU0FBVCxNQUFTLEdBQU07QUFDbkIsdUJBQWlCLFVBQWpCLENBQTRCO0FBQUEsZUFBTSxXQUFXLE1BQVgsRUFBbUIsZ0JBQW5CLENBQU47QUFBQSxPQUE1QjtBQUNELEtBRkQ7QUFHQTtBQUNELEdBNUNLO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7UUE4Q1Msa0IsR0FBQSxrQjtRQUFvQixNLEdBQUEsTSIsImZpbGUiOiJyZW1pbmRlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkYiA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9kYXRhYmFzZScpO1xuY29uc3Qgbm90aWZpY2F0aW9ucyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9ub3RpZmljYXRpb25zJyk7XG5jb25zdCBwb3N0cyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9wb3N0cycpO1xuY29uc3QgbWV0YSA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9tZXRhJyk7XG5cbi8vIGltcG9ydCB7IGZvcmsgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IGdldEFsbCBhcyBnZXRSZXNwb25zZXMgfSBmcm9tICcuL3Jlc3BvbnNlcyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5jb25zdCBwID0gUHJvbWlzZS5wcm9taXNpZnk7XG5cbmNvbnN0IGdldFNvcnRlZFNldFJhbmdlID0gcChkYi5nZXRTb3J0ZWRTZXRSYW5nZSk7XG5jb25zdCBnZXRPYmplY3RzRmllbGRzID0gcChkYi5nZXRPYmplY3RzRmllbGRzKTtcbmNvbnN0IGNyZWF0ZU5vdGlmID0gcChub3RpZmljYXRpb25zLmNyZWF0ZSk7XG5jb25zdCBwdXNoTm90aWYgPSBwKG5vdGlmaWNhdGlvbnMucHVzaCk7XG5jb25zdCBnZXRQb3N0RmllbGQgPSBwKHBvc3RzLmdldFBvc3RGaWVsZCk7XG5jb25zdCBnZXRTZXR0aW5nID0gcChtZXRhLnNldHRpbmdzLmdldE9uZSk7XG5cbmNvbnN0IGxpc3RLZXkgPSAncGx1Z2luczpjYWxlbmRhcjpldmVudHMnO1xuXG5jb25zdCBnZXRBbGwgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGtleXMgPSBhd2FpdCBnZXRTb3J0ZWRTZXRSYW5nZShsaXN0S2V5LCAwLCAtMSk7XG4gIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldE9iamVjdHNGaWVsZHMoa2V5cywgWydwaWQnLCAncmVtaW5kZXJzJywgJ3N0YXJ0RGF0ZSddKTtcblxuICByZXR1cm4gZXZlbnRzO1xufTtcblxuY29uc3Qgbm90aWZ5ID0gYXN5bmMgKHsgZXZlbnQsIHJlbWluZGVyLCBtZXNzYWdlIH0pID0+IHtcbiAgbGV0IHVpZHM7XG4gIC8vIGlmIHJlbWluZGVyIGlzIGZvciB0aGUgZXZlbnQgc3RhcnRcbiAgLy8gbm90aWZ5ICdtYXliZScgYW5kICd5ZXMnIHJlc3BvbmRlcnNcbiAgLy8gb3RoZXJ3aXNlLCBub3RpZnkgb25seSAneWVzJyByZXNwb25kZXJzXG4gIGlmIChyZW1pbmRlciA9PT0gMCkge1xuICAgIGNvbnN0IHJlc3BvbnNlcyA9IGF3YWl0IGdldFJlc3BvbnNlcyh7XG4gICAgICBwaWQ6IGV2ZW50LnBpZCxcbiAgICAgIHNlbGVjdGlvbjogWyd5ZXMnLCAnbWF5YmUnXSxcbiAgICB9KTtcbiAgICB1aWRzID0gWy4uLnJlc3BvbnNlcy55ZXMsIC4uLnJlc3BvbnNlcy5tYXliZV07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVzcG9uc2VzID0gYXdhaXQgZ2V0UmVzcG9uc2VzKHtcbiAgICAgIHBpZDogZXZlbnQucGlkLFxuICAgICAgc2VsZWN0aW9uOiBbJ3llcyddLFxuICAgIH0pO1xuICAgIHVpZHMgPSByZXNwb25zZXMueWVzO1xuICB9XG5cbiAgY29uc3QgY29udGVudCA9IGF3YWl0IGdldFBvc3RGaWVsZChldmVudC5waWQsICdjb250ZW50Jyk7XG4gIGNvbnN0IG5vdGlmID0gYXdhaXQgY3JlYXRlTm90aWYoe1xuICAgIGJvZHlTaG9ydDogYFtbY2FsZW5kYXI6ZXZlbnRfc3RhcnRpbmcsICR7bWVzc2FnZX0sICR7ZXZlbnQubmFtZX1dXWAsXG4gICAgYm9keUxvbmc6IGNvbnRlbnQsXG4gICAgbmlkOiBgcGx1Z2luLWNhbGVuZGFyOnRpZDoke2V2ZW50LnRpZH06cGlkOiR7ZXZlbnQucGlkfTpldmVudGAsXG4gICAgcGlkOiBldmVudC5waWQsXG4gICAgdGlkOiBldmVudC50aWQsXG4gICAgZnJvbTogZXZlbnQudWlkLFxuICAgIHBhdGg6IGAvcG9zdC8ke2V2ZW50LnBpZH1gLFxuICAgIGltcG9ydGFuY2U6IDEsXG4gIH0pO1xuICBhd2FpdCBwdXNoTm90aWYobm90aWYsIHVpZHMpO1xufTtcblxuY29uc3QgaW5pdE5vdGlmaWVyRGFlbW9uID0gYXN5bmMgKCkgPT4ge1xuICAvLyBtcyBiZXR3ZWVuIGNoZWNraW5nIGZvciByZW1pbmRlcnNcbiAgLy8gcHVsbGVkIGZyb20gc2V0dGluZ3NcbiAgY29uc3QgY2hlY2tpbmdJbnRlcnZhbCA9IGF3YWl0IGdldFNldHRpbmcoJ3BsdWdpbi1jYWxlbmRhcicsICdjaGVja2luZ0ludGVydmFsJyk7XG5cbiAgY29uc3QgY2hlY2tSZW1pbmRlcnMgPSBhc3luYyAoKSA9PiB7XG4gICAgLy8gdGltZXNwYW4gd2UgY2hlY2sgaXMgYSBjaGVja2luZ0ludGVydmFsIGluIHRoZSBmdXR1cmVcbiAgICAvLyBzbyBhcyB0byBhdm9pZCBzZW5kaW5nIG5vdGlmaWNhdGlvbnMgdG9vIGxhdGVcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCkgKyBjaGVja2luZ0ludGVydmFsO1xuICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgY2hlY2tpbmdJbnRlcnZhbDtcblxuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldEFsbCgpO1xuXG4gICAgY29uc3QgbW9tID0gbW9tZW50KHN0YXJ0KTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgZXZlbnRzXG4gICAgICAubWFwKGV2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgcmVtaW5kZXIgPSBbMCwgLi4uZXZlbnQucmVtaW5kZXJzXS5maW5kKHIgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlbURhdGUgPSBldmVudC5zdGFydERhdGUgLSByO1xuICAgICAgICAgIHJldHVybiByZW1EYXRlID4gc3RhcnQgJiYgcmVtRGF0ZSA8IGVuZDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZW1pbmRlciA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIHJlbWluZGVyLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1tbY2FsZW5kYXI6bm93XV0nLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbWluZGVyKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IG1vbS50byhldmVudC5zdGFydERhdGUpO1xuICAgICAgICAgIHJldHVybiB7IGV2ZW50LCByZW1pbmRlciwgbWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgIC5tYXAobm90aWZ5KVxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgZGFlbW9uID0gKCkgPT4ge1xuICAgIGNoZWNrUmVtaW5kZXJzKCkuYXNDYWxsYmFjaygoKSA9PiBzZXRUaW1lb3V0KGRhZW1vbiwgY2hlY2tpbmdJbnRlcnZhbCkpO1xuICB9O1xuICBkYWVtb24oKTtcbn07XG5cbmV4cG9ydCB7IGluaXROb3RpZmllckRhZW1vbiwgbm90aWZ5IH07XG4iXX0=