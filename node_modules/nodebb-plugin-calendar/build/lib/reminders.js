'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notify = exports.initNotifierDaemon = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _responses = require('./responses');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const db = require.main.require('./src/database');
const notifications = require.main.require('./src/notifications');
const posts = require.main.require('./src/posts');
const meta = require.main.require('./src/meta');

// import { fork } from 'child_process';

const p = _bluebird2.default.promisify;

const getSortedSetRange = p(db.getSortedSetRange);
const getObjectsFields = p(db.getObjectsFields);
const createNotif = p(notifications.create);
const pushNotif = p(notifications.push);
const getPostField = p(posts.getPostField);
const getSetting = p(meta.settings.getOne);

const listKey = 'plugins:calendar:events';

const getAll = (() => {
  var ref = (0, _bluebird.coroutine)(function* () {
    const keys = yield getSortedSetRange(listKey, 0, -1);
    const events = yield getObjectsFields(keys, ['pid', 'reminders', 'startDate']);

    return events;
  });
  return function getAll() {
    return ref.apply(this, arguments);
  };
})();

const notify = (() => {
  var ref = (0, _bluebird.coroutine)(function* (_ref) {
    let event = _ref.event;
    let reminder = _ref.reminder;
    let message = _ref.message;

    let uids;
    // if reminder is for the event start
    // notify 'maybe' and 'yes' responders
    // otherwise, notify only 'yes' responders
    if (reminder === 0) {
      const responses = yield (0, _responses.getAll)({
        pid: event.pid,
        selection: ['yes', 'maybe']
      });
      uids = [].concat((0, _toConsumableArray3.default)(responses.yes), (0, _toConsumableArray3.default)(responses.maybe));
    } else {
      const responses = yield (0, _responses.getAll)({
        pid: event.pid,
        selection: ['yes']
      });
      uids = responses.yes;
    }

    const content = yield getPostField(event.pid, 'content');
    const notif = yield createNotif({
      bodyShort: `[[calendar:event_starting, ${ message }, ${ event.name }]]`,
      bodyLong: content,
      nid: `plugin-calendar:tid:${ event.tid }:pid:${ event.pid }:event`,
      pid: event.pid,
      tid: event.tid,
      from: event.uid,
      path: `/post/${ event.pid }`,
      importance: 1
    });
    yield pushNotif(notif, uids);
  });
  return function notify(_x) {
    return ref.apply(this, arguments);
  };
})();

const initNotifierDaemon = (() => {
  var ref = (0, _bluebird.coroutine)(function* () {
    // ms between checking for reminders
    // pulled from settings
    const checkingInterval = yield getSetting('plugin-calendar', 'checkingInterval');

    const checkReminders = (() => {
      var ref = (0, _bluebird.coroutine)(function* () {
        // timespan we check is a checkingInterval in the future
        // so as to avoid sending notifications too late
        const start = Date.now() + checkingInterval;
        const end = start + checkingInterval;

        const events = yield getAll();

        const mom = (0, _moment2.default)(start);

        yield _bluebird2.default.all(events.map(function (event) {
          const reminder = [0].concat((0, _toConsumableArray3.default)(event.reminders)).find(function (r) {
            const remDate = event.startDate - r;
            return remDate > start && remDate < end;
          });
          if (reminder === 0) {
            return {
              event: event,
              reminder: reminder,
              message: '[[calendar:now]]'
            };
          }
          if (reminder) {
            const message = mom.to(event.startDate);
            return { event: event, reminder: reminder, message: message };
          }
          return null;
        }).filter(Boolean).map(notify));
      });
      return function checkReminders() {
        return ref.apply(this, arguments);
      };
    })();

    const daemon = function daemon() {
      checkReminders().asCallback(function () {
        return setTimeout(daemon, checkingInterval);
      });
    };
    daemon();
  });
  return function initNotifierDaemon() {
    return ref.apply(this, arguments);
  };
})();

exports.initNotifierDaemon = initNotifierDaemon;
exports.notify = notify;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVtaW5kZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQU1BOztBQUNBOzs7Ozs7QUFQQSxNQUFNLEtBQUssUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixnQkFBckIsQ0FBWDtBQUNBLE1BQU0sZ0JBQWdCLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIscUJBQXJCLENBQXRCO0FBQ0EsTUFBTSxRQUFRLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsYUFBckIsQ0FBZDtBQUNBLE1BQU0sT0FBTyxRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLFlBQXJCLENBQWI7Ozs7QUFNQSxNQUFNLElBQUksbUJBQVEsU0FBbEI7O0FBRUEsTUFBTSxvQkFBb0IsRUFBRSxHQUFHLGlCQUFMLENBQTFCO0FBQ0EsTUFBTSxtQkFBbUIsRUFBRSxHQUFHLGdCQUFMLENBQXpCO0FBQ0EsTUFBTSxjQUFjLEVBQUUsY0FBYyxNQUFoQixDQUFwQjtBQUNBLE1BQU0sWUFBWSxFQUFFLGNBQWMsSUFBaEIsQ0FBbEI7QUFDQSxNQUFNLGVBQWUsRUFBRSxNQUFNLFlBQVIsQ0FBckI7QUFDQSxNQUFNLGFBQWEsRUFBRSxLQUFLLFFBQUwsQ0FBYyxNQUFoQixDQUFuQjs7QUFFQSxNQUFNLFVBQVUseUJBQWhCOztBQUVBLE1BQU07QUFBQSxxQ0FBUyxhQUFZO0FBQ3pCLFVBQU0sT0FBTyxNQUFNLGtCQUFrQixPQUFsQixFQUEyQixDQUEzQixFQUE4QixDQUFDLENBQS9CLENBQW5CO0FBQ0EsVUFBTSxTQUFTLE1BQU0saUJBQWlCLElBQWpCLEVBQXVCLENBQUMsS0FBRCxFQUFRLFdBQVIsRUFBcUIsV0FBckIsQ0FBdkIsQ0FBckI7O0FBRUEsV0FBTyxNQUFQO0FBQ0QsR0FMSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBT0EsTUFBTTtBQUFBLHFDQUFTLGlCQUF3QztBQUFBLFFBQS9CLEtBQStCLFFBQS9CLEtBQStCO0FBQUEsUUFBeEIsUUFBd0IsUUFBeEIsUUFBd0I7QUFBQSxRQUFkLE9BQWMsUUFBZCxPQUFjOztBQUNyRCxRQUFJLElBQUo7Ozs7QUFJQSxRQUFJLGFBQWEsQ0FBakIsRUFBb0I7QUFDbEIsWUFBTSxZQUFZLE1BQU0sdUJBQWE7QUFDbkMsYUFBSyxNQUFNLEdBRHdCO0FBRW5DLG1CQUFXLENBQUMsS0FBRCxFQUFRLE9BQVI7QUFGd0IsT0FBYixDQUF4QjtBQUlBLHdEQUFXLFVBQVUsR0FBckIsb0NBQTZCLFVBQVUsS0FBdkM7QUFDRCxLQU5ELE1BTU87QUFDTCxZQUFNLFlBQVksTUFBTSx1QkFBYTtBQUNuQyxhQUFLLE1BQU0sR0FEd0I7QUFFbkMsbUJBQVcsQ0FBQyxLQUFEO0FBRndCLE9BQWIsQ0FBeEI7QUFJQSxhQUFPLFVBQVUsR0FBakI7QUFDRDs7QUFFRCxVQUFNLFVBQVUsTUFBTSxhQUFhLE1BQU0sR0FBbkIsRUFBd0IsU0FBeEIsQ0FBdEI7QUFDQSxVQUFNLFFBQVEsTUFBTSxZQUFZO0FBQzlCLGlCQUFZLCtCQUE2QixPQUFRLE9BQUksTUFBTSxJQUFLLEtBRGxDO0FBRTlCLGdCQUFVLE9BRm9CO0FBRzlCLFdBQU0sd0JBQXNCLE1BQU0sR0FBSSxVQUFPLE1BQU0sR0FBSSxTQUh6QjtBQUk5QixXQUFLLE1BQU0sR0FKbUI7QUFLOUIsV0FBSyxNQUFNLEdBTG1CO0FBTTlCLFlBQU0sTUFBTSxHQU5rQjtBQU85QixZQUFPLFVBQVEsTUFBTSxHQUFJLEdBUEs7QUFROUIsa0JBQVk7QUFSa0IsS0FBWixDQUFwQjtBQVVBLFVBQU0sVUFBVSxLQUFWLEVBQWlCLElBQWpCLENBQU47QUFDRCxHQS9CSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBaUNBLE1BQU07QUFBQSxxQ0FBcUIsYUFBWTs7O0FBR3JDLFVBQU0sbUJBQW1CLE1BQU0sV0FBVyxpQkFBWCxFQUE4QixrQkFBOUIsQ0FBL0I7O0FBRUEsVUFBTTtBQUFBLHlDQUFpQixhQUFZOzs7QUFHakMsY0FBTSxRQUFRLEtBQUssR0FBTCxLQUFhLGdCQUEzQjtBQUNBLGNBQU0sTUFBTSxRQUFRLGdCQUFwQjs7QUFFQSxjQUFNLFNBQVMsTUFBTSxRQUFyQjs7QUFFQSxjQUFNLE1BQU0sc0JBQU8sS0FBUCxDQUFaOztBQUVBLGNBQU0sbUJBQVEsR0FBUixDQUNKLE9BQ0MsR0FERCxDQUNLLGlCQUFTO0FBQ1osZ0JBQU0sV0FBVyxDQUFDLENBQUQsMENBQU8sTUFBTSxTQUFiLEdBQXdCLElBQXhCLENBQTZCLGFBQUs7QUFDakQsa0JBQU0sVUFBVSxNQUFNLFNBQU4sR0FBa0IsQ0FBbEM7QUFDQSxtQkFBTyxVQUFVLEtBQVYsSUFBbUIsVUFBVSxHQUFwQztBQUNELFdBSGdCLENBQWpCO0FBSUEsY0FBSSxhQUFhLENBQWpCLEVBQW9CO0FBQ2xCLG1CQUFPO0FBQ0wsMEJBREs7QUFFTCxnQ0FGSztBQUdMLHVCQUFTO0FBSEosYUFBUDtBQUtEO0FBQ0QsY0FBSSxRQUFKLEVBQWM7QUFDWixrQkFBTSxVQUFVLElBQUksRUFBSixDQUFPLE1BQU0sU0FBYixDQUFoQjtBQUNBLG1CQUFPLEVBQUUsWUFBRixFQUFTLGtCQUFULEVBQW1CLGdCQUFuQixFQUFQO0FBQ0Q7QUFDRCxpQkFBTyxJQUFQO0FBQ0QsU0FsQkQsRUFtQkMsTUFuQkQsQ0FtQlEsT0FuQlIsRUFvQkMsR0FwQkQsQ0FvQkssTUFwQkwsQ0FESSxDQUFOO0FBdUJELE9BakNLO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFBTjs7QUFtQ0EsVUFBTSxTQUFTLFNBQVQsTUFBUyxHQUFNO0FBQ25CLHVCQUFpQixVQUFqQixDQUE0QjtBQUFBLGVBQU0sV0FBVyxNQUFYLEVBQW1CLGdCQUFuQixDQUFOO0FBQUEsT0FBNUI7QUFDRCxLQUZEO0FBR0E7QUFDRCxHQTVDSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O1FBOENTLGtCLEdBQUEsa0I7UUFBb0IsTSxHQUFBLE0iLCJmaWxlIjoicmVtaW5kZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGIgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvZGF0YWJhc2UnKTtcbmNvbnN0IG5vdGlmaWNhdGlvbnMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvbm90aWZpY2F0aW9ucycpO1xuY29uc3QgcG9zdHMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvcG9zdHMnKTtcbmNvbnN0IG1ldGEgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvbWV0YScpO1xuXG4vLyBpbXBvcnQgeyBmb3JrIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBnZXRBbGwgYXMgZ2V0UmVzcG9uc2VzIH0gZnJvbSAnLi9yZXNwb25zZXMnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuY29uc3QgcCA9IFByb21pc2UucHJvbWlzaWZ5O1xuXG5jb25zdCBnZXRTb3J0ZWRTZXRSYW5nZSA9IHAoZGIuZ2V0U29ydGVkU2V0UmFuZ2UpO1xuY29uc3QgZ2V0T2JqZWN0c0ZpZWxkcyA9IHAoZGIuZ2V0T2JqZWN0c0ZpZWxkcyk7XG5jb25zdCBjcmVhdGVOb3RpZiA9IHAobm90aWZpY2F0aW9ucy5jcmVhdGUpO1xuY29uc3QgcHVzaE5vdGlmID0gcChub3RpZmljYXRpb25zLnB1c2gpO1xuY29uc3QgZ2V0UG9zdEZpZWxkID0gcChwb3N0cy5nZXRQb3N0RmllbGQpO1xuY29uc3QgZ2V0U2V0dGluZyA9IHAobWV0YS5zZXR0aW5ncy5nZXRPbmUpO1xuXG5jb25zdCBsaXN0S2V5ID0gJ3BsdWdpbnM6Y2FsZW5kYXI6ZXZlbnRzJztcblxuY29uc3QgZ2V0QWxsID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBrZXlzID0gYXdhaXQgZ2V0U29ydGVkU2V0UmFuZ2UobGlzdEtleSwgMCwgLTEpO1xuICBjb25zdCBldmVudHMgPSBhd2FpdCBnZXRPYmplY3RzRmllbGRzKGtleXMsIFsncGlkJywgJ3JlbWluZGVycycsICdzdGFydERhdGUnXSk7XG5cbiAgcmV0dXJuIGV2ZW50cztcbn07XG5cbmNvbnN0IG5vdGlmeSA9IGFzeW5jICh7IGV2ZW50LCByZW1pbmRlciwgbWVzc2FnZSB9KSA9PiB7XG4gIGxldCB1aWRzO1xuICAvLyBpZiByZW1pbmRlciBpcyBmb3IgdGhlIGV2ZW50IHN0YXJ0XG4gIC8vIG5vdGlmeSAnbWF5YmUnIGFuZCAneWVzJyByZXNwb25kZXJzXG4gIC8vIG90aGVyd2lzZSwgbm90aWZ5IG9ubHkgJ3llcycgcmVzcG9uZGVyc1xuICBpZiAocmVtaW5kZXIgPT09IDApIHtcbiAgICBjb25zdCByZXNwb25zZXMgPSBhd2FpdCBnZXRSZXNwb25zZXMoe1xuICAgICAgcGlkOiBldmVudC5waWQsXG4gICAgICBzZWxlY3Rpb246IFsneWVzJywgJ21heWJlJ10sXG4gICAgfSk7XG4gICAgdWlkcyA9IFsuLi5yZXNwb25zZXMueWVzLCAuLi5yZXNwb25zZXMubWF5YmVdO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlc3BvbnNlcyA9IGF3YWl0IGdldFJlc3BvbnNlcyh7XG4gICAgICBwaWQ6IGV2ZW50LnBpZCxcbiAgICAgIHNlbGVjdGlvbjogWyd5ZXMnXSxcbiAgICB9KTtcbiAgICB1aWRzID0gcmVzcG9uc2VzLnllcztcbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBnZXRQb3N0RmllbGQoZXZlbnQucGlkLCAnY29udGVudCcpO1xuICBjb25zdCBub3RpZiA9IGF3YWl0IGNyZWF0ZU5vdGlmKHtcbiAgICBib2R5U2hvcnQ6IGBbW2NhbGVuZGFyOmV2ZW50X3N0YXJ0aW5nLCAke21lc3NhZ2V9LCAke2V2ZW50Lm5hbWV9XV1gLFxuICAgIGJvZHlMb25nOiBjb250ZW50LFxuICAgIG5pZDogYHBsdWdpbi1jYWxlbmRhcjp0aWQ6JHtldmVudC50aWR9OnBpZDoke2V2ZW50LnBpZH06ZXZlbnRgLFxuICAgIHBpZDogZXZlbnQucGlkLFxuICAgIHRpZDogZXZlbnQudGlkLFxuICAgIGZyb206IGV2ZW50LnVpZCxcbiAgICBwYXRoOiBgL3Bvc3QvJHtldmVudC5waWR9YCxcbiAgICBpbXBvcnRhbmNlOiAxLFxuICB9KTtcbiAgYXdhaXQgcHVzaE5vdGlmKG5vdGlmLCB1aWRzKTtcbn07XG5cbmNvbnN0IGluaXROb3RpZmllckRhZW1vbiA9IGFzeW5jICgpID0+IHtcbiAgLy8gbXMgYmV0d2VlbiBjaGVja2luZyBmb3IgcmVtaW5kZXJzXG4gIC8vIHB1bGxlZCBmcm9tIHNldHRpbmdzXG4gIGNvbnN0IGNoZWNraW5nSW50ZXJ2YWwgPSBhd2FpdCBnZXRTZXR0aW5nKCdwbHVnaW4tY2FsZW5kYXInLCAnY2hlY2tpbmdJbnRlcnZhbCcpO1xuXG4gIGNvbnN0IGNoZWNrUmVtaW5kZXJzID0gYXN5bmMgKCkgPT4ge1xuICAgIC8vIHRpbWVzcGFuIHdlIGNoZWNrIGlzIGEgY2hlY2tpbmdJbnRlcnZhbCBpbiB0aGUgZnV0dXJlXG4gICAgLy8gc28gYXMgdG8gYXZvaWQgc2VuZGluZyBub3RpZmljYXRpb25zIHRvbyBsYXRlXG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpICsgY2hlY2tpbmdJbnRlcnZhbDtcbiAgICBjb25zdCBlbmQgPSBzdGFydCArIGNoZWNraW5nSW50ZXJ2YWw7XG5cbiAgICBjb25zdCBldmVudHMgPSBhd2FpdCBnZXRBbGwoKTtcblxuICAgIGNvbnN0IG1vbSA9IG1vbWVudChzdGFydCk7XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGV2ZW50c1xuICAgICAgLm1hcChldmVudCA9PiB7XG4gICAgICAgIGNvbnN0IHJlbWluZGVyID0gWzAsIC4uLmV2ZW50LnJlbWluZGVyc10uZmluZChyID0+IHtcbiAgICAgICAgICBjb25zdCByZW1EYXRlID0gZXZlbnQuc3RhcnREYXRlIC0gcjtcbiAgICAgICAgICByZXR1cm4gcmVtRGF0ZSA+IHN0YXJ0ICYmIHJlbURhdGUgPCBlbmQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVtaW5kZXIgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICByZW1pbmRlcixcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdbW2NhbGVuZGFyOm5vd11dJyxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW1pbmRlcikge1xuICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBtb20udG8oZXZlbnQuc3RhcnREYXRlKTtcbiAgICAgICAgICByZXR1cm4geyBldmVudCwgcmVtaW5kZXIsIG1lc3NhZ2UgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAubWFwKG5vdGlmeSlcbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IGRhZW1vbiA9ICgpID0+IHtcbiAgICBjaGVja1JlbWluZGVycygpLmFzQ2FsbGJhY2soKCkgPT4gc2V0VGltZW91dChkYWVtb24sIGNoZWNraW5nSW50ZXJ2YWwpKTtcbiAgfTtcbiAgZGFlbW9uKCk7XG59O1xuXG5leHBvcnQgeyBpbml0Tm90aWZpZXJEYWVtb24sIG5vdGlmeSB9O1xuIl19