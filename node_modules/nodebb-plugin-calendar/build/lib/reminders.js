'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notify = exports.initNotifierDaemon = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _responses = require('./responses');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

const db = require.main.require('./src/database');
const notifications = require.main.require('./src/notifications');
const posts = require.main.require('./src/posts');
const meta = require.main.require('./src/meta');

// import { fork } from 'child_process';

const p = _bluebird2.default.promisify;

const getSortedSetRange = p(db.getSortedSetRange);
const getObjectsFields = p(db.getObjectsFields);
const createNotif = p(notifications.create);
const pushNotif = p(notifications.push);
const getPostField = p(posts.getPostField);
const getSetting = p(meta.settings.getOne);

const listKey = 'plugins:calendar:events';

const getAll = (() => {
  var ref = (0, _bluebird.coroutine)(function* () {
    const keys = yield getSortedSetRange(listKey, 0, -1);
    const events = yield getObjectsFields(keys, ['pid', 'reminders', 'startDate']);

    return events;
  });
  return function getAll() {
    return ref.apply(this, arguments);
  };
})();

const notify = (() => {
  var ref = (0, _bluebird.coroutine)(function* (_ref) {
    let event = _ref.event;
    let reminder = _ref.reminder;
    let message = _ref.message;

    let uids;
    // if reminder is for the event start
    // notify 'maybe' and 'yes' responders
    // otherwise, notify only 'yes' responders
    if (reminder === 0) {
      const responses = yield (0, _responses.getAll)({
        pid: event.pid,
        selection: ['yes', 'maybe']
      });
      uids = [].concat(_toConsumableArray(responses.yes), _toConsumableArray(responses.maybe));
    } else {
      const responses = yield (0, _responses.getAll)({
        pid: event.pid,
        selection: ['yes']
      });
      uids = responses.yes;
    }

    const content = yield getPostField(event.pid, 'content');
    const notif = yield createNotif({
      bodyShort: `[[calendar:event_starting, ${ message }, ${ event.name }]]`,
      bodyLong: content,
      nid: `plugin-calendar:tid:${ event.tid }:pid:${ event.pid }:event`,
      pid: event.pid,
      tid: event.tid,
      from: event.uid,
      path: `/post/${ event.pid }`,
      importance: 1
    });
    yield pushNotif(notif, uids);
  });
  return function notify(_x) {
    return ref.apply(this, arguments);
  };
})();

const initNotifierDaemon = (() => {
  var ref = (0, _bluebird.coroutine)(function* () {
    // ms between checking for reminders
    // pulled from settings
    const checkingInterval = yield getSetting('plugin-calendar', 'checkingInterval');

    const checkReminders = (() => {
      var ref = (0, _bluebird.coroutine)(function* () {
        // timespan we check is a checkingInterval in the future
        // so as to avoid sending notifications too late
        const start = Date.now() + checkingInterval;
        const end = start + checkingInterval;

        const events = yield getAll();

        const mom = (0, _moment2.default)(start);

        yield _bluebird2.default.all(events.map(function (event) {
          const reminder = [0].concat(_toConsumableArray(event.reminders)).find(function (r) {
            const remDate = event.startDate - r;
            return remDate > start && remDate < end;
          });
          if (reminder === 0) {
            return {
              event: event,
              reminder: reminder,
              message: '[[calendar:now]]'
            };
          }
          if (reminder) {
            const message = mom.to(event.startDate);
            return { event: event, reminder: reminder, message: message };
          }
          return null;
        }).filter(Boolean).map(notify));
      });
      return function checkReminders() {
        return ref.apply(this, arguments);
      };
    })();

    const daemon = function daemon() {
      checkReminders().asCallback(function () {
        return setTimeout(daemon, checkingInterval);
      });
    };
    daemon();
  });
  return function initNotifierDaemon() {
    return ref.apply(this, arguments);
  };
})();

exports.initNotifierDaemon = initNotifierDaemon;
exports.notify = notify;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVtaW5kZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBTUE7O0FBQ0E7Ozs7Ozs7O0FBUEEsTUFBTSxLQUFLLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsZ0JBQXJCLENBQVg7QUFDQSxNQUFNLGdCQUFnQixRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLHFCQUFyQixDQUF0QjtBQUNBLE1BQU0sUUFBUSxRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLGFBQXJCLENBQWQ7QUFDQSxNQUFNLE9BQU8sUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixZQUFyQixDQUFiOzs7O0FBTUEsTUFBTSxJQUFJLG1CQUFRLFNBQWxCOztBQUVBLE1BQU0sb0JBQW9CLEVBQUUsR0FBRyxpQkFBTCxDQUExQjtBQUNBLE1BQU0sbUJBQW1CLEVBQUUsR0FBRyxnQkFBTCxDQUF6QjtBQUNBLE1BQU0sY0FBYyxFQUFFLGNBQWMsTUFBaEIsQ0FBcEI7QUFDQSxNQUFNLFlBQVksRUFBRSxjQUFjLElBQWhCLENBQWxCO0FBQ0EsTUFBTSxlQUFlLEVBQUUsTUFBTSxZQUFSLENBQXJCO0FBQ0EsTUFBTSxhQUFhLEVBQUUsS0FBSyxRQUFMLENBQWMsTUFBaEIsQ0FBbkI7O0FBRUEsTUFBTSxVQUFVLHlCQUFoQjs7QUFFQSxNQUFNO0FBQUEscUNBQVMsYUFBWTtBQUN6QixVQUFNLE9BQU8sTUFBTSxrQkFBa0IsT0FBbEIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBQyxDQUEvQixDQUFuQjtBQUNBLFVBQU0sU0FBUyxNQUFNLGlCQUFpQixJQUFqQixFQUF1QixDQUFDLEtBQUQsRUFBUSxXQUFSLEVBQXFCLFdBQXJCLENBQXZCLENBQXJCOztBQUVBLFdBQU8sTUFBUDtBQUNELEdBTEs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztBQU9BLE1BQU07QUFBQSxxQ0FBUyxpQkFBd0M7QUFBQSxRQUEvQixLQUErQixRQUEvQixLQUErQjtBQUFBLFFBQXhCLFFBQXdCLFFBQXhCLFFBQXdCO0FBQUEsUUFBZCxPQUFjLFFBQWQsT0FBYzs7QUFDckQsUUFBSSxJQUFKOzs7O0FBSUEsUUFBSSxhQUFhLENBQWpCLEVBQW9CO0FBQ2xCLFlBQU0sWUFBWSxNQUFNLHVCQUFhO0FBQ25DLGFBQUssTUFBTSxHQUR3QjtBQUVuQyxtQkFBVyxDQUFDLEtBQUQsRUFBUSxPQUFSO0FBRndCLE9BQWIsQ0FBeEI7QUFJQSwwQ0FBVyxVQUFVLEdBQXJCLHNCQUE2QixVQUFVLEtBQXZDO0FBQ0QsS0FORCxNQU1PO0FBQ0wsWUFBTSxZQUFZLE1BQU0sdUJBQWE7QUFDbkMsYUFBSyxNQUFNLEdBRHdCO0FBRW5DLG1CQUFXLENBQUMsS0FBRDtBQUZ3QixPQUFiLENBQXhCO0FBSUEsYUFBTyxVQUFVLEdBQWpCO0FBQ0Q7O0FBRUQsVUFBTSxVQUFVLE1BQU0sYUFBYSxNQUFNLEdBQW5CLEVBQXdCLFNBQXhCLENBQXRCO0FBQ0EsVUFBTSxRQUFRLE1BQU0sWUFBWTtBQUM5QixpQkFBWSwrQkFBNkIsT0FBUSxPQUFJLE1BQU0sSUFBSyxLQURsQztBQUU5QixnQkFBVSxPQUZvQjtBQUc5QixXQUFNLHdCQUFzQixNQUFNLEdBQUksVUFBTyxNQUFNLEdBQUksU0FIekI7QUFJOUIsV0FBSyxNQUFNLEdBSm1CO0FBSzlCLFdBQUssTUFBTSxHQUxtQjtBQU05QixZQUFNLE1BQU0sR0FOa0I7QUFPOUIsWUFBTyxVQUFRLE1BQU0sR0FBSSxHQVBLO0FBUTlCLGtCQUFZO0FBUmtCLEtBQVosQ0FBcEI7QUFVQSxVQUFNLFVBQVUsS0FBVixFQUFpQixJQUFqQixDQUFOO0FBQ0QsR0EvQks7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztBQWlDQSxNQUFNO0FBQUEscUNBQXFCLGFBQVk7OztBQUdyQyxVQUFNLG1CQUFtQixNQUFNLFdBQVcsaUJBQVgsRUFBOEIsa0JBQTlCLENBQS9COztBQUVBLFVBQU07QUFBQSx5Q0FBaUIsYUFBWTs7O0FBR2pDLGNBQU0sUUFBUSxLQUFLLEdBQUwsS0FBYSxnQkFBM0I7QUFDQSxjQUFNLE1BQU0sUUFBUSxnQkFBcEI7O0FBRUEsY0FBTSxTQUFTLE1BQU0sUUFBckI7O0FBRUEsY0FBTSxNQUFNLHNCQUFPLEtBQVAsQ0FBWjs7QUFFQSxjQUFNLG1CQUFRLEdBQVIsQ0FDSixPQUNDLEdBREQsQ0FDSyxpQkFBUztBQUNaLGdCQUFNLFdBQVcsQ0FBQyxDQUFELDRCQUFPLE1BQU0sU0FBYixHQUF3QixJQUF4QixDQUE2QixhQUFLO0FBQ2pELGtCQUFNLFVBQVUsTUFBTSxTQUFOLEdBQWtCLENBQWxDO0FBQ0EsbUJBQU8sVUFBVSxLQUFWLElBQW1CLFVBQVUsR0FBcEM7QUFDRCxXQUhnQixDQUFqQjtBQUlBLGNBQUksYUFBYSxDQUFqQixFQUFvQjtBQUNsQixtQkFBTztBQUNMLDBCQURLO0FBRUwsZ0NBRks7QUFHTCx1QkFBUztBQUhKLGFBQVA7QUFLRDtBQUNELGNBQUksUUFBSixFQUFjO0FBQ1osa0JBQU0sVUFBVSxJQUFJLEVBQUosQ0FBTyxNQUFNLFNBQWIsQ0FBaEI7QUFDQSxtQkFBTyxFQUFFLFlBQUYsRUFBUyxrQkFBVCxFQUFtQixnQkFBbkIsRUFBUDtBQUNEO0FBQ0QsaUJBQU8sSUFBUDtBQUNELFNBbEJELEVBbUJDLE1BbkJELENBbUJRLE9BbkJSLEVBb0JDLEdBcEJELENBb0JLLE1BcEJMLENBREksQ0FBTjtBQXVCRCxPQWpDSztBQUFBO0FBQUE7QUFBQTtBQUFBLFFBQU47O0FBbUNBLFVBQU0sU0FBUyxTQUFULE1BQVMsR0FBTTtBQUNuQix1QkFBaUIsVUFBakIsQ0FBNEI7QUFBQSxlQUFNLFdBQVcsTUFBWCxFQUFtQixnQkFBbkIsQ0FBTjtBQUFBLE9BQTVCO0FBQ0QsS0FGRDtBQUdBO0FBQ0QsR0E1Q0s7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztRQThDUyxrQixHQUFBLGtCO1FBQW9CLE0sR0FBQSxNIiwiZmlsZSI6InJlbWluZGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRiID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL2RhdGFiYXNlJyk7XG5jb25zdCBub3RpZmljYXRpb25zID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL25vdGlmaWNhdGlvbnMnKTtcbmNvbnN0IHBvc3RzID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3Bvc3RzJyk7XG5jb25zdCBtZXRhID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL21ldGEnKTtcblxuLy8gaW1wb3J0IHsgZm9yayB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZ2V0QWxsIGFzIGdldFJlc3BvbnNlcyB9IGZyb20gJy4vcmVzcG9uc2VzJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcbmNvbnN0IHAgPSBQcm9taXNlLnByb21pc2lmeTtcblxuY29uc3QgZ2V0U29ydGVkU2V0UmFuZ2UgPSBwKGRiLmdldFNvcnRlZFNldFJhbmdlKTtcbmNvbnN0IGdldE9iamVjdHNGaWVsZHMgPSBwKGRiLmdldE9iamVjdHNGaWVsZHMpO1xuY29uc3QgY3JlYXRlTm90aWYgPSBwKG5vdGlmaWNhdGlvbnMuY3JlYXRlKTtcbmNvbnN0IHB1c2hOb3RpZiA9IHAobm90aWZpY2F0aW9ucy5wdXNoKTtcbmNvbnN0IGdldFBvc3RGaWVsZCA9IHAocG9zdHMuZ2V0UG9zdEZpZWxkKTtcbmNvbnN0IGdldFNldHRpbmcgPSBwKG1ldGEuc2V0dGluZ3MuZ2V0T25lKTtcblxuY29uc3QgbGlzdEtleSA9ICdwbHVnaW5zOmNhbGVuZGFyOmV2ZW50cyc7XG5cbmNvbnN0IGdldEFsbCA9IGFzeW5jICgpID0+IHtcbiAgY29uc3Qga2V5cyA9IGF3YWl0IGdldFNvcnRlZFNldFJhbmdlKGxpc3RLZXksIDAsIC0xKTtcbiAgY29uc3QgZXZlbnRzID0gYXdhaXQgZ2V0T2JqZWN0c0ZpZWxkcyhrZXlzLCBbJ3BpZCcsICdyZW1pbmRlcnMnLCAnc3RhcnREYXRlJ10pO1xuXG4gIHJldHVybiBldmVudHM7XG59O1xuXG5jb25zdCBub3RpZnkgPSBhc3luYyAoeyBldmVudCwgcmVtaW5kZXIsIG1lc3NhZ2UgfSkgPT4ge1xuICBsZXQgdWlkcztcbiAgLy8gaWYgcmVtaW5kZXIgaXMgZm9yIHRoZSBldmVudCBzdGFydFxuICAvLyBub3RpZnkgJ21heWJlJyBhbmQgJ3llcycgcmVzcG9uZGVyc1xuICAvLyBvdGhlcndpc2UsIG5vdGlmeSBvbmx5ICd5ZXMnIHJlc3BvbmRlcnNcbiAgaWYgKHJlbWluZGVyID09PSAwKSB7XG4gICAgY29uc3QgcmVzcG9uc2VzID0gYXdhaXQgZ2V0UmVzcG9uc2VzKHtcbiAgICAgIHBpZDogZXZlbnQucGlkLFxuICAgICAgc2VsZWN0aW9uOiBbJ3llcycsICdtYXliZSddLFxuICAgIH0pO1xuICAgIHVpZHMgPSBbLi4ucmVzcG9uc2VzLnllcywgLi4ucmVzcG9uc2VzLm1heWJlXTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCByZXNwb25zZXMgPSBhd2FpdCBnZXRSZXNwb25zZXMoe1xuICAgICAgcGlkOiBldmVudC5waWQsXG4gICAgICBzZWxlY3Rpb246IFsneWVzJ10sXG4gICAgfSk7XG4gICAgdWlkcyA9IHJlc3BvbnNlcy55ZXM7XG4gIH1cblxuICBjb25zdCBjb250ZW50ID0gYXdhaXQgZ2V0UG9zdEZpZWxkKGV2ZW50LnBpZCwgJ2NvbnRlbnQnKTtcbiAgY29uc3Qgbm90aWYgPSBhd2FpdCBjcmVhdGVOb3RpZih7XG4gICAgYm9keVNob3J0OiBgW1tjYWxlbmRhcjpldmVudF9zdGFydGluZywgJHttZXNzYWdlfSwgJHtldmVudC5uYW1lfV1dYCxcbiAgICBib2R5TG9uZzogY29udGVudCxcbiAgICBuaWQ6IGBwbHVnaW4tY2FsZW5kYXI6dGlkOiR7ZXZlbnQudGlkfTpwaWQ6JHtldmVudC5waWR9OmV2ZW50YCxcbiAgICBwaWQ6IGV2ZW50LnBpZCxcbiAgICB0aWQ6IGV2ZW50LnRpZCxcbiAgICBmcm9tOiBldmVudC51aWQsXG4gICAgcGF0aDogYC9wb3N0LyR7ZXZlbnQucGlkfWAsXG4gICAgaW1wb3J0YW5jZTogMSxcbiAgfSk7XG4gIGF3YWl0IHB1c2hOb3RpZihub3RpZiwgdWlkcyk7XG59O1xuXG5jb25zdCBpbml0Tm90aWZpZXJEYWVtb24gPSBhc3luYyAoKSA9PiB7XG4gIC8vIG1zIGJldHdlZW4gY2hlY2tpbmcgZm9yIHJlbWluZGVyc1xuICAvLyBwdWxsZWQgZnJvbSBzZXR0aW5nc1xuICBjb25zdCBjaGVja2luZ0ludGVydmFsID0gYXdhaXQgZ2V0U2V0dGluZygncGx1Z2luLWNhbGVuZGFyJywgJ2NoZWNraW5nSW50ZXJ2YWwnKTtcblxuICBjb25zdCBjaGVja1JlbWluZGVycyA9IGFzeW5jICgpID0+IHtcbiAgICAvLyB0aW1lc3BhbiB3ZSBjaGVjayBpcyBhIGNoZWNraW5nSW50ZXJ2YWwgaW4gdGhlIGZ1dHVyZVxuICAgIC8vIHNvIGFzIHRvIGF2b2lkIHNlbmRpbmcgbm90aWZpY2F0aW9ucyB0b28gbGF0ZVxuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKSArIGNoZWNraW5nSW50ZXJ2YWw7XG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBjaGVja2luZ0ludGVydmFsO1xuXG4gICAgY29uc3QgZXZlbnRzID0gYXdhaXQgZ2V0QWxsKCk7XG5cbiAgICBjb25zdCBtb20gPSBtb21lbnQoc3RhcnQpO1xuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBldmVudHNcbiAgICAgIC5tYXAoZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCByZW1pbmRlciA9IFswLCAuLi5ldmVudC5yZW1pbmRlcnNdLmZpbmQociA9PiB7XG4gICAgICAgICAgY29uc3QgcmVtRGF0ZSA9IGV2ZW50LnN0YXJ0RGF0ZSAtIHI7XG4gICAgICAgICAgcmV0dXJuIHJlbURhdGUgPiBzdGFydCAmJiByZW1EYXRlIDwgZW5kO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlbWluZGVyID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgcmVtaW5kZXIsXG4gICAgICAgICAgICBtZXNzYWdlOiAnW1tjYWxlbmRhcjpub3ddXScsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVtaW5kZXIpIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gbW9tLnRvKGV2ZW50LnN0YXJ0RGF0ZSk7XG4gICAgICAgICAgcmV0dXJuIHsgZXZlbnQsIHJlbWluZGVyLCBtZXNzYWdlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLm1hcChub3RpZnkpXG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBkYWVtb24gPSAoKSA9PiB7XG4gICAgY2hlY2tSZW1pbmRlcnMoKS5hc0NhbGxiYWNrKCgpID0+IHNldFRpbWVvdXQoZGFlbW9uLCBjaGVja2luZ0ludGVydmFsKSk7XG4gIH07XG4gIGRhZW1vbigpO1xufTtcblxuZXhwb3J0IHsgaW5pdE5vdGlmaWVyRGFlbW9uLCBub3RpZnkgfTtcbiJdfQ==