'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseRaw = exports.parseRawCallback = exports.parsePost = exports.parsePostCallback = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _validator = require('validator');

var _validator2 = _interopRequireDefault(_validator);

var _template = require('./template');

var _template2 = _interopRequireDefault(_template);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const p = _bluebird2.default.promisify;

const translator = require.main.require('./public/src/modules/translator');
const meta = require.main.require('./src/meta');
// const cls = require.main.require('./src/middleware/cls');
// const getLang = () => getUserSettings(cls.get('request').uid).then(x => x.userLang);
const getLang = () => _bluebird2.default.resolve(meta.config.defaultLang || 'en_GB');

const user = require.main.require('./src/user');
const getUserSettings = p(user.getSettings);
const translate = p((text, language, callback) => {
  translator.translate(text, language, content => callback(null, content));
  // callback(null, text);
});

const eventRX = new RegExp((0, _parse.tagTemplate)('event', '[\\w\\W]*'));
const invalidRX = new RegExp(`(${ (0, _parse.tagTemplate)('event-invalid', '[\\w\\W]*') })`);

const parseRaw = (() => {
  var ref = (0, _bluebird.coroutine)(function* (content, userLang) {
    const event = (0, _parse2.default)(content);
    if (!event) {
      return content.replace(invalidRX, '<span class="hide">$1</span>');
    }
    event.name = _validator2.default.escape(event.name);
    const lang = yield userLang;

    const eventText = yield translate((0, _template2.default)(event, lang.split(/[_@]/)[0]), lang);
    const text = content.replace(eventRX, eventText);
    return text;
  });
  return function parseRaw(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

const parsePost = (() => {
  var ref = (0, _bluebird.coroutine)(function* ({ postData }) {
    const content = yield parseRaw(postData.content, getUserSettings(postData.uid).then(function (x) {
      return x.userLang;
    }));
    return {
      postData: _extends({}, postData, {
        content
      })
    };
  });
  return function parsePost(_x3) {
    return ref.apply(this, arguments);
  };
})();

const parsePostCallback = (postData, cb) => parsePost(postData).asCallback(cb);
const parseRawCallback = (content, cb) => parseRaw(content, getLang()).asCallback(cb);

exports.parsePostCallback = parsePostCallback;
exports.parsePost = parsePost;
exports.parseRawCallback = parseRawCallback;
exports.parseRaw = parseRaw;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGFyc2VGaWx0ZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU0sSUFBSSxtQkFBUSxTQUFsQjs7QUFFQSxNQUFNLGFBQWEsUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixpQ0FBckIsQ0FBbkI7QUFDQSxNQUFNLE9BQU8sUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixZQUFyQixDQUFiOzs7QUFHQSxNQUFNLFVBQVUsTUFBTSxtQkFBUSxPQUFSLENBQWdCLEtBQUssTUFBTCxDQUFZLFdBQVosSUFBMkIsT0FBM0MsQ0FBdEI7O0FBRUEsTUFBTSxPQUFPLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsWUFBckIsQ0FBYjtBQUNBLE1BQU0sa0JBQWtCLEVBQUUsS0FBSyxXQUFQLENBQXhCO0FBQ0EsTUFBTSxZQUFZLEVBQUUsQ0FBQyxJQUFELEVBQU8sUUFBUCxFQUFpQixRQUFqQixLQUE4QjtBQUNoRCxhQUFXLFNBQVgsQ0FBcUIsSUFBckIsRUFBMkIsUUFBM0IsRUFBcUMsV0FBVyxTQUFTLElBQVQsRUFBZSxPQUFmLENBQWhEOztBQUVELENBSGlCLENBQWxCOztBQUtBLE1BQU0sVUFBVSxJQUFJLE1BQUosQ0FBVyx3QkFBWSxPQUFaLEVBQXFCLFdBQXJCLENBQVgsQ0FBaEI7QUFDQSxNQUFNLFlBQVksSUFBSSxNQUFKLENBQ2YsS0FBRyx3QkFBWSxlQUFaLEVBQTZCLFdBQTdCLENBQTBDLElBRDlCLENBQWxCOztBQUlBLE1BQU07QUFBQSxxQ0FBVyxXQUFPLE9BQVAsRUFBZ0IsUUFBaEIsRUFBNkI7QUFDNUMsVUFBTSxRQUFRLHFCQUFNLE9BQU4sQ0FBZDtBQUNBLFFBQUksQ0FBQyxLQUFMLEVBQVk7QUFDVixhQUFPLFFBQVEsT0FBUixDQUFnQixTQUFoQixFQUEyQiw4QkFBM0IsQ0FBUDtBQUNEO0FBQ0QsVUFBTSxJQUFOLEdBQWEsb0JBQVUsTUFBVixDQUFpQixNQUFNLElBQXZCLENBQWI7QUFDQSxVQUFNLE9BQU8sTUFBTSxRQUFuQjs7QUFFQSxVQUFNLFlBQVksTUFBTSxVQUN0Qix3QkFBYSxLQUFiLEVBQW9CLEtBQUssS0FBTCxDQUFXLE1BQVgsRUFBbUIsQ0FBbkIsQ0FBcEIsQ0FEc0IsRUFFdEIsSUFGc0IsQ0FBeEI7QUFJQSxVQUFNLE9BQU8sUUFBUSxPQUFSLENBQ1gsT0FEVyxFQUVYLFNBRlcsQ0FBYjtBQUlBLFdBQU8sSUFBUDtBQUNELEdBakJLO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUFtQkEsTUFBTTtBQUFBLHFDQUFZLFdBQU8sRUFBRSxRQUFGLEVBQVAsRUFBd0I7QUFDeEMsVUFBTSxVQUFVLE1BQU0sU0FBUyxTQUFTLE9BQWxCLEVBQ3BCLGdCQUFnQixTQUFTLEdBQXpCLEVBQThCLElBQTlCLENBQW1DO0FBQUEsYUFBSyxFQUFFLFFBQVA7QUFBQSxLQUFuQyxDQURvQixDQUF0QjtBQUVBLFdBQU87QUFDTCw2QkFDSyxRQURMO0FBRUU7QUFGRjtBQURLLEtBQVA7QUFNRCxHQVRLO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUFXQSxNQUFNLG9CQUFvQixDQUFDLFFBQUQsRUFBVyxFQUFYLEtBQWtCLFVBQVUsUUFBVixFQUFvQixVQUFwQixDQUErQixFQUEvQixDQUE1QztBQUNBLE1BQU0sbUJBQW1CLENBQUMsT0FBRCxFQUFVLEVBQVYsS0FBaUIsU0FBUyxPQUFULEVBQWtCLFNBQWxCLEVBQTZCLFVBQTdCLENBQXdDLEVBQXhDLENBQTFDOztRQUVTLGlCLEdBQUEsaUI7UUFBbUIsUyxHQUFBLFM7UUFBVyxnQixHQUFBLGdCO1FBQWtCLFEsR0FBQSxRIiwiZmlsZSI6InBhcnNlRmlsdGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0b3IgZnJvbSAndmFsaWRhdG9yJztcclxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xyXG5pbXBvcnQgcG9zdFRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUnO1xyXG5pbXBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlLCB0YWdUZW1wbGF0ZSB9IGZyb20gJy4vcGFyc2UnO1xyXG5cclxuY29uc3QgcCA9IFByb21pc2UucHJvbWlzaWZ5O1xyXG5cclxuY29uc3QgdHJhbnNsYXRvciA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3B1YmxpYy9zcmMvbW9kdWxlcy90cmFuc2xhdG9yJyk7XHJcbmNvbnN0IG1ldGEgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvbWV0YScpO1xyXG4vLyBjb25zdCBjbHMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvbWlkZGxld2FyZS9jbHMnKTtcclxuLy8gY29uc3QgZ2V0TGFuZyA9ICgpID0+IGdldFVzZXJTZXR0aW5ncyhjbHMuZ2V0KCdyZXF1ZXN0JykudWlkKS50aGVuKHggPT4geC51c2VyTGFuZyk7XHJcbmNvbnN0IGdldExhbmcgPSAoKSA9PiBQcm9taXNlLnJlc29sdmUobWV0YS5jb25maWcuZGVmYXVsdExhbmcgfHwgJ2VuX0dCJyk7XHJcblxyXG5jb25zdCB1c2VyID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3VzZXInKTtcclxuY29uc3QgZ2V0VXNlclNldHRpbmdzID0gcCh1c2VyLmdldFNldHRpbmdzKTtcclxuY29uc3QgdHJhbnNsYXRlID0gcCgodGV4dCwgbGFuZ3VhZ2UsIGNhbGxiYWNrKSA9PiB7XHJcbiAgdHJhbnNsYXRvci50cmFuc2xhdGUodGV4dCwgbGFuZ3VhZ2UsIGNvbnRlbnQgPT4gY2FsbGJhY2sobnVsbCwgY29udGVudCkpO1xyXG4gIC8vIGNhbGxiYWNrKG51bGwsIHRleHQpO1xyXG59KTtcclxuXHJcbmNvbnN0IGV2ZW50UlggPSBuZXcgUmVnRXhwKHRhZ1RlbXBsYXRlKCdldmVudCcsICdbXFxcXHdcXFxcV10qJykpO1xyXG5jb25zdCBpbnZhbGlkUlggPSBuZXcgUmVnRXhwKFxyXG4gIGAoJHt0YWdUZW1wbGF0ZSgnZXZlbnQtaW52YWxpZCcsICdbXFxcXHdcXFxcV10qJyl9KWBcclxuKTtcclxuXHJcbmNvbnN0IHBhcnNlUmF3ID0gYXN5bmMgKGNvbnRlbnQsIHVzZXJMYW5nKSA9PiB7XHJcbiAgY29uc3QgZXZlbnQgPSBwYXJzZShjb250ZW50KTtcclxuICBpZiAoIWV2ZW50KSB7XHJcbiAgICByZXR1cm4gY29udGVudC5yZXBsYWNlKGludmFsaWRSWCwgJzxzcGFuIGNsYXNzPVwiaGlkZVwiPiQxPC9zcGFuPicpO1xyXG4gIH1cclxuICBldmVudC5uYW1lID0gdmFsaWRhdG9yLmVzY2FwZShldmVudC5uYW1lKTtcclxuICBjb25zdCBsYW5nID0gYXdhaXQgdXNlckxhbmc7XHJcblxyXG4gIGNvbnN0IGV2ZW50VGV4dCA9IGF3YWl0IHRyYW5zbGF0ZShcclxuICAgIHBvc3RUZW1wbGF0ZShldmVudCwgbGFuZy5zcGxpdCgvW19AXS8pWzBdKSxcclxuICAgIGxhbmdcclxuICApO1xyXG4gIGNvbnN0IHRleHQgPSBjb250ZW50LnJlcGxhY2UoXHJcbiAgICBldmVudFJYLFxyXG4gICAgZXZlbnRUZXh0XHJcbiAgKTtcclxuICByZXR1cm4gdGV4dDtcclxufTtcclxuXHJcbmNvbnN0IHBhcnNlUG9zdCA9IGFzeW5jICh7IHBvc3REYXRhIH0pID0+IHtcclxuICBjb25zdCBjb250ZW50ID0gYXdhaXQgcGFyc2VSYXcocG9zdERhdGEuY29udGVudCxcclxuICAgIGdldFVzZXJTZXR0aW5ncyhwb3N0RGF0YS51aWQpLnRoZW4oeCA9PiB4LnVzZXJMYW5nKSk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHBvc3REYXRhOiB7XHJcbiAgICAgIC4uLnBvc3REYXRhLFxyXG4gICAgICBjb250ZW50LFxyXG4gICAgfSxcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgcGFyc2VQb3N0Q2FsbGJhY2sgPSAocG9zdERhdGEsIGNiKSA9PiBwYXJzZVBvc3QocG9zdERhdGEpLmFzQ2FsbGJhY2soY2IpO1xyXG5jb25zdCBwYXJzZVJhd0NhbGxiYWNrID0gKGNvbnRlbnQsIGNiKSA9PiBwYXJzZVJhdyhjb250ZW50LCBnZXRMYW5nKCkpLmFzQ2FsbGJhY2soY2IpO1xyXG5cclxuZXhwb3J0IHsgcGFyc2VQb3N0Q2FsbGJhY2ssIHBhcnNlUG9zdCwgcGFyc2VSYXdDYWxsYmFjaywgcGFyc2VSYXcgfTtcclxuIl19