'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseRaw = exports.parseRawCallback = exports.parsePost = exports.parsePostCallback = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _validator = require('validator');

var _validator2 = _interopRequireDefault(_validator);

var _template = require('./template');

var _template2 = _interopRequireDefault(_template);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const p = _bluebird2.default.promisify;

const translator = require.main.require('./public/src/modules/translator');
const meta = require.main.require('./src/meta');
// const cls = require.main.require('./src/middleware/cls');
// const getLang = () => getUserSettings(cls.get('request').uid).then(x => x.userLang);
const getLang = () => _bluebird2.default.resolve(meta.config.defaultLang || 'en_GB');

const user = require.main.require('./src/user');
const getUserSettings = p(user.getSettings);
const translate = p((text, language, callback) => {
  translator.translate(text, language, content => callback(null, content));
  // callback(null, text);
});

const eventRX = new RegExp((0, _parse.tagTemplate)('event', '[\\w\\W]*'));
const invalidRX = new RegExp(`(${ (0, _parse.tagTemplate)('event-invalid', '[\\w\\W]*') })`);

const parseRaw = (() => {
  var ref = (0, _bluebird.coroutine)(function* (content, userLang) {
    const event = (0, _parse2.default)(content);
    if (!event) {
      return content.replace(invalidRX, '<span class="hide">$1</span>');
    }
    event.name = _validator2.default.escape(event.name);
    const lang = yield userLang;

    const eventText = yield translate((0, _template2.default)(event, lang.split(/[_@]/)[0]), lang);
    const text = content.replace(eventRX, eventText);
    return text;
  });
  return function parseRaw(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

const parsePost = (() => {
  var ref = (0, _bluebird.coroutine)(function* (data) {
    const postData = data.postData;
    const content = yield parseRaw(postData.content, getUserSettings(postData.uid).then(function (x) {
      return x.userLang;
    }));
    postData.content = content;

    return data;
  });
  return function parsePost(_x3) {
    return ref.apply(this, arguments);
  };
})();

const parsePostCallback = (postData, cb) => parsePost(postData).asCallback(cb);
const parseRawCallback = (content, cb) => parseRaw(content, getLang()).asCallback(cb);

exports.parsePostCallback = parsePostCallback;
exports.parsePost = parsePost;
exports.parseRawCallback = parseRawCallback;
exports.parseRaw = parseRaw;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGFyc2VGaWx0ZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNLElBQUksbUJBQVEsU0FBbEI7O0FBRUEsTUFBTSxhQUFhLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsaUNBQXJCLENBQW5CO0FBQ0EsTUFBTSxPQUFPLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsWUFBckIsQ0FBYjs7O0FBR0EsTUFBTSxVQUFVLE1BQU0sbUJBQVEsT0FBUixDQUFnQixLQUFLLE1BQUwsQ0FBWSxXQUFaLElBQTJCLE9BQTNDLENBQXRCOztBQUVBLE1BQU0sT0FBTyxRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLFlBQXJCLENBQWI7QUFDQSxNQUFNLGtCQUFrQixFQUFFLEtBQUssV0FBUCxDQUF4QjtBQUNBLE1BQU0sWUFBWSxFQUFFLENBQUMsSUFBRCxFQUFPLFFBQVAsRUFBaUIsUUFBakIsS0FBOEI7QUFDaEQsYUFBVyxTQUFYLENBQXFCLElBQXJCLEVBQTJCLFFBQTNCLEVBQXFDLFdBQVcsU0FBUyxJQUFULEVBQWUsT0FBZixDQUFoRDs7QUFFRCxDQUhpQixDQUFsQjs7QUFLQSxNQUFNLFVBQVUsSUFBSSxNQUFKLENBQVcsd0JBQVksT0FBWixFQUFxQixXQUFyQixDQUFYLENBQWhCO0FBQ0EsTUFBTSxZQUFZLElBQUksTUFBSixDQUNmLEtBQUcsd0JBQVksZUFBWixFQUE2QixXQUE3QixDQUEwQyxJQUQ5QixDQUFsQjs7QUFJQSxNQUFNO0FBQUEscUNBQVcsV0FBTyxPQUFQLEVBQWdCLFFBQWhCLEVBQTZCO0FBQzVDLFVBQU0sUUFBUSxxQkFBTSxPQUFOLENBQWQ7QUFDQSxRQUFJLENBQUMsS0FBTCxFQUFZO0FBQ1YsYUFBTyxRQUFRLE9BQVIsQ0FBZ0IsU0FBaEIsRUFBMkIsOEJBQTNCLENBQVA7QUFDRDtBQUNELFVBQU0sSUFBTixHQUFhLG9CQUFVLE1BQVYsQ0FBaUIsTUFBTSxJQUF2QixDQUFiO0FBQ0EsVUFBTSxPQUFPLE1BQU0sUUFBbkI7O0FBRUEsVUFBTSxZQUFZLE1BQU0sVUFDdEIsd0JBQWEsS0FBYixFQUFvQixLQUFLLEtBQUwsQ0FBVyxNQUFYLEVBQW1CLENBQW5CLENBQXBCLENBRHNCLEVBRXRCLElBRnNCLENBQXhCO0FBSUEsVUFBTSxPQUFPLFFBQVEsT0FBUixDQUNYLE9BRFcsRUFFWCxTQUZXLENBQWI7QUFJQSxXQUFPLElBQVA7QUFDRCxHQWpCSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBbUJBLE1BQU07QUFBQSxxQ0FBWSxXQUFNLElBQU4sRUFBYztBQUM5QixVQUFNLFdBQVcsS0FBSyxRQUF0QjtBQUNBLFVBQU0sVUFBVSxNQUFNLFNBQVMsU0FBUyxPQUFsQixFQUNwQixnQkFBZ0IsU0FBUyxHQUF6QixFQUE4QixJQUE5QixDQUFtQztBQUFBLGFBQUssRUFBRSxRQUFQO0FBQUEsS0FBbkMsQ0FEb0IsQ0FBdEI7QUFFQSxhQUFTLE9BQVQsR0FBbUIsT0FBbkI7O0FBRUEsV0FBTyxJQUFQO0FBQ0QsR0FQSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBU0EsTUFBTSxvQkFBb0IsQ0FBQyxRQUFELEVBQVcsRUFBWCxLQUFrQixVQUFVLFFBQVYsRUFBb0IsVUFBcEIsQ0FBK0IsRUFBL0IsQ0FBNUM7QUFDQSxNQUFNLG1CQUFtQixDQUFDLE9BQUQsRUFBVSxFQUFWLEtBQWlCLFNBQVMsT0FBVCxFQUFrQixTQUFsQixFQUE2QixVQUE3QixDQUF3QyxFQUF4QyxDQUExQzs7UUFFUyxpQixHQUFBLGlCO1FBQW1CLFMsR0FBQSxTO1FBQVcsZ0IsR0FBQSxnQjtRQUFrQixRLEdBQUEsUSIsImZpbGUiOiJwYXJzZUZpbHRlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdG9yIGZyb20gJ3ZhbGlkYXRvcic7XHJcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcclxuaW1wb3J0IHBvc3RUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlJztcclxuaW1wb3J0IHsgZGVmYXVsdCBhcyBwYXJzZSwgdGFnVGVtcGxhdGUgfSBmcm9tICcuL3BhcnNlJztcclxuXHJcbmNvbnN0IHAgPSBQcm9taXNlLnByb21pc2lmeTtcclxuXHJcbmNvbnN0IHRyYW5zbGF0b3IgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9wdWJsaWMvc3JjL21vZHVsZXMvdHJhbnNsYXRvcicpO1xyXG5jb25zdCBtZXRhID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL21ldGEnKTtcclxuLy8gY29uc3QgY2xzID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL21pZGRsZXdhcmUvY2xzJyk7XHJcbi8vIGNvbnN0IGdldExhbmcgPSAoKSA9PiBnZXRVc2VyU2V0dGluZ3MoY2xzLmdldCgncmVxdWVzdCcpLnVpZCkudGhlbih4ID0+IHgudXNlckxhbmcpO1xyXG5jb25zdCBnZXRMYW5nID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG1ldGEuY29uZmlnLmRlZmF1bHRMYW5nIHx8ICdlbl9HQicpO1xyXG5cclxuY29uc3QgdXNlciA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy91c2VyJyk7XHJcbmNvbnN0IGdldFVzZXJTZXR0aW5ncyA9IHAodXNlci5nZXRTZXR0aW5ncyk7XHJcbmNvbnN0IHRyYW5zbGF0ZSA9IHAoKHRleHQsIGxhbmd1YWdlLCBjYWxsYmFjaykgPT4ge1xyXG4gIHRyYW5zbGF0b3IudHJhbnNsYXRlKHRleHQsIGxhbmd1YWdlLCBjb250ZW50ID0+IGNhbGxiYWNrKG51bGwsIGNvbnRlbnQpKTtcclxuICAvLyBjYWxsYmFjayhudWxsLCB0ZXh0KTtcclxufSk7XHJcblxyXG5jb25zdCBldmVudFJYID0gbmV3IFJlZ0V4cCh0YWdUZW1wbGF0ZSgnZXZlbnQnLCAnW1xcXFx3XFxcXFddKicpKTtcclxuY29uc3QgaW52YWxpZFJYID0gbmV3IFJlZ0V4cChcclxuICBgKCR7dGFnVGVtcGxhdGUoJ2V2ZW50LWludmFsaWQnLCAnW1xcXFx3XFxcXFddKicpfSlgXHJcbik7XHJcblxyXG5jb25zdCBwYXJzZVJhdyA9IGFzeW5jIChjb250ZW50LCB1c2VyTGFuZykgPT4ge1xyXG4gIGNvbnN0IGV2ZW50ID0gcGFyc2UoY29udGVudCk7XHJcbiAgaWYgKCFldmVudCkge1xyXG4gICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZShpbnZhbGlkUlgsICc8c3BhbiBjbGFzcz1cImhpZGVcIj4kMTwvc3Bhbj4nKTtcclxuICB9XHJcbiAgZXZlbnQubmFtZSA9IHZhbGlkYXRvci5lc2NhcGUoZXZlbnQubmFtZSk7XHJcbiAgY29uc3QgbGFuZyA9IGF3YWl0IHVzZXJMYW5nO1xyXG5cclxuICBjb25zdCBldmVudFRleHQgPSBhd2FpdCB0cmFuc2xhdGUoXHJcbiAgICBwb3N0VGVtcGxhdGUoZXZlbnQsIGxhbmcuc3BsaXQoL1tfQF0vKVswXSksXHJcbiAgICBsYW5nXHJcbiAgKTtcclxuICBjb25zdCB0ZXh0ID0gY29udGVudC5yZXBsYWNlKFxyXG4gICAgZXZlbnRSWCxcclxuICAgIGV2ZW50VGV4dFxyXG4gICk7XHJcbiAgcmV0dXJuIHRleHQ7XHJcbn07XHJcblxyXG5jb25zdCBwYXJzZVBvc3QgPSBhc3luYyBkYXRhID0+IHtcclxuICBjb25zdCBwb3N0RGF0YSA9IGRhdGEucG9zdERhdGE7XHJcbiAgY29uc3QgY29udGVudCA9IGF3YWl0IHBhcnNlUmF3KHBvc3REYXRhLmNvbnRlbnQsXHJcbiAgICBnZXRVc2VyU2V0dGluZ3MocG9zdERhdGEudWlkKS50aGVuKHggPT4geC51c2VyTGFuZykpO1xyXG4gIHBvc3REYXRhLmNvbnRlbnQgPSBjb250ZW50O1xyXG5cclxuICByZXR1cm4gZGF0YTtcclxufTtcclxuXHJcbmNvbnN0IHBhcnNlUG9zdENhbGxiYWNrID0gKHBvc3REYXRhLCBjYikgPT4gcGFyc2VQb3N0KHBvc3REYXRhKS5hc0NhbGxiYWNrKGNiKTtcclxuY29uc3QgcGFyc2VSYXdDYWxsYmFjayA9IChjb250ZW50LCBjYikgPT4gcGFyc2VSYXcoY29udGVudCwgZ2V0TGFuZygpKS5hc0NhbGxiYWNrKGNiKTtcclxuXHJcbmV4cG9ydCB7IHBhcnNlUG9zdENhbGxiYWNrLCBwYXJzZVBvc3QsIHBhcnNlUmF3Q2FsbGJhY2ssIHBhcnNlUmF3IH07XHJcbiJdfQ==