'use strict';

var _template = require('../template');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const lang = 'en-us';

// formatDates
[
// same day, same time, not allday
() => {
  const s = 1465186294775;
  const e = s + 1000 * 60 * 43 + 1000 * 60 * 60 * 2; // offset 2 hours 43 min

  const start = new Date(s);

  const st = {
    date: start.toLocaleDateString(lang),
    hours: start.getHours(),
    mins: start.getMinutes(),
    ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, '')
  };

  (0, _assert2.default)(`${ st.date }<br>${ st.hours }:${ st.mins } ${ st.ampm }`, (0, _template.formatDates)(s, e, false, lang));
},
// same day, time separation, not allday
() => {
  const s = 1465186294775;
  const e = s + 1000 * 60 * 43 + 1000 * 60 * 60 * 2; // offset 2 hours 43 min

  const start = new Date(s);
  const end = new Date(e);

  const st = {
    date: start.toLocaleDateString(lang),
    hours: start.getHours(),
    mins: start.getMinutes(),
    ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, '')
  };

  const en = {
    hours: end.getHours(),
    mins: end.getMinutes(),
    ampm: end.toLocaleTimeString(lang).replace(/[^APM]/g, '')
  };

  (0, _assert2.default)(`${ st.date }<br>${ st.hours }:${ st.mins } ${ st.ampm } - ` + `${ en.hours }:${ en.minutes } ${ en.ampm }`, (0, _template.formatDates)(s, e, false, lang));
},
// same day, time separation, allday
() => {
  const s = 1465186294775;
  const e = s + 1000 * 60 * 43 + 1000 * 60 * 60 * 2; // offset 2 hours 43 min

  const start = new Date(s);

  (0, _assert2.default)(`${ start.toLocaleDateString(lang) }`, (0, _template.formatDates)(s, e, true, lang));
},
// different day, not allday
() => {
  const s = 1465186294775;
  const e = s + 1000 * 60 * 60 * 24 + 1000 * 60 * 60 * 2 + 1000 * 60 * 43; // offset 1 day 2 hours 43 min

  const start = new Date(s);
  const end = new Date(e);

  const st = {
    date: start.toLocaleDateString(lang),
    hours: start.getHours(),
    mins: start.getMinutes(),
    ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, '')
  };

  const en = {
    date: end.toLocaleDateString(lang),
    hours: end.getHours(),
    mins: end.getMinutes(),
    ampm: end.toLocaleTimeString(lang).replace(/[^APM]/g, '')
  };

  (0, _assert2.default)(`${ st.date } ${ st.hours }:${ st.mins } ${ st.ampm } - ` + `${ en.date } ${ en.hours }:${ en.minutes } ${ en.ampm }`, (0, _template.formatDates)(s, e, false, lang));
},
// different day, time separation, allday
() => {
  const s = 1465186294775;
  const e = s + 1000 * 60 * 60 * 24 + 1000 * 60 * 60 * 2 + 1000 * 60 * 43; // offset 1 day 2 hours 43 min

  const start = new Date(s);
  const end = new Date(e);

  (0, _assert2.default)(`${ start.toLocaleDateString(lang) } - ${ end.toLocaleDateString(lang) }`, (0, _template.formatDates)(s, e, true, lang));
}].forEach(x => x());

// postTemplate is just a template, it doesn't need testing
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdGVzdHMvdGVtcGxhdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTSxPQUFPLE9BQWI7OztBQUdBOztBQUVFLE1BQU07QUFDSixRQUFNLElBQUksYUFBVjtBQUNBLFFBQU0sSUFBSSxJQUFJLE9BQU8sRUFBUCxHQUFZLEVBQWhCLEdBQXFCLE9BQU8sRUFBUCxHQUFZLEVBQVosR0FBaUIsQ0FBaEQsQzs7QUFFQSxRQUFNLFFBQVEsSUFBSSxJQUFKLENBQVMsQ0FBVCxDQUFkOztBQUVBLFFBQU0sS0FBSztBQUNULFVBQU0sTUFBTSxrQkFBTixDQUF5QixJQUF6QixDQURHO0FBRVQsV0FBTyxNQUFNLFFBQU4sRUFGRTtBQUdULFVBQU0sTUFBTSxVQUFOLEVBSEc7QUFJVCxVQUFNLE1BQU0sa0JBQU4sQ0FBeUIsSUFBekIsRUFBK0IsT0FBL0IsQ0FBdUMsU0FBdkMsRUFBa0QsRUFBbEQ7QUFKRyxHQUFYOztBQU9BLHdCQUFRLElBQUUsR0FBRyxJQUFLLFNBQU0sR0FBRyxLQUFNLE1BQUcsR0FBRyxJQUFLLE1BQUcsR0FBRyxJQUFLLEdBQXZELEVBQTBELDJCQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLEtBQWxCLEVBQXlCLElBQXpCLENBQTFEO0FBQ0QsQ0FoQkg7O0FBa0JFLE1BQU07QUFDSixRQUFNLElBQUksYUFBVjtBQUNBLFFBQU0sSUFBSSxJQUFJLE9BQU8sRUFBUCxHQUFZLEVBQWhCLEdBQXFCLE9BQU8sRUFBUCxHQUFZLEVBQVosR0FBaUIsQ0FBaEQsQzs7QUFFQSxRQUFNLFFBQVEsSUFBSSxJQUFKLENBQVMsQ0FBVCxDQUFkO0FBQ0EsUUFBTSxNQUFNLElBQUksSUFBSixDQUFTLENBQVQsQ0FBWjs7QUFFQSxRQUFNLEtBQUs7QUFDVCxVQUFNLE1BQU0sa0JBQU4sQ0FBeUIsSUFBekIsQ0FERztBQUVULFdBQU8sTUFBTSxRQUFOLEVBRkU7QUFHVCxVQUFNLE1BQU0s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QUksa0JBQUosQ0FBdUIsSUFBdkIsQ0FBNkIsR0FBM0UsRUFDRSwyQkFBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixJQUFsQixFQUF3QixJQUF4QixDQURGO0FBRUQsQ0EzRkgsRUE0RkUsT0E1RkYsQ0E0RlUsS0FBSyxHQTVGZiIsImZpbGUiOiJ0ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdERhdGVzIH0gZnJvbSAnLi4vdGVtcGxhdGUnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5jb25zdCBsYW5nID0gJ2VuLXVzJztcblxuLy8gZm9ybWF0RGF0ZXNcbltcbiAgLy8gc2FtZSBkYXksIHNhbWUgdGltZSwgbm90IGFsbGRheVxuICAoKSA9PiB7XG4gICAgY29uc3QgcyA9IDE0NjUxODYyOTQ3NzU7XG4gICAgY29uc3QgZSA9IHMgKyAxMDAwICogNjAgKiA0MyArIDEwMDAgKiA2MCAqIDYwICogMjsgLy8gb2Zmc2V0IDIgaG91cnMgNDMgbWluXG5cbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKHMpO1xuXG4gICAgY29uc3Qgc3QgPSB7XG4gICAgICBkYXRlOiBzdGFydC50b0xvY2FsZURhdGVTdHJpbmcobGFuZyksXG4gICAgICBob3Vyczogc3RhcnQuZ2V0SG91cnMoKSxcbiAgICAgIG1pbnM6IHN0YXJ0LmdldE1pbnV0ZXMoKSxcbiAgICAgIGFtcG06IHN0YXJ0LnRvTG9jYWxlVGltZVN0cmluZyhsYW5nKS5yZXBsYWNlKC9bXkFQTV0vZywgJycpLFxuICAgIH07XG5cbiAgICBhc3NlcnQoYCR7c3QuZGF0ZX08YnI+JHtzdC5ob3Vyc306JHtzdC5taW5zfSAke3N0LmFtcG19YCwgZm9ybWF0RGF0ZXMocywgZSwgZmFsc2UsIGxhbmcpKTtcbiAgfSxcbiAgLy8gc2FtZSBkYXksIHRpbWUgc2VwYXJhdGlvbiwgbm90IGFsbGRheVxuICAoKSA9PiB7XG4gICAgY29uc3QgcyA9IDE0NjUxODYyOTQ3NzU7XG4gICAgY29uc3QgZSA9IHMgKyAxMDAwICogNjAgKiA0MyArIDEwMDAgKiA2MCAqIDYwICogMjsgLy8gb2Zmc2V0IDIgaG91cnMgNDMgbWluXG5cbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKHMpO1xuICAgIGNvbnN0IGVuZCA9IG5ldyBEYXRlKGUpO1xuXG4gICAgY29uc3Qgc3QgPSB7XG4gICAgICBkYXRlOiBzdGFydC50b0xvY2FsZURhdGVTdHJpbmcobGFuZyksXG4gICAgICBob3Vyczogc3RhcnQuZ2V0SG91cnMoKSxcbiAgICAgIG1pbnM6IHN0YXJ0LmdldE1pbnV0ZXMoKSxcbiAgICAgIGFtcG06IHN0YXJ0LnRvTG9jYWxlVGltZVN0cmluZyhsYW5nKS5yZXBsYWNlKC9bXkFQTV0vZywgJycpLFxuICAgIH07XG5cbiAgICBjb25zdCBlbiA9IHtcbiAgICAgIGhvdXJzOiBlbmQuZ2V0SG91cnMoKSxcbiAgICAgIG1pbnM6IGVuZC5nZXRNaW51dGVzKCksXG4gICAgICBhbXBtOiBlbmQudG9Mb2NhbGVUaW1lU3RyaW5nKGxhbmcpLnJlcGxhY2UoL1teQVBNXS9nLCAnJyksXG4gICAgfTtcblxuICAgIGFzc2VydChgJHtzdC5kYXRlfTxicj4ke3N0LmhvdXJzfToke3N0Lm1pbnN9ICR7c3QuYW1wbX0gLSBgICtcbiAgICAgIGAke2VuLmhvdXJzfToke2VuLm1pbnV0ZXN9ICR7ZW4uYW1wbX1gLCBmb3JtYXREYXRlcyhzLCBlLCBmYWxzZSwgbGFuZykpO1xuICB9LFxuICAvLyBzYW1lIGRheSwgdGltZSBzZXBhcmF0aW9uLCBhbGxkYXlcbiAgKCkgPT4ge1xuICAgIGNvbnN0IHMgPSAxNDY1MTg2Mjk0Nzc1O1xuICAgIGNvbnN0IGUgPSBzICsgMTAwMCAqIDYwICogNDMgKyAxMDAwICogNjAgKiA2MCAqIDI7IC8vIG9mZnNldCAyIGhvdXJzIDQzIG1pblxuXG4gICAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZShzKTtcblxuICAgIGFzc2VydChgJHtzdGFydC50b0xvY2FsZURhdGVTdHJpbmcobGFuZyl9YCwgZm9ybWF0RGF0ZXMocywgZSwgdHJ1ZSwgbGFuZykpO1xuICB9LFxuICAvLyBkaWZmZXJlbnQgZGF5LCBub3QgYWxsZGF5XG4gICgpID0+IHtcbiAgICBjb25zdCBzID0gMTQ2NTE4NjI5NDc3NTtcbiAgICBjb25zdCBlID0gcyArXG4gICAgICAxMDAwICogNjAgKiA2MCAqIDI0ICtcbiAgICAgIDEwMDAgKiA2MCAqIDYwICogMiArXG4gICAgICAxMDAwICogNjAgKiA0MzsgLy8gb2Zmc2V0IDEgZGF5IDIgaG91cnMgNDMgbWluXG5cbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKHMpO1xuICAgIGNvbnN0IGVuZCA9IG5ldyBEYXRlKGUpO1xuXG4gICAgY29uc3Qgc3QgPSB7XG4gICAgICBkYXRlOiBzdGFydC50b0xvY2FsZURhdGVTdHJpbmcobGFuZyksXG4gICAgICBob3Vyczogc3RhcnQuZ2V0SG91cnMoKSxcbiAgICAgIG1pbnM6IHN0YXJ0LmdldE1pbnV0ZXMoKSxcbiAgICAgIGFtcG06IHN0YXJ0LnRvTG9jYWxlVGltZVN0cmluZyhsYW5nKS5yZXBsYWNlKC9bXkFQTV0vZywgJycpLFxuICAgIH07XG5cbiAgICBjb25zdCBlbiA9IHtcbiAgICAgIGRhdGU6IGVuZC50b0xvY2FsZURhdGVTdHJpbmcobGFuZyksXG4gICAgICBob3VyczogZW5kLmdldEhvdXJzKCksXG4gICAgICBtaW5zOiBlbmQuZ2V0TWludXRlcygpLFxuICAgICAgYW1wbTogZW5kLnRvTG9jYWxlVGltZVN0cmluZyhsYW5nKS5yZXBsYWNlKC9bXkFQTV0vZywgJycpLFxuICAgIH07XG5cbiAgICBhc3NlcnQoYCR7c3QuZGF0ZX0gJHtzdC5ob3Vyc306JHtzdC5taW5zfSAke3N0LmFtcG19IC0gYCArXG4gICAgICBgJHtlbi5kYXRlfSAke2VuLmhvdXJzfToke2VuLm1pbnV0ZXN9ICR7ZW4uYW1wbX1gLCBmb3JtYXREYXRlcyhzLCBlLCBmYWxzZSwgbGFuZykpO1xuICB9LFxuICAvLyBkaWZmZXJlbnQgZGF5LCB0aW1lIHNlcGFyYXRpb24sIGFsbGRheVxuICAoKSA9PiB7XG4gICAgY29uc3QgcyA9IDE0NjUxODYyOTQ3NzU7XG4gICAgY29uc3QgZSA9IHMgK1xuICAgICAgMTAwMCAqIDYwICogNjAgKiAyNCArXG4gICAgICAxMDAwICogNjAgKiA2MCAqIDIgK1xuICAgICAgMTAwMCAqIDYwICogNDM7IC8vIG9mZnNldCAxIGRheSAyIGhvdXJzIDQzIG1pblxuXG4gICAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZShzKTtcbiAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZShlKTtcblxuICAgIGFzc2VydChgJHtzdGFydC50b0xvY2FsZURhdGVTdHJpbmcobGFuZyl9IC0gJHtlbmQudG9Mb2NhbGVEYXRlU3RyaW5nKGxhbmcpfWAsXG4gICAgICBmb3JtYXREYXRlcyhzLCBlLCB0cnVlLCBsYW5nKSk7XG4gIH0sXG5dLmZvckVhY2goeCA9PiB4KCkpO1xuXG4vLyBwb3N0VGVtcGxhdGUgaXMganVzdCBhIHRlbXBsYXRlLCBpdCBkb2Vzbid0IG5lZWQgdGVzdGluZ1xuIl19