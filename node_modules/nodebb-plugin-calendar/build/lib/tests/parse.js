'use strict';

var _parse = require('../parse');

var _parse2 = _interopRequireDefault(_parse);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const setEquals = (a, b) => {
  if (a.length !== b.length) {
    return false;
  }
  for (const x of a) {
    let found = false;
    for (const y of b) {
      if (x === y) {
        found = true;
        break;
      }
    }
    if (!found) {
      return false;
    }
  }
  return true;
};

[() => {
  // basic test
  const data = {
    name: 'a test name',
    allday: true,
    startDate: Date.now() - 3 * 24 * 60 * 60 * 1000,
    endDate: Date.now(),
    reminders: [0, 10, 20, 50],
    location: 'here somewhere',
    description: 'somewhere else'
  };
  const result = (0, _parse2.default)(`other things that make sense
      [event]
        [name]${ data.name }[/name]
        [allday]${ data.allday }[/allday]
        [startDate]${ data.startDate }[/startDate]
        [endDate]${ data.endDate }[/endDate]
        [reminders]${ JSON.stringify(data.reminders) }[/reminders]
        [location]${ data.location }[/location]
        [description]
          ${ data.description }
        [/description]
      [/event]
      and some more *markdown*`);

  (0, _assert2.default)(result && typeof result === 'object', 'Expected Object, got a falsy value');
  _assert2.default.strictEqual(data.name, result.name, '`name` field incorrect');
  _assert2.default.strictEqual(data.allday, result.allday, '`allday` field incorrect');
  _assert2.default.strictEqual(data.startDate, result.startDate, '`startDate` field incorrect');
  _assert2.default.strictEqual(data.endDate, result.endDate, '`endDate` field incorrect');
  (0, _assert2.default)(setEquals(data.reminders, result.reminders), '`reminders` field incorrect');
  _assert2.default.strictEqual(data.location, result.location, '`location` field incorrect');
  _assert2.default.strictEqual(data.description, result.description, '`description` field incorrect');
}, () => {
  // test allday false
  const data = {
    name: 'a test name',
    allday: false,
    startDate: Date.now() - 3 * 24 * 60 * 60 * 1000,
    endDate: Date.now(),
    reminders: [0, 10, 20, 50],
    location: 'here somewhere',
    description: 'somewhere else'
  };
  const result = (0, _parse2.default)(`[event]
        [name]${ data.name }[/name]
        [allday]${ data.allday }[/allday]
        [startDate]${ data.startDate }[/startDate]
        [endDate]${ data.endDate }[/endDate]
        [reminders]${ JSON.stringify(data.reminders) }[/reminders]
        [location]${ data.location }[/location]
        [description]
          ${ data.description }
        [/description]
      [/event]`);
  (0, _assert2.default)(result && typeof result === 'object', 'Expected Object, got a falsy value');
  _assert2.default.strictEqual(data.name, result.name, '`name` field incorrect');
  _assert2.default.strictEqual(data.allday, result.allday, '`allday` field incorrect');
  _assert2.default.strictEqual(data.startDate, result.startDate, '`startDate` field incorrect');
  _assert2.default.strictEqual(data.endDate, result.endDate, '`endDate` field incorrect');
  (0, _assert2.default)(setEquals(data.reminders, result.reminders), '`reminders` field incorrect');
  _assert2.default.strictEqual(data.location, result.location, '`location` field incorrect');
  _assert2.default.strictEqual(data.description, result.description, '`description` field incorrect');
}, () => {
  // test bad date failing completely
  const data = {
    name: 'a test name',
    allday: false,
    startDate: Date.now() - 3 * 24 * 60 * 60 * 1000,
    endDate: 'a string',
    reminders: [0, 10, 20, 50],
    location: 'here somewhere',
    description: 'somewhere else'
  };
  const result = (0, _parse2.default)(`[event]
        [name]${ data.name }[/name]
        [allday]${ data.allday }[/allday]
        [startDate]${ data.startDate }[/startDate]
        [endDate]${ data.endDate }[/endDate]
        [reminders]${ JSON.stringify(data.reminders) }[/reminders]
        [location]${ data.location }[/location]
        [description]
          ${ data.description }
        [/description]
      [/event]`);
  _assert2.default.strictEqual(null, result, 'Expected null, got something else');
}, () => {
  // test bad reminders failing completely
  const data = {
    name: 'a test name',
    allday: false,
    startDate: Date.now() - 3 * 24 * 60 * 60 * 1000,
    endDate: Date.now(),
    reminders: 'a string',
    location: 'here somewhere',
    description: 'somewhere else'
  };
  const result = (0, _parse2.default)(`[event]
        [name]${ data.name }[/name]
        [allday]${ data.allday }[/allday]
        [startDate]${ data.startDate }[/startDate]
        [endDate]${ data.endDate }[/endDate]
        [reminders]${ JSON.stringify(data.reminders) }[/reminders]
        [location]${ data.location }[/location]
        [description]
          ${ data.description }
        [/description]
      [/event]`);
  _assert2.default.strictEqual(null, result, 'Expected null, got something else');
}, () => {
  // test bad location failing completely
  const data = {
    name: 'a test name',
    allday: false,
    startDate: Date.now() - 3 * 24 * 60 * 60 * 1000,
    endDate: Date.now(),
    reminders: [0, 10, 20, 50],
    location: 'here somewhere\nhasbbks',
    description: 'somewhere else'
  };
  const result = (0, _parse2.default)(`[event]
        [name]${ data.name }[/name]
        [allday]${ data.allday }[/allday]
        [startDate]${ data.startDate }[/startDate]
        [endDate]${ data.endDate }[/endDate]
        [reminders]${ JSON.stringify(data.reminders) }[/reminders]
        [location]${ data.location }[/location]
        [description]
          ${ data.description }
        [/description]
      [/event]`);
  _assert2.default.strictEqual(null, result, 'Expected null, got something else');
}, () => {
  // test bad name failing completely
  const data = {
    name: 'a test name\ndsjvhoaho',
    allday: false,
    startDate: Date.now() - 3 * 24 * 60 * 60 * 1000,
    endDate: Date.now(),
    reminders: [0, 10, 20, 50],
    location: 'here somewhere',
    description: 'somewhere else'
  };
  const result = (0, _parse2.default)(`[event]
        [name]${ data.name }[/name]
        [allday]${ data.allday }[/allday]
        [startDate]${ data.startDate }[/startDate]
        [endDate]${ data.endDate }[/endDate]
        [reminders]${ JSON.stringify(data.reminders) }[/reminders]
        [location]${ data.location }[/location]
        [description]
          ${ data.description }
        [/description]
      [/event]`);
  _assert2.default.strictEqual(null, result, 'Expected null, got something else');
}].forEach(x => x());
//# sourceMappingURL=data:application/json;base64,