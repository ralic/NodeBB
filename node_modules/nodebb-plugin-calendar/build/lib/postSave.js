'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.postEditCallback = exports.postSaveCallback = exports.postSave = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _validator = require('validator');

var _validator2 = _interopRequireDefault(_validator);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

var _privileges = require('./privileges');

var _event = require('./event');

var _validateEvent3 = require('./validateEvent');

var _validateEvent4 = _interopRequireDefault(_validateEvent3);

var _reminders = require('./reminders');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const plugins = require.main.require('./src/plugins');
// const winston = require.main.require('winston');

const log = function log() {
  var _console;

  return (_console = console).log.apply(_console, arguments);
};
const p = _bluebird2.default.promisify;

const fireHook = p(plugins.fireHook);

const regex = new RegExp('(\\[\\s?event\\s?\\][\\w\\W]*\\[\\s?\\/\\s?event\\s?\\])|' + '(\\[\\s?event\\-invalid?\\s?\\][\\w\\W]*\\[\\s?\\/\\s?event\\-invalid?\\s?\\])');

const postSave = (() => {
  var ref = (0, _bluebird.coroutine)(function* (postData) {
    let event = (0, _parse2.default)(postData.content);

    // delete event if no longer in post
    if (!postData.content.match(regex)) {
      const existed = yield (0, _event.eventExists)(postData.pid);
      if (existed) {
        yield (0, _reminders.notify)({
          event: yield (0, _event.getEvent)(postData.pid),
          message: '[[calendar:event_deleted]]'
        });

        yield (0, _event.deleteEvent)(postData.pid);
        log(`[plugin-calendar] Event (pid:${ postData.pid }) deleted`);
      }

      return postData;
    }

    const invalid = function invalid() {
      const d = postData;
      d.content = d.content.replace(/\[\s?(\/?)\s?event\s?\]/g, '[$1event-invalid]');
      return postData;
    };

    if (!event) {
      return invalid();
    }

    var _validateEvent = (0, _validateEvent4.default)(event);

    var _validateEvent2 = (0, _slicedToArray3.default)(_validateEvent, 2);

    const failed = _validateEvent2[0];
    const failures = _validateEvent2[1];

    if (failed) {
      const obj = failures.reduce(function (val, failure) {
        return (0, _extends3.default)({}, val, {
          [failure]: event[failure]
        });
      }, {});
      log(`[plugin-calendar] Event (pid:${ postData.pid }) validation failed: `, obj);
      return invalid();
    }

    const can = yield (0, _privileges.canPostEvent)(postData.tid, postData.uid);
    if (!can) {
      return invalid();
    }

    event.name = _validator2.default.escape(event.name);
    event.location = event.location.trim();
    event.description = event.description.trim();
    event.pid = postData.pid;
    event.uid = postData.uid;
    event = yield fireHook('filter:plugin-calendar:event.post', event);

    yield (0, _event.saveEvent)(event);
    log(`[plugin-calendar] Event (pid:${ event.pid }) saved`);

    return postData;
  });
  return function postSave(_x) {
    return ref.apply(this, arguments);
  };
})();

const postSaveCallback = (postData, cb) => postSave(postData).asCallback(cb);
const postEditCallback = (data, cb) => postSave(data.post).then(() => data).asCallback(cb);

exports.postSave = postSave;
exports.postSaveCallback = postSaveCallback;
exports.postEditCallback = postEditCallback;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcG9zdFNhdmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBVEEsTUFBTSxVQUFVLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsZUFBckIsQ0FBaEI7OztBQVdBLE1BQU0sTUFBTSxTQUFOLEdBQU07QUFBQTs7QUFBQSxTQUFhLHFCQUFRLEdBQVIsMkJBQWI7QUFBQSxDQUFaO0FBQ0EsTUFBTSxJQUFJLG1CQUFRLFNBQWxCOztBQUVBLE1BQU0sV0FBVyxFQUFFLFFBQVEsUUFBVixDQUFqQjs7QUFFQSxNQUFNLFFBQVEsSUFBSSxNQUFKLENBQ1osOERBQ0EsZ0ZBRlksQ0FBZDs7QUFLQSxNQUFNO0FBQUEscUNBQVcsV0FBTSxRQUFOLEVBQWtCO0FBQ2pDLFFBQUksUUFBUSxxQkFBTSxTQUFTLE9BQWYsQ0FBWjs7O0FBR0EsUUFBSSxDQUFDLFNBQVMsT0FBVCxDQUFpQixLQUFqQixDQUF1QixLQUF2QixDQUFMLEVBQW9DO0FBQ2xDLFlBQU0sVUFBVSxNQUFNLHdCQUFZLFNBQVMsR0FBckIsQ0FBdEI7QUFDQSxVQUFJLE9BQUosRUFBYTtBQUNYLGNBQU0sdUJBQU87QUFDWCxpQkFBTyxNQUFNLHFCQUFTLFNBQVMsR0FBbEIsQ0FERjtBQUVYLG1CQUFTO0FBRkUsU0FBUCxDQUFOOztBQUtBLGNBQU0sd0JBQVksU0FBUyxHQUFyQixDQUFOO0FBQ0EsWUFBSyxpQ0FBK0IsU0FBUyxHQUFJLFlBQWpEO0FBQ0Q7O0FBRUQsYUFBTyxRQUFQO0FBQ0Q7O0FBRUQsVUFBTSxVQUFVLFNBQVYsT0FBVSxHQUFNO0FBQ3BCLFlBQU0sSUFBSSxRQUFWO0FBQ0EsUUFBRSxPQUFGLEdBQVksRUFBRSxPQUFGLENBQVUsT0FBVixDQUNWLDBCQURVLEVBRVYsbUJBRlUsQ0FBWjtBQUlBLGFBQU8sUUFBUDtBQUNELEtBUEQ7O0FBU0EsUUFBSSxDQUFDLEtBQUwsRUFBWTtBQUNWLGFBQU8sU0FBUDtBQUNEOztBQTlCZ0MseUJBZ0NOLDZCQUFjLEtBQWQsQ0FoQ007O0FBQUE7O0FBQUEsVUFnQzFCLE1BaEMwQjtBQUFBLFVBZ0NsQixRQWhDa0I7O0FBaUNqQyxRQUFJLE1BQUosRUFBWTtBQUNWLFlBQU0sTUFBTSxTQUFTLE1BQVQsQ0FBZ0IsVUFBQyxHQUFELEVBQU0sT0FBTjtBQUFBLDBDQUN2QixHQUR1QjtBQUUxQixXQUFDLE9BQUQsR0FBVyxNQUFNLE9BQU47QUFGZTtBQUFBLE9BQWhCLEVBR1IsRUFIUSxDQUFaO0FBSUEsVUFBSyxpQ0FBK0IsU0FBUyxHQUFJLHdCQUFqRCxFQUF5RSxHQUF6RTtBQUNBLGFBQU8sU0FBUDtBQUNEOztBQUVELFVBQU0sTUFBTSxNQUFNLDhCQUFhLFNBQVMsR0FBdEIsRUFBMkIsU0FBUyxHQUFwQyxDQUFsQjtBQUNBLFFBQUksQ0FBQyxHQUFMLEVBQVU7QUFDUixhQUFPLFNBQVA7QUFDRDs7QUFFRCxVQUFNLElBQU4sR0FBYSxvQkFBVSxNQUFWLENBQWlCLE1BQU0sSUFBdkIsQ0FBYjtBQUNBLFVBQU0sUUFBTixHQUFpQixNQUFNLFFBQU4sQ0FBZSxJQUFmLEVBQWpCO0FBQ0EsVUFBTSxXQUFOLEdBQW9CLE1BQU0sV0FBTixDQUFrQixJQUFsQixFQUFwQjtBQUNBLFVBQU0sR0FBTixHQUFZLFNBQVMsR0FBckI7QUFDQSxVQUFNLEdBQU4sR0FBWSxTQUFTLEdBQXJCO0FBQ0EsWUFBUSxNQUFNLFNBQVMsbUNBQVQsRUFBOEMsS0FBOUMsQ0FBZDs7QUFFQSxVQUFNLHNCQUFVLEtBQVYsQ0FBTjtBQUNBLFFBQUssaUNBQStCLE1BQU0sR0FBSSxVQUE5Qzs7QUFFQSxXQUFPLFFBQVA7QUFDRCxHQTFESztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBNERBLE1BQU0sbUJBQW1CLENBQUMsUUFBRCxFQUFXLEVBQVgsS0FBa0IsU0FBUyxRQUFULEVBQW1CLFVBQW5CLENBQThCLEVBQTlCLENBQTNDO0FBQ0EsTUFBTSxtQkFBbUIsQ0FBQyxJQUFELEVBQU8sRUFBUCxLQUN2QixTQUFTLEtBQUssSUFBZCxFQUFvQixJQUFwQixDQUF5QixNQUFNLElBQS9CLEVBQXFDLFVBQXJDLENBQWdELEVBQWhELENBREY7O1FBR1MsUSxHQUFBLFE7UUFBVSxnQixHQUFBLGdCO1FBQWtCLGdCLEdBQUEsZ0IiLCJmaWxlIjoicG9zdFNhdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwbHVnaW5zID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3BsdWdpbnMnKTtcclxuLy8gY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCd3aW5zdG9uJyk7XHJcblxyXG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJ3ZhbGlkYXRvcic7XHJcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcclxuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UnO1xyXG5pbXBvcnQgeyBjYW5Qb3N0RXZlbnQgfSBmcm9tICcuL3ByaXZpbGVnZXMnO1xyXG5pbXBvcnQgeyBkZWxldGVFdmVudCwgc2F2ZUV2ZW50LCBldmVudEV4aXN0cywgZ2V0RXZlbnQgfSBmcm9tICcuL2V2ZW50JztcclxuaW1wb3J0IHZhbGlkYXRlRXZlbnQgZnJvbSAnLi92YWxpZGF0ZUV2ZW50JztcclxuaW1wb3J0IHsgbm90aWZ5IH0gZnJvbSAnLi9yZW1pbmRlcnMnO1xyXG5cclxuY29uc3QgbG9nID0gKC4uLmFyZ3MpID0+IGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xyXG5jb25zdCBwID0gUHJvbWlzZS5wcm9taXNpZnk7XHJcblxyXG5jb25zdCBmaXJlSG9vayA9IHAocGx1Z2lucy5maXJlSG9vayk7XHJcblxyXG5jb25zdCByZWdleCA9IG5ldyBSZWdFeHAoXHJcbiAgJyhcXFxcW1xcXFxzP2V2ZW50XFxcXHM/XFxcXF1bXFxcXHdcXFxcV10qXFxcXFtcXFxccz9cXFxcL1xcXFxzP2V2ZW50XFxcXHM/XFxcXF0pfCcgK1xyXG4gICcoXFxcXFtcXFxccz9ldmVudFxcXFwtaW52YWxpZD9cXFxccz9cXFxcXVtcXFxcd1xcXFxXXSpcXFxcW1xcXFxzP1xcXFwvXFxcXHM/ZXZlbnRcXFxcLWludmFsaWQ/XFxcXHM/XFxcXF0pJ1xyXG4pO1xyXG5cclxuY29uc3QgcG9zdFNhdmUgPSBhc3luYyBwb3N0RGF0YSA9PiB7XHJcbiAgbGV0IGV2ZW50ID0gcGFyc2UocG9zdERhdGEuY29udGVudCk7XHJcblxyXG4gIC8vIGRlbGV0ZSBldmVudCBpZiBubyBsb25nZXIgaW4gcG9zdFxyXG4gIGlmICghcG9zdERhdGEuY29udGVudC5tYXRjaChyZWdleCkpIHtcclxuICAgIGNvbnN0IGV4aXN0ZWQgPSBhd2FpdCBldmVudEV4aXN0cyhwb3N0RGF0YS5waWQpO1xyXG4gICAgaWYgKGV4aXN0ZWQpIHtcclxuICAgICAgYXdhaXQgbm90aWZ5KHtcclxuICAgICAgICBldmVudDogYXdhaXQgZ2V0RXZlbnQocG9zdERhdGEucGlkKSxcclxuICAgICAgICBtZXNzYWdlOiAnW1tjYWxlbmRhcjpldmVudF9kZWxldGVkXV0nLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGF3YWl0IGRlbGV0ZUV2ZW50KHBvc3REYXRhLnBpZCk7XHJcbiAgICAgIGxvZyhgW3BsdWdpbi1jYWxlbmRhcl0gRXZlbnQgKHBpZDoke3Bvc3REYXRhLnBpZH0pIGRlbGV0ZWRgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcG9zdERhdGE7XHJcbiAgfVxyXG5cclxuICBjb25zdCBpbnZhbGlkID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZCA9IHBvc3REYXRhO1xyXG4gICAgZC5jb250ZW50ID0gZC5jb250ZW50LnJlcGxhY2UoXHJcbiAgICAgIC9cXFtcXHM/KFxcLz8pXFxzP2V2ZW50XFxzP1xcXS9nLFxyXG4gICAgICAnWyQxZXZlbnQtaW52YWxpZF0nXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHBvc3REYXRhO1xyXG4gIH07XHJcblxyXG4gIGlmICghZXZlbnQpIHtcclxuICAgIHJldHVybiBpbnZhbGlkKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBbZmFpbGVkLCBmYWlsdXJlc10gPSB2YWxpZGF0ZUV2ZW50KGV2ZW50KTtcclxuICBpZiAoZmFpbGVkKSB7XHJcbiAgICBjb25zdCBvYmogPSBmYWlsdXJlcy5yZWR1Y2UoKHZhbCwgZmFpbHVyZSkgPT4gKHtcclxuICAgICAgLi4udmFsLFxyXG4gICAgICBbZmFpbHVyZV06IGV2ZW50W2ZhaWx1cmVdLFxyXG4gICAgfSksIHt9KTtcclxuICAgIGxvZyhgW3BsdWdpbi1jYWxlbmRhcl0gRXZlbnQgKHBpZDoke3Bvc3REYXRhLnBpZH0pIHZhbGlkYXRpb24gZmFpbGVkOiBgLCBvYmopO1xyXG4gICAgcmV0dXJuIGludmFsaWQoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNhbiA9IGF3YWl0IGNhblBvc3RFdmVudChwb3N0RGF0YS50aWQsIHBvc3REYXRhLnVpZCk7XHJcbiAgaWYgKCFjYW4pIHtcclxuICAgIHJldHVybiBpbnZhbGlkKCk7XHJcbiAgfVxyXG5cclxuICBldmVudC5uYW1lID0gdmFsaWRhdG9yLmVzY2FwZShldmVudC5uYW1lKTtcclxuICBldmVudC5sb2NhdGlvbiA9IGV2ZW50LmxvY2F0aW9uLnRyaW0oKTtcclxuICBldmVudC5kZXNjcmlwdGlvbiA9IGV2ZW50LmRlc2NyaXB0aW9uLnRyaW0oKTtcclxuICBldmVudC5waWQgPSBwb3N0RGF0YS5waWQ7XHJcbiAgZXZlbnQudWlkID0gcG9zdERhdGEudWlkO1xyXG4gIGV2ZW50ID0gYXdhaXQgZmlyZUhvb2soJ2ZpbHRlcjpwbHVnaW4tY2FsZW5kYXI6ZXZlbnQucG9zdCcsIGV2ZW50KTtcclxuXHJcbiAgYXdhaXQgc2F2ZUV2ZW50KGV2ZW50KTtcclxuICBsb2coYFtwbHVnaW4tY2FsZW5kYXJdIEV2ZW50IChwaWQ6JHtldmVudC5waWR9KSBzYXZlZGApO1xyXG5cclxuICByZXR1cm4gcG9zdERhdGE7XHJcbn07XHJcblxyXG5jb25zdCBwb3N0U2F2ZUNhbGxiYWNrID0gKHBvc3REYXRhLCBjYikgPT4gcG9zdFNhdmUocG9zdERhdGEpLmFzQ2FsbGJhY2soY2IpO1xyXG5jb25zdCBwb3N0RWRpdENhbGxiYWNrID0gKGRhdGEsIGNiKSA9PlxyXG4gIHBvc3RTYXZlKGRhdGEucG9zdCkudGhlbigoKSA9PiBkYXRhKS5hc0NhbGxiYWNrKGNiKTtcclxuXHJcbmV4cG9ydCB7IHBvc3RTYXZlLCBwb3N0U2F2ZUNhbGxiYWNrLCBwb3N0RWRpdENhbGxiYWNrIH07XHJcbiJdfQ==