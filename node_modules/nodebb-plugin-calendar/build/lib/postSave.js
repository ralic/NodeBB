'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.postEditCallback = exports.postSaveCallback = exports.postSave = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _validator = require('validator');

var _validator2 = _interopRequireDefault(_validator);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

var _privileges = require('./privileges');

var _event = require('./event');

var _validateEvent3 = require('./validateEvent');

var _validateEvent4 = _interopRequireDefault(_validateEvent3);

var _reminders = require('./reminders');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const plugins = require.main.require('./src/plugins');
// const winston = require.main.require('winston');

const log = function log() {
  var _console;

  return (_console = console).log.apply(_console, arguments);
};
const p = _bluebird2.default.promisify;

const fireHook = p(plugins.fireHook);

const regex = new RegExp('(\\[\\s?event\\s?\\][\\w\\W]*\\[\\s?\\/\\s?event\\s?\\])|' + '(\\[\\s?event\\-invalid?\\s?\\][\\w\\W]*\\[\\s?\\/\\s?event\\-invalid?\\s?\\])');

const postSave = (() => {
  var ref = (0, _bluebird.coroutine)(function* (postData) {
    let event = (0, _parse2.default)(postData.content);

    // delete event if no longer in post
    if (!postData.content.match(regex)) {
      const existed = yield (0, _event.eventExists)(postData.pid);
      if (existed) {
        yield (0, _reminders.notify)({
          event: yield (0, _event.getEvent)(postData.pid),
          message: '[[calendar:event_deleted]]'
        });

        yield (0, _event.deleteEvent)(postData.pid);
        log(`[plugin-calendar] Event (pid:${ postData.pid }) deleted`);
      }

      return postData;
    }

    const invalid = function invalid() {
      const d = postData;
      d.content = d.content.replace(/\[\s?(\/?)\s?event\s?\]/g, '[$1event-invalid]');
      return postData;
    };

    if (!event) {
      return invalid();
    }

    var _validateEvent = (0, _validateEvent4.default)(event);

    var _validateEvent2 = _slicedToArray(_validateEvent, 2);

    const failed = _validateEvent2[0];
    const failures = _validateEvent2[1];

    if (failed) {
      const obj = failures.reduce(function (val, failure) {
        return _extends({}, val, {
          [failure]: event[failure]
        });
      }, {});
      log(`[plugin-calendar] Event (pid:${ postData.pid }) validation failed: `, obj);
      return invalid();
    }

    const can = yield (0, _privileges.canPostEvent)(postData.tid, postData.uid);
    if (!can) {
      return invalid();
    }

    event.name = _validator2.default.escape(event.name);
    event.pid = postData.pid;
    event.uid = postData.uid;
    event = yield fireHook('filter:plugin-calendar:event.post', event);

    yield (0, _event.saveEvent)(event);
    log(`[plugin-calendar] Event (pid:${ event.pid }) saved`);

    return postData;
  });
  return function postSave(_x) {
    return ref.apply(this, arguments);
  };
})();

const postSaveCallback = (postData, cb) => postSave(postData).asCallback(cb);
const postEditCallback = (data, cb) => postSave(data.post).then(() => data).asCallback(cb);

exports.postSave = postSave;
exports.postSaveCallback = postSaveCallback;
exports.postEditCallback = postEditCallback;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcG9zdFNhdmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFUQSxNQUFNLFVBQVUsUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixlQUFyQixDQUFoQjs7O0FBV0EsTUFBTSxNQUFNLFNBQU4sR0FBTTtBQUFBOztBQUFBLFNBQWEscUJBQVEsR0FBUiwyQkFBYjtBQUFBLENBQVo7QUFDQSxNQUFNLElBQUksbUJBQVEsU0FBbEI7O0FBRUEsTUFBTSxXQUFXLEVBQUUsUUFBUSxRQUFWLENBQWpCOztBQUVBLE1BQU0sUUFBUSxJQUFJLE1BQUosQ0FDWiw4REFDQSxnRkFGWSxDQUFkOztBQUtBLE1BQU07QUFBQSxxQ0FBVyxXQUFNLFFBQU4sRUFBa0I7QUFDakMsUUFBSSxRQUFRLHFCQUFNLFNBQVMsT0FBZixDQUFaOzs7QUFHQSxRQUFJLENBQUMsU0FBUyxPQUFULENBQWlCLEtBQWpCLENBQXVCLEtBQXZCLENBQUwsRUFBb0M7QUFDbEMsWUFBTSxVQUFVLE1BQU0sd0JBQVksU0FBUyxHQUFyQixDQUF0QjtBQUNBLFVBQUksT0FBSixFQUFhO0FBQ1gsY0FBTSx1QkFBTztBQUNYLGlCQUFPLE1BQU0scUJBQVMsU0FBUyxHQUFsQixDQURGO0FBRVgsbUJBQVM7QUFGRSxTQUFQLENBQU47O0FBS0EsY0FBTSx3QkFBWSxTQUFTLEdBQXJCLENBQU47QUFDQSxZQUFLLGlDQUErQixTQUFTLEdBQUksWUFBakQ7QUFDRDs7QUFFRCxhQUFPLFFBQVA7QUFDRDs7QUFFRCxVQUFNLFVBQVUsU0FBVixPQUFVLEdBQU07QUFDcEIsWUFBTSxJQUFJLFFBQVY7QUFDQSxRQUFFLE9BQUYsR0FBWSxFQUFFLE9BQUYsQ0FBVSxPQUFWLENBQ1YsMEJBRFUsRUFFVixtQkFGVSxDQUFaO0FBSUEsYUFBTyxRQUFQO0FBQ0QsS0FQRDs7QUFTQSxRQUFJLENBQUMsS0FBTCxFQUFZO0FBQ1YsYUFBTyxTQUFQO0FBQ0Q7O0FBOUJnQyx5QkFnQ04sNkJBQWMsS0FBZCxDQWhDTTs7QUFBQTs7QUFBQSxVQWdDMUIsTUFoQzBCO0FBQUEsVUFnQ2xCLFFBaENrQjs7QUFpQ2pDLFFBQUksTUFBSixFQUFZO0FBQ1YsWUFBTSxNQUFNLFNBQVMsTUFBVCxDQUFnQixVQUFDLEdBQUQsRUFBTSxPQUFOO0FBQUEsNEJBQ3ZCLEdBRHVCO0FBRTFCLFdBQUMsT0FBRCxHQUFXLE1BQU0sT0FBTjtBQUZlO0FBQUEsT0FBaEIsRUFHUixFQUhRLENBQVo7QUFJQSxVQUFLLGlDQUErQixTQUFTLEdBQUksd0JBQWpELEVBQXlFLEdBQXpFO0FBQ0EsYUFBTyxTQUFQO0FBQ0Q7O0FBRUQsVUFBTSxNQUFNLE1BQU0sOEJBQWEsU0FBUyxHQUF0QixFQUEyQixTQUFTLEdBQXBDLENBQWxCO0FBQ0EsUUFBSSxDQUFDLEdBQUwsRUFBVTtBQUNSLGFBQU8sU0FBUDtBQUNEOztBQUVELFVBQU0sSUFBTixHQUFhLG9CQUFVLE1BQVYsQ0FBaUIsTUFBTSxJQUF2QixDQUFiO0FBQ0EsVUFBTSxHQUFOLEdBQVksU0FBUyxHQUFyQjtBQUNBLFVBQU0sR0FBTixHQUFZLFNBQVMsR0FBckI7QUFDQSxZQUFRLE1BQU0sU0FBUyxtQ0FBVCxFQUE4QyxLQUE5QyxDQUFkOztBQUVBLFVBQU0sc0JBQVUsS0FBVixDQUFOO0FBQ0EsUUFBSyxpQ0FBK0IsTUFBTSxHQUFJLFVBQTlDOztBQUVBLFdBQU8sUUFBUDtBQUNELEdBeERLO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUEwREEsTUFBTSxtQkFBbUIsQ0FBQyxRQUFELEVBQVcsRUFBWCxLQUFrQixTQUFTLFFBQVQsRUFBbUIsVUFBbkIsQ0FBOEIsRUFBOUIsQ0FBM0M7QUFDQSxNQUFNLG1CQUFtQixDQUFDLElBQUQsRUFBTyxFQUFQLEtBQ3ZCLFNBQVMsS0FBSyxJQUFkLEVBQW9CLElBQXBCLENBQXlCLE1BQU0sSUFBL0IsRUFBcUMsVUFBckMsQ0FBZ0QsRUFBaEQsQ0FERjs7UUFHUyxRLEdBQUEsUTtRQUFVLGdCLEdBQUEsZ0I7UUFBa0IsZ0IsR0FBQSxnQiIsImZpbGUiOiJwb3N0U2F2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBsdWdpbnMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvcGx1Z2lucycpO1xyXG4vLyBjb25zdCB3aW5zdG9uID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJ3dpbnN0b24nKTtcclxuXHJcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAndmFsaWRhdG9yJztcclxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xyXG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZSc7XHJcbmltcG9ydCB7IGNhblBvc3RFdmVudCB9IGZyb20gJy4vcHJpdmlsZWdlcyc7XHJcbmltcG9ydCB7IGRlbGV0ZUV2ZW50LCBzYXZlRXZlbnQsIGV2ZW50RXhpc3RzLCBnZXRFdmVudCB9IGZyb20gJy4vZXZlbnQnO1xyXG5pbXBvcnQgdmFsaWRhdGVFdmVudCBmcm9tICcuL3ZhbGlkYXRlRXZlbnQnO1xyXG5pbXBvcnQgeyBub3RpZnkgfSBmcm9tICcuL3JlbWluZGVycyc7XHJcblxyXG5jb25zdCBsb2cgPSAoLi4uYXJncykgPT4gY29uc29sZS5sb2coLi4uYXJncyk7XHJcbmNvbnN0IHAgPSBQcm9taXNlLnByb21pc2lmeTtcclxuXHJcbmNvbnN0IGZpcmVIb29rID0gcChwbHVnaW5zLmZpcmVIb29rKTtcclxuXHJcbmNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChcclxuICAnKFxcXFxbXFxcXHM/ZXZlbnRcXFxccz9cXFxcXVtcXFxcd1xcXFxXXSpcXFxcW1xcXFxzP1xcXFwvXFxcXHM/ZXZlbnRcXFxccz9cXFxcXSl8JyArXHJcbiAgJyhcXFxcW1xcXFxzP2V2ZW50XFxcXC1pbnZhbGlkP1xcXFxzP1xcXFxdW1xcXFx3XFxcXFddKlxcXFxbXFxcXHM/XFxcXC9cXFxccz9ldmVudFxcXFwtaW52YWxpZD9cXFxccz9cXFxcXSknXHJcbik7XHJcblxyXG5jb25zdCBwb3N0U2F2ZSA9IGFzeW5jIHBvc3REYXRhID0+IHtcclxuICBsZXQgZXZlbnQgPSBwYXJzZShwb3N0RGF0YS5jb250ZW50KTtcclxuXHJcbiAgLy8gZGVsZXRlIGV2ZW50IGlmIG5vIGxvbmdlciBpbiBwb3N0XHJcbiAgaWYgKCFwb3N0RGF0YS5jb250ZW50Lm1hdGNoKHJlZ2V4KSkge1xyXG4gICAgY29uc3QgZXhpc3RlZCA9IGF3YWl0IGV2ZW50RXhpc3RzKHBvc3REYXRhLnBpZCk7XHJcbiAgICBpZiAoZXhpc3RlZCkge1xyXG4gICAgICBhd2FpdCBub3RpZnkoe1xyXG4gICAgICAgIGV2ZW50OiBhd2FpdCBnZXRFdmVudChwb3N0RGF0YS5waWQpLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdbW2NhbGVuZGFyOmV2ZW50X2RlbGV0ZWRdXScsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYXdhaXQgZGVsZXRlRXZlbnQocG9zdERhdGEucGlkKTtcclxuICAgICAgbG9nKGBbcGx1Z2luLWNhbGVuZGFyXSBFdmVudCAocGlkOiR7cG9zdERhdGEucGlkfSkgZGVsZXRlZGApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb3N0RGF0YTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGludmFsaWQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBkID0gcG9zdERhdGE7XHJcbiAgICBkLmNvbnRlbnQgPSBkLmNvbnRlbnQucmVwbGFjZShcclxuICAgICAgL1xcW1xccz8oXFwvPylcXHM/ZXZlbnRcXHM/XFxdL2csXHJcbiAgICAgICdbJDFldmVudC1pbnZhbGlkXSdcclxuICAgICk7XHJcbiAgICByZXR1cm4gcG9zdERhdGE7XHJcbiAgfTtcclxuXHJcbiAgaWYgKCFldmVudCkge1xyXG4gICAgcmV0dXJuIGludmFsaWQoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IFtmYWlsZWQsIGZhaWx1cmVzXSA9IHZhbGlkYXRlRXZlbnQoZXZlbnQpO1xyXG4gIGlmIChmYWlsZWQpIHtcclxuICAgIGNvbnN0IG9iaiA9IGZhaWx1cmVzLnJlZHVjZSgodmFsLCBmYWlsdXJlKSA9PiAoe1xyXG4gICAgICAuLi52YWwsXHJcbiAgICAgIFtmYWlsdXJlXTogZXZlbnRbZmFpbHVyZV0sXHJcbiAgICB9KSwge30pO1xyXG4gICAgbG9nKGBbcGx1Z2luLWNhbGVuZGFyXSBFdmVudCAocGlkOiR7cG9zdERhdGEucGlkfSkgdmFsaWRhdGlvbiBmYWlsZWQ6IGAsIG9iaik7XHJcbiAgICByZXR1cm4gaW52YWxpZCgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgY2FuID0gYXdhaXQgY2FuUG9zdEV2ZW50KHBvc3REYXRhLnRpZCwgcG9zdERhdGEudWlkKTtcclxuICBpZiAoIWNhbikge1xyXG4gICAgcmV0dXJuIGludmFsaWQoKTtcclxuICB9XHJcblxyXG4gIGV2ZW50Lm5hbWUgPSB2YWxpZGF0b3IuZXNjYXBlKGV2ZW50Lm5hbWUpO1xyXG4gIGV2ZW50LnBpZCA9IHBvc3REYXRhLnBpZDtcclxuICBldmVudC51aWQgPSBwb3N0RGF0YS51aWQ7XHJcbiAgZXZlbnQgPSBhd2FpdCBmaXJlSG9vaygnZmlsdGVyOnBsdWdpbi1jYWxlbmRhcjpldmVudC5wb3N0JywgZXZlbnQpO1xyXG5cclxuICBhd2FpdCBzYXZlRXZlbnQoZXZlbnQpO1xyXG4gIGxvZyhgW3BsdWdpbi1jYWxlbmRhcl0gRXZlbnQgKHBpZDoke2V2ZW50LnBpZH0pIHNhdmVkYCk7XHJcblxyXG4gIHJldHVybiBwb3N0RGF0YTtcclxufTtcclxuXHJcbmNvbnN0IHBvc3RTYXZlQ2FsbGJhY2sgPSAocG9zdERhdGEsIGNiKSA9PiBwb3N0U2F2ZShwb3N0RGF0YSkuYXNDYWxsYmFjayhjYik7XHJcbmNvbnN0IHBvc3RFZGl0Q2FsbGJhY2sgPSAoZGF0YSwgY2IpID0+XHJcbiAgcG9zdFNhdmUoZGF0YS5wb3N0KS50aGVuKCgpID0+IGRhdGEpLmFzQ2FsbGJhY2soY2IpO1xyXG5cclxuZXhwb3J0IHsgcG9zdFNhdmUsIHBvc3RTYXZlQ2FsbGJhY2ssIHBvc3RFZGl0Q2FsbGJhY2sgfTtcclxuIl19