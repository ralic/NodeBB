'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeEvent = exports.filterByPid = exports.getEventsByDate = exports.getEvent = exports.eventExists = exports.saveEvent = exports.deleteEvent = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _responses = require('./responses');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const db = require.main.require('./src/database');
const privileges = require.main.require('./src/privileges');
const plugins = require.main.require('./src/plugins');
const topics = require.main.require('./src/topics');

const p = _bluebird2.default.promisify;

const sortedSetAdd = p(db.sortedSetAdd);
const sortedSetRemove = p(db.sortedSetRemove);
const getSortedSetRangeByScore = p(db.getSortedSetRangeByScore);
const setObject = p(db.setObject);
const getObject = p(db.getObject);
const getObjects = p(db.getObjects);
const deleteKey = p(db.delete);
const exists = p(db.exists);
const filterPids = p(privileges.posts.filter);
const fireHook = p(plugins.fireHook);
const getTopicsFields = p(topics.getTopicsFields);
const getTopicField = p(topics.getTopicField);

const listKey = 'plugins:calendar:events';

const saveEvent = event => _bluebird2.default.all([sortedSetAdd(listKey, event.startDate, `${ listKey }:pid:${ event.pid }`), setObject(`${ listKey }:pid:${ event.pid }`, event)]);

const deleteEvent = pid => _bluebird2.default.all([sortedSetRemove(listKey, `${ listKey }:pid:${ pid }`), deleteKey(`${ listKey }:pid:${ pid }`), (0, _responses.removeAll)(pid)]);

const getEventsByDate = (() => {
  var ref = (0, _bluebird.coroutine)(function* (startDate, endDate) {
    const keys = yield getSortedSetRangeByScore(listKey, 0, -1, startDate, endDate);
    const events = yield getObjects(keys);

    const topicsWithCids = yield getTopicsFields(events.map(function (ev) {
      return ev.tid;
    }), ['cid']);

    return events.map(function (ev, i) {
      return _extends({}, ev, {
        cid: topicsWithCids[i].cid
      });
    });
  });
  return function getEventsByDate(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

const eventExists = pid => exists(`${ listKey }:pid:${ pid }`);

const getEvent = (() => {
  var ref = (0, _bluebird.coroutine)(function* (pid) {
    const event = yield getObject(`${ listKey }:pid:${ pid }`);

    var _ref = yield getTopicField(event.tid, 'cid');

    const cid = _ref.cid;


    return _extends({}, event, {
      cid
    });
  });
  return function getEvent(_x3) {
    return ref.apply(this, arguments);
  };
})();

const filterByPid = (events, uid) => filterPids('read', events.map(e => e.pid), uid).then(filtered => events.filter(e => filtered.includes(e.pid)));

const escapeEvent = (() => {
  var ref = (0, _bluebird.coroutine)(function* (event) {
    var _ref2 = yield _bluebird2.default.all([fireHook('filter:parse.raw', event.location), fireHook('filter:parse.raw', event.description)]);

    var _ref3 = _slicedToArray(_ref2, 2);

    const location = _ref3[0];
    const description = _ref3[1];


    return _extends({}, event, {
      location,
      description
    });
  });
  return function escapeEvent(_x4) {
    return ref.apply(this, arguments);
  };
})();

exports.deleteEvent = deleteEvent;
exports.saveEvent = saveEvent;
exports.eventExists = eventExists;
exports.getEvent = getEvent;
exports.getEventsByDate = getEventsByDate;
exports.filterByPid = filterByPid;
exports.escapeEvent = escapeEvent;
//# sourceMappingURL=data:application/json;base64,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Q0FGTTs7QUFBQSxVQUVwQixHQUZvQixRQUVwQixHQUZvQjs7O0FBSTVCLHdCQUNLLEtBREw7QUFFRTtBQUZGO0FBSUQsR0FSSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBVUEsTUFBTSxjQUFjLENBQUMsTUFBRCxFQUFTLEdBQVQsS0FDbEIsV0FBVyxNQUFYLEVBQW1CLE9BQU8sR0FBUCxDQUFXLEtBQUssRUFBRSxHQUFsQixDQUFuQixFQUEyQyxHQUEzQyxFQUNDLElBREQsQ0FDTSxZQUFZLE9BQU8sTUFBUCxDQUFjLEtBQUssU0FBUyxRQUFULENBQWtCLEVBQUUsR0FBcEIsQ0FBbkIsQ0FEbEIsQ0FERjs7QUFJQSxNQUFNO0FBQUEscUNBQWMsV0FBTSxLQUFOLEVBQWU7QUFBQSxnQkFDRCxNQUFNLG1CQUFRLEdBQVIsQ0FBWSxDQUNoRCxTQUFTLGtCQUFULEVBQTZCLE1BQU0sUUFBbkMsQ0FEZ0QsRUFFaEQsU0FBUyxrQkFBVCxFQUE2QixNQUFNLFdBQW5DLENBRmdELENBQVosQ0FETDs7QUFBQTs7QUFBQSxVQUMxQixRQUQwQjtBQUFBLFVBQ2hCLFdBRGdCOzs7QUFNakMsd0JBQ0ssS0FETDtBQUVFLGNBRkY7QUFHRTtBQUhGO0FBS0QsR0FYSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O1FBY0UsVyxHQUFBLFc7UUFDQSxTLEdBQUEsUztRQUNBLFcsR0FBQSxXO1FBQ0EsUSxHQUFBLFE7UUFDQSxlLEdBQUEsZTtRQUNBLFcsR0FBQSxXO1FBQ0EsVyxHQUFBLFciLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkYiA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9kYXRhYmFzZScpO1xuY29uc3QgcHJpdmlsZWdlcyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9wcml2aWxlZ2VzJyk7XG5jb25zdCBwbHVnaW5zID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3BsdWdpbnMnKTtcbmNvbnN0IHRvcGljcyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy90b3BpY3MnKTtcblxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgcmVtb3ZlQWxsIGFzIHJlbW92ZUFsbFJlc3BvbnNlcyB9IGZyb20gJy4vcmVzcG9uc2VzJztcblxuY29uc3QgcCA9IFByb21pc2UucHJvbWlzaWZ5O1xuXG5jb25zdCBzb3J0ZWRTZXRBZGQgPSBwKGRiLnNvcnRlZFNldEFkZCk7XG5jb25zdCBzb3J0ZWRTZXRSZW1vdmUgPSBwKGRiLnNvcnRlZFNldFJlbW92ZSk7XG5jb25zdCBnZXRTb3J0ZWRTZXRSYW5nZUJ5U2NvcmUgPSBwKGRiLmdldFNvcnRlZFNldFJhbmdlQnlTY29yZSk7XG5jb25zdCBzZXRPYmplY3QgPSBwKGRiLnNldE9iamVjdCk7XG5jb25zdCBnZXRPYmplY3QgPSBwKGRiLmdldE9iamVjdCk7XG5jb25zdCBnZXRPYmplY3RzID0gcChkYi5nZXRPYmplY3RzKTtcbmNvbnN0IGRlbGV0ZUtleSA9IHAoZGIuZGVsZXRlKTtcbmNvbnN0IGV4aXN0cyA9IHAoZGIuZXhpc3RzKTtcbmNvbnN0IGZpbHRlclBpZHMgPSBwKHByaXZpbGVnZXMucG9zdHMuZmlsdGVyKTtcbmNvbnN0IGZpcmVIb29rID0gcChwbHVnaW5zLmZpcmVIb29rKTtcbmNvbnN0IGdldFRvcGljc0ZpZWxkcyA9IHAodG9waWNzLmdldFRvcGljc0ZpZWxkcyk7XG5jb25zdCBnZXRUb3BpY0ZpZWxkID0gcCh0b3BpY3MuZ2V0VG9waWNGaWVsZCk7XG5cbmNvbnN0IGxpc3RLZXkgPSAncGx1Z2luczpjYWxlbmRhcjpldmVudHMnO1xuXG5jb25zdCBzYXZlRXZlbnQgPSBldmVudCA9PiBQcm9taXNlLmFsbChbXG4gIHNvcnRlZFNldEFkZChsaXN0S2V5LCBldmVudC5zdGFydERhdGUsIGAke2xpc3RLZXl9OnBpZDoke2V2ZW50LnBpZH1gKSxcbiAgc2V0T2JqZWN0KGAke2xpc3RLZXl9OnBpZDoke2V2ZW50LnBpZH1gLCBldmVudCksXG5dKTtcblxuY29uc3QgZGVsZXRlRXZlbnQgPSBwaWQgPT4gUHJvbWlzZS5hbGwoW1xuICBzb3J0ZWRTZXRSZW1vdmUobGlzdEtleSwgYCR7bGlzdEtleX06cGlkOiR7cGlkfWApLFxuICBkZWxldGVLZXkoYCR7bGlzdEtleX06cGlkOiR7cGlkfWApLFxuICByZW1vdmVBbGxSZXNwb25zZXMocGlkKSxcbl0pO1xuXG5jb25zdCBnZXRFdmVudHNCeURhdGUgPSBhc3luYyAoc3RhcnREYXRlLCBlbmREYXRlKSA9PiB7XG4gIGNvbnN0IGtleXMgPSBhd2FpdCBnZXRTb3J0ZWRTZXRSYW5nZUJ5U2NvcmUobGlzdEtleSwgMCwgLTEsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG4gIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldE9iamVjdHMoa2V5cyk7XG5cbiAgY29uc3QgdG9waWNzV2l0aENpZHMgPSBhd2FpdCBnZXRUb3BpY3NGaWVsZHMoZXZlbnRzLm1hcChldiA9PiBldi50aWQpLCBbJ2NpZCddKTtcblxuICByZXR1cm4gZXZlbnRzLm1hcCgoZXYsIGkpID0+ICh7XG4gICAgLi4uZXYsXG4gICAgY2lkOiB0b3BpY3NXaXRoQ2lkc1tpXS5jaWQsXG4gIH0pKTtcbn07XG5cbmNvbnN0IGV2ZW50RXhpc3RzID0gcGlkID0+IGV4aXN0cyhgJHtsaXN0S2V5fTpwaWQ6JHtwaWR9YCk7XG5cbmNvbnN0IGdldEV2ZW50ID0gYXN5bmMgcGlkID0+IHtcbiAgY29uc3QgZXZlbnQgPSBhd2FpdCBnZXRPYmplY3QoYCR7bGlzdEtleX06cGlkOiR7cGlkfWApO1xuICBjb25zdCB7IGNpZCB9ID0gYXdhaXQgZ2V0VG9waWNGaWVsZChldmVudC50aWQsICdjaWQnKTtcblxuICByZXR1cm4ge1xuICAgIC4uLmV2ZW50LFxuICAgIGNpZCxcbiAgfTtcbn07XG5cbmNvbnN0IGZpbHRlckJ5UGlkID0gKGV2ZW50cywgdWlkKSA9PlxuICBmaWx0ZXJQaWRzKCdyZWFkJywgZXZlbnRzLm1hcChlID0+IGUucGlkKSwgdWlkKVxuICAudGhlbihmaWx0ZXJlZCA9PiBldmVudHMuZmlsdGVyKGUgPT4gZmlsdGVyZWQuaW5jbHVkZXMoZS5waWQpKSk7XG5cbmNvbnN0IGVzY2FwZUV2ZW50ID0gYXN5bmMgZXZlbnQgPT4ge1xuICBjb25zdCBbbG9jYXRpb24sIGRlc2NyaXB0aW9uXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBmaXJlSG9vaygnZmlsdGVyOnBhcnNlLnJhdycsIGV2ZW50LmxvY2F0aW9uKSxcbiAgICBmaXJlSG9vaygnZmlsdGVyOnBhcnNlLnJhdycsIGV2ZW50LmRlc2NyaXB0aW9uKSxcbiAgXSk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5ldmVudCxcbiAgICBsb2NhdGlvbixcbiAgICBkZXNjcmlwdGlvbixcbiAgfTtcbn07XG5cbmV4cG9ydCB7XG4gIGRlbGV0ZUV2ZW50LFxuICBzYXZlRXZlbnQsXG4gIGV2ZW50RXhpc3RzLFxuICBnZXRFdmVudCxcbiAgZ2V0RXZlbnRzQnlEYXRlLFxuICBmaWx0ZXJCeVBpZCxcbiAgZXNjYXBlRXZlbnQsXG59O1xuIl19