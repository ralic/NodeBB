'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeEvent = exports.filterByPid = exports.getEventsByDate = exports.getEvent = exports.eventExists = exports.saveEvent = exports.deleteEvent = undefined;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _responses = require('./responses');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const db = require.main.require('./src/database');
const privileges = require.main.require('./src/privileges');
const plugins = require.main.require('./src/plugins');
const topics = require.main.require('./src/topics');

const p = _bluebird2.default.promisify;

const sortedSetAdd = p(db.sortedSetAdd);
const sortedSetRemove = p(db.sortedSetRemove);
const getSortedSetRangeByScore = p(db.getSortedSetRangeByScore);
const setObject = p(db.setObject);
const getObject = p(db.getObject);
const getObjects = p(db.getObjects);
const deleteKey = p(db.delete);
const exists = p(db.exists);
const filterPids = p(privileges.posts.filter);
const fireHook = p(plugins.fireHook);
const getTopicsFields = p(topics.getTopicsFields);
const getTopicField = p(topics.getTopicField);

const listKey = 'plugins:calendar:events';

const saveEvent = event => _bluebird2.default.all([sortedSetAdd(listKey, event.startDate, `${ listKey }:pid:${ event.pid }`), setObject(`${ listKey }:pid:${ event.pid }`, event)]);

const deleteEvent = pid => _bluebird2.default.all([sortedSetRemove(listKey, `${ listKey }:pid:${ pid }`), deleteKey(`${ listKey }:pid:${ pid }`), (0, _responses.removeAll)(pid)]);

const getEventsByDate = (() => {
  var ref = (0, _bluebird.coroutine)(function* (startDate, endDate) {
    const keys = yield getSortedSetRangeByScore(listKey, 0, -1, startDate, endDate);
    const events = yield getObjects(keys);

    const topicsWithCids = yield getTopicsFields(events.map(function (ev) {
      return ev.tid;
    }), ['cid']);

    return events.map(function (ev, i) {
      return _extends({}, ev, {
        cid: topicsWithCids[i].cid
      });
    });
  });
  return function getEventsByDate(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

const eventExists = pid => exists(`${ listKey }:pid:${ pid }`);

const getEvent = (() => {
  var ref = (0, _bluebird.coroutine)(function* (pid) {
    const event = yield getObject(`${ listKey }:pid:${ pid }`);

    var _ref = yield getTopicField(event.tid, 'cid');

    const cid = _ref.cid;


    return _extends({}, event, {
      cid: cid
    });
  });
  return function getEvent(_x3) {
    return ref.apply(this, arguments);
  };
})();

const filterByPid = (events, uid) => filterPids('read', events.map(e => e.pid), uid).then(filtered => events.filter(e => filtered.includes(e.pid)));

const escapeEvent = (() => {
  var ref = (0, _bluebird.coroutine)(function* (event) {
    var _ref2 = yield _bluebird2.default.all([fireHook('filter:parse.raw', event.location), fireHook('filter:parse.raw', event.description)]);

    var _ref3 = _slicedToArray(_ref2, 2);

    const location = _ref3[0];
    const description = _ref3[1];


    return _extends({}, event, {
      location: location,
      description: description
    });
  });
  return function escapeEvent(_x4) {
    return ref.apply(this, arguments);
  };
})();

exports.deleteEvent = deleteEvent;
exports.saveEvent = saveEvent;
exports.eventExists = eventExists;
exports.getEvent = getEvent;
exports.getEventsByDate = getEventsByDate;
exports.filterByPid = filterByPid;
exports.escapeEvent = escapeEvent;
//# sourceMappingURL=data:application/json;base64,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Q0FGTTs7QUFBQSxVQUVwQixHQUZvQixRQUVwQixHQUZvQjs7O0FBSTVCLHdCQUNLLEtBREw7QUFFRTtBQUZGO0FBSUQsR0FSSztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBVUEsTUFBTSxjQUFjLENBQUMsTUFBRCxFQUFTLEdBQVQsS0FDbEIsV0FBVyxNQUFYLEVBQW1CLE9BQU8sR0FBUCxDQUFXLEtBQUssRUFBRSxHQUFsQixDQUFuQixFQUEyQyxHQUEzQyxFQUNDLElBREQsQ0FDTSxZQUFZLE9BQU8sTUFBUCxDQUFjLEtBQUssU0FBUyxRQUFULENBQWtCLEVBQUUsR0FBcEIsQ0FBbkIsQ0FEbEIsQ0FERjs7QUFJQSxNQUFNO0FBQUEscUNBQWMsV0FBTSxLQUFOLEVBQWU7QUFBQSxnQkFDRCxNQUFNLG1CQUFRLEdBQVIsQ0FBWSxDQUNoRCxTQUFTLGtCQUFULEVBQTZCLE1BQU0sUUFBbkMsQ0FEZ0QsRUFFaEQsU0FBUyxrQkFBVCxFQUE2QixNQUFNLFdBQW5DLENBRmdELENBQVosQ0FETDs7QUFBQTs7QUFBQSxVQUMxQixRQUQwQjtBQUFBLFVBQ2hCLFdBRGdCOzs7QUFNakMsd0JBQ0ssS0FETDtBQUVFLHdCQUZGO0FBR0U7QUFIRjtBQUtELEdBWEs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztRQWNFLFcsR0FBQSxXO1FBQ0EsUyxHQUFBLFM7UUFDQSxXLEdBQUEsVztRQUNBLFEsR0FBQSxRO1FBQ0EsZSxHQUFBLGU7UUFDQSxXLEdBQUEsVztRQUNBLFcsR0FBQSxXIiwiZmlsZSI6ImV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGIgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvZGF0YWJhc2UnKTtcbmNvbnN0IHByaXZpbGVnZXMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvcHJpdmlsZWdlcycpO1xuY29uc3QgcGx1Z2lucyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9wbHVnaW5zJyk7XG5jb25zdCB0b3BpY3MgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvdG9waWNzJyk7XG5cbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHJlbW92ZUFsbCBhcyByZW1vdmVBbGxSZXNwb25zZXMgfSBmcm9tICcuL3Jlc3BvbnNlcyc7XG5cbmNvbnN0IHAgPSBQcm9taXNlLnByb21pc2lmeTtcblxuY29uc3Qgc29ydGVkU2V0QWRkID0gcChkYi5zb3J0ZWRTZXRBZGQpO1xuY29uc3Qgc29ydGVkU2V0UmVtb3ZlID0gcChkYi5zb3J0ZWRTZXRSZW1vdmUpO1xuY29uc3QgZ2V0U29ydGVkU2V0UmFuZ2VCeVNjb3JlID0gcChkYi5nZXRTb3J0ZWRTZXRSYW5nZUJ5U2NvcmUpO1xuY29uc3Qgc2V0T2JqZWN0ID0gcChkYi5zZXRPYmplY3QpO1xuY29uc3QgZ2V0T2JqZWN0ID0gcChkYi5nZXRPYmplY3QpO1xuY29uc3QgZ2V0T2JqZWN0cyA9IHAoZGIuZ2V0T2JqZWN0cyk7XG5jb25zdCBkZWxldGVLZXkgPSBwKGRiLmRlbGV0ZSk7XG5jb25zdCBleGlzdHMgPSBwKGRiLmV4aXN0cyk7XG5jb25zdCBmaWx0ZXJQaWRzID0gcChwcml2aWxlZ2VzLnBvc3RzLmZpbHRlcik7XG5jb25zdCBmaXJlSG9vayA9IHAocGx1Z2lucy5maXJlSG9vayk7XG5jb25zdCBnZXRUb3BpY3NGaWVsZHMgPSBwKHRvcGljcy5nZXRUb3BpY3NGaWVsZHMpO1xuY29uc3QgZ2V0VG9waWNGaWVsZCA9IHAodG9waWNzLmdldFRvcGljRmllbGQpO1xuXG5jb25zdCBsaXN0S2V5ID0gJ3BsdWdpbnM6Y2FsZW5kYXI6ZXZlbnRzJztcblxuY29uc3Qgc2F2ZUV2ZW50ID0gZXZlbnQgPT4gUHJvbWlzZS5hbGwoW1xuICBzb3J0ZWRTZXRBZGQobGlzdEtleSwgZXZlbnQuc3RhcnREYXRlLCBgJHtsaXN0S2V5fTpwaWQ6JHtldmVudC5waWR9YCksXG4gIHNldE9iamVjdChgJHtsaXN0S2V5fTpwaWQ6JHtldmVudC5waWR9YCwgZXZlbnQpLFxuXSk7XG5cbmNvbnN0IGRlbGV0ZUV2ZW50ID0gcGlkID0+IFByb21pc2UuYWxsKFtcbiAgc29ydGVkU2V0UmVtb3ZlKGxpc3RLZXksIGAke2xpc3RLZXl9OnBpZDoke3BpZH1gKSxcbiAgZGVsZXRlS2V5KGAke2xpc3RLZXl9OnBpZDoke3BpZH1gKSxcbiAgcmVtb3ZlQWxsUmVzcG9uc2VzKHBpZCksXG5dKTtcblxuY29uc3QgZ2V0RXZlbnRzQnlEYXRlID0gYXN5bmMgKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkgPT4ge1xuICBjb25zdCBrZXlzID0gYXdhaXQgZ2V0U29ydGVkU2V0UmFuZ2VCeVNjb3JlKGxpc3RLZXksIDAsIC0xLCBzdGFydERhdGUsIGVuZERhdGUpO1xuICBjb25zdCBldmVudHMgPSBhd2FpdCBnZXRPYmplY3RzKGtleXMpO1xuXG4gIGNvbnN0IHRvcGljc1dpdGhDaWRzID0gYXdhaXQgZ2V0VG9waWNzRmllbGRzKGV2ZW50cy5tYXAoZXYgPT4gZXYudGlkKSwgWydjaWQnXSk7XG5cbiAgcmV0dXJuIGV2ZW50cy5tYXAoKGV2LCBpKSA9PiAoe1xuICAgIC4uLmV2LFxuICAgIGNpZDogdG9waWNzV2l0aENpZHNbaV0uY2lkLFxuICB9KSk7XG59O1xuXG5jb25zdCBldmVudEV4aXN0cyA9IHBpZCA9PiBleGlzdHMoYCR7bGlzdEtleX06cGlkOiR7cGlkfWApO1xuXG5jb25zdCBnZXRFdmVudCA9IGFzeW5jIHBpZCA9PiB7XG4gIGNvbnN0IGV2ZW50ID0gYXdhaXQgZ2V0T2JqZWN0KGAke2xpc3RLZXl9OnBpZDoke3BpZH1gKTtcbiAgY29uc3QgeyBjaWQgfSA9IGF3YWl0IGdldFRvcGljRmllbGQoZXZlbnQudGlkLCAnY2lkJyk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5ldmVudCxcbiAgICBjaWQsXG4gIH07XG59O1xuXG5jb25zdCBmaWx0ZXJCeVBpZCA9IChldmVudHMsIHVpZCkgPT5cbiAgZmlsdGVyUGlkcygncmVhZCcsIGV2ZW50cy5tYXAoZSA9PiBlLnBpZCksIHVpZClcbiAgLnRoZW4oZmlsdGVyZWQgPT4gZXZlbnRzLmZpbHRlcihlID0+IGZpbHRlcmVkLmluY2x1ZGVzKGUucGlkKSkpO1xuXG5jb25zdCBlc2NhcGVFdmVudCA9IGFzeW5jIGV2ZW50ID0+IHtcbiAgY29uc3QgW2xvY2F0aW9uLCBkZXNjcmlwdGlvbl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgZmlyZUhvb2soJ2ZpbHRlcjpwYXJzZS5yYXcnLCBldmVudC5sb2NhdGlvbiksXG4gICAgZmlyZUhvb2soJ2ZpbHRlcjpwYXJzZS5yYXcnLCBldmVudC5kZXNjcmlwdGlvbiksXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgLi4uZXZlbnQsXG4gICAgbG9jYXRpb24sXG4gICAgZGVzY3JpcHRpb24sXG4gIH07XG59O1xuXG5leHBvcnQge1xuICBkZWxldGVFdmVudCxcbiAgc2F2ZUV2ZW50LFxuICBldmVudEV4aXN0cyxcbiAgZ2V0RXZlbnQsXG4gIGdldEV2ZW50c0J5RGF0ZSxcbiAgZmlsdGVyQnlQaWQsXG4gIGVzY2FwZUV2ZW50LFxufTtcbiJdfQ==