'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeEvent = exports.filterByPid = exports.getEventsByDate = exports.getEvent = exports.eventExists = exports.saveEvent = exports.deleteEvent = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _responses = require('./responses');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const db = require.main.require('./src/database');
const privileges = require.main.require('./src/privileges');
const plugins = require.main.require('./src/plugins');
const posts = require.main.require('./src/posts');

const p = _bluebird2.default.promisify;

const sortedSetAdd = p(db.sortedSetAdd);
const sortedSetRemove = p(db.sortedSetRemove);
const getSortedSetRangeByScore = p(db.getSortedSetRangeByScore);
const setObject = p(db.setObject);
const getObject = p(db.getObject);
const getObjects = p(db.getObjects);
const deleteKey = p(db.delete);
const exists = p(db.exists);
const filterPids = p(privileges.posts.filter);
const fireHook = p(plugins.fireHook);
const getCidsByPids = p(posts.getCidsByPids);
const getCidByPid = p(posts.getCidByPid);

const listKey = 'plugins:calendar:events';

const saveEvent = event => _bluebird2.default.all([sortedSetAdd(listKey, event.startDate, `${ listKey }:pid:${ event.pid }`), setObject(`${ listKey }:pid:${ event.pid }`, event)]);

const deleteEvent = pid => _bluebird2.default.all([sortedSetRemove(listKey, `${ listKey }:pid:${ pid }`), deleteKey(`${ listKey }:pid:${ pid }`), (0, _responses.removeAll)(pid)]);

const getEventsByDate = (() => {
  var ref = (0, _bluebird.coroutine)(function* (startDate, endDate) {
    const keys = yield getSortedSetRangeByScore(listKey, 0, -1, startDate, endDate);
    const events = yield getObjects(keys);

    const cids = yield getCidsByPids(events.map(function (event) {
      return event.pid;
    }));

    return events.map(function (event, i) {
      return (0, _extends3.default)({}, event, {
        cid: cids[i]
      });
    });
  });
  return function getEventsByDate(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

const eventExists = pid => exists(`${ listKey }:pid:${ pid }`);

const getEvent = (() => {
  var ref = (0, _bluebird.coroutine)(function* (pid) {
    const event = yield getObject(`${ listKey }:pid:${ pid }`);
    const cid = yield getCidByPid(event.pid);

    return (0, _extends3.default)({}, event, {
      cid: cid
    });
  });
  return function getEvent(_x3) {
    return ref.apply(this, arguments);
  };
})();

const filterByPid = (events, uid) => filterPids('read', events.map(e => e.pid), uid).then(filtered => events.filter(e => filtered.includes(e.pid)));

const escapeEvent = (() => {
  var ref = (0, _bluebird.coroutine)(function* (event) {
    var _ref = yield _bluebird2.default.all([fireHook('filter:parse.raw', event.location), fireHook('filter:parse.raw', event.description)]);

    var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

    const location = _ref2[0];
    const description = _ref2[1];


    return (0, _extends3.default)({}, event, {
      location: location,
      description: description
    });
  });
  return function escapeEvent(_x4) {
    return ref.apply(this, arguments);
  };
})();

exports.deleteEvent = deleteEvent;
exports.saveEvent = saveEvent;
exports.eventExists = eventExists;
exports.getEvent = getEvent;
exports.getEventsByDate = getEventsByDate;
exports.filterByPid = filterByPid;
exports.escapeEvent = escapeEvent;
//# sourceMappingURL=data:application/json;base64,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Uks7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztBQVVBLE1BQU0sY0FBYyxDQUFDLE1BQUQsRUFBUyxHQUFULEtBQ2xCLFdBQVcsTUFBWCxFQUFtQixPQUFPLEdBQVAsQ0FBVyxLQUFLLEVBQUUsR0FBbEIsQ0FBbkIsRUFBMkMsR0FBM0MsRUFDQyxJQURELENBQ00sWUFBWSxPQUFPLE1BQVAsQ0FBYyxLQUFLLFNBQVMsUUFBVCxDQUFrQixFQUFFLEdBQXBCLENBQW5CLENBRGxCLENBREY7O0FBSUEsTUFBTTtBQUFBLHFDQUFjLFdBQU0sS0FBTixFQUFlO0FBQUEsZUFDRCxNQUFNLG1CQUFRLEdBQVIsQ0FBWSxDQUNoRCxTQUFTLGtCQUFULEVBQTZCLE1BQU0sUUFBbkMsQ0FEZ0QsRUFFaEQsU0FBUyxrQkFBVCxFQUE2QixNQUFNLFdBQW5DLENBRmdELENBQVosQ0FETDs7QUFBQTs7QUFBQSxVQUMxQixRQUQwQjtBQUFBLFVBQ2hCLFdBRGdCOzs7QUFNakMsc0NBQ0ssS0FETDtBQUVFLHdCQUZGO0FBR0U7QUFIRjtBQUtELEdBWEs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOztRQWNFLFcsR0FBQSxXO1FBQ0EsUyxHQUFBLFM7UUFDQSxXLEdBQUEsVztRQUNBLFEsR0FBQSxRO1FBQ0EsZSxHQUFBLGU7UUFDQSxXLEdBQUEsVztRQUNBLFcsR0FBQSxXIiwiZmlsZSI6ImV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGIgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvZGF0YWJhc2UnKTtcbmNvbnN0IHByaXZpbGVnZXMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvcHJpdmlsZWdlcycpO1xuY29uc3QgcGx1Z2lucyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9wbHVnaW5zJyk7XG5jb25zdCBwb3N0cyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9wb3N0cycpO1xuXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyByZW1vdmVBbGwgYXMgcmVtb3ZlQWxsUmVzcG9uc2VzIH0gZnJvbSAnLi9yZXNwb25zZXMnO1xuXG5jb25zdCBwID0gUHJvbWlzZS5wcm9taXNpZnk7XG5cbmNvbnN0IHNvcnRlZFNldEFkZCA9IHAoZGIuc29ydGVkU2V0QWRkKTtcbmNvbnN0IHNvcnRlZFNldFJlbW92ZSA9IHAoZGIuc29ydGVkU2V0UmVtb3ZlKTtcbmNvbnN0IGdldFNvcnRlZFNldFJhbmdlQnlTY29yZSA9IHAoZGIuZ2V0U29ydGVkU2V0UmFuZ2VCeVNjb3JlKTtcbmNvbnN0IHNldE9iamVjdCA9IHAoZGIuc2V0T2JqZWN0KTtcbmNvbnN0IGdldE9iamVjdCA9IHAoZGIuZ2V0T2JqZWN0KTtcbmNvbnN0IGdldE9iamVjdHMgPSBwKGRiLmdldE9iamVjdHMpO1xuY29uc3QgZGVsZXRlS2V5ID0gcChkYi5kZWxldGUpO1xuY29uc3QgZXhpc3RzID0gcChkYi5leGlzdHMpO1xuY29uc3QgZmlsdGVyUGlkcyA9IHAocHJpdmlsZWdlcy5wb3N0cy5maWx0ZXIpO1xuY29uc3QgZmlyZUhvb2sgPSBwKHBsdWdpbnMuZmlyZUhvb2spO1xuY29uc3QgZ2V0Q2lkc0J5UGlkcyA9IHAocG9zdHMuZ2V0Q2lkc0J5UGlkcyk7XG5jb25zdCBnZXRDaWRCeVBpZCA9IHAocG9zdHMuZ2V0Q2lkQnlQaWQpO1xuXG5jb25zdCBsaXN0S2V5ID0gJ3BsdWdpbnM6Y2FsZW5kYXI6ZXZlbnRzJztcblxuY29uc3Qgc2F2ZUV2ZW50ID0gZXZlbnQgPT4gUHJvbWlzZS5hbGwoW1xuICBzb3J0ZWRTZXRBZGQobGlzdEtleSwgZXZlbnQuc3RhcnREYXRlLCBgJHtsaXN0S2V5fTpwaWQ6JHtldmVudC5waWR9YCksXG4gIHNldE9iamVjdChgJHtsaXN0S2V5fTpwaWQ6JHtldmVudC5waWR9YCwgZXZlbnQpLFxuXSk7XG5cbmNvbnN0IGRlbGV0ZUV2ZW50ID0gcGlkID0+IFByb21pc2UuYWxsKFtcbiAgc29ydGVkU2V0UmVtb3ZlKGxpc3RLZXksIGAke2xpc3RLZXl9OnBpZDoke3BpZH1gKSxcbiAgZGVsZXRlS2V5KGAke2xpc3RLZXl9OnBpZDoke3BpZH1gKSxcbiAgcmVtb3ZlQWxsUmVzcG9uc2VzKHBpZCksXG5dKTtcblxuY29uc3QgZ2V0RXZlbnRzQnlEYXRlID0gYXN5bmMgKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkgPT4ge1xuICBjb25zdCBrZXlzID0gYXdhaXQgZ2V0U29ydGVkU2V0UmFuZ2VCeVNjb3JlKGxpc3RLZXksIDAsIC0xLCBzdGFydERhdGUsIGVuZERhdGUpO1xuICBjb25zdCBldmVudHMgPSBhd2FpdCBnZXRPYmplY3RzKGtleXMpO1xuXG4gIGNvbnN0IGNpZHMgPSBhd2FpdCBnZXRDaWRzQnlQaWRzKGV2ZW50cy5tYXAoZXZlbnQgPT4gZXZlbnQucGlkKSk7XG5cbiAgcmV0dXJuIGV2ZW50cy5tYXAoKGV2ZW50LCBpKSA9PiAoe1xuICAgIC4uLmV2ZW50LFxuICAgIGNpZDogY2lkc1tpXSxcbiAgfSkpO1xufTtcblxuY29uc3QgZXZlbnRFeGlzdHMgPSBwaWQgPT4gZXhpc3RzKGAke2xpc3RLZXl9OnBpZDoke3BpZH1gKTtcblxuY29uc3QgZ2V0RXZlbnQgPSBhc3luYyBwaWQgPT4ge1xuICBjb25zdCBldmVudCA9IGF3YWl0IGdldE9iamVjdChgJHtsaXN0S2V5fTpwaWQ6JHtwaWR9YCk7XG4gIGNvbnN0IGNpZCA9IGF3YWl0IGdldENpZEJ5UGlkKGV2ZW50LnBpZCk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5ldmVudCxcbiAgICBjaWQsXG4gIH07XG59O1xuXG5jb25zdCBmaWx0ZXJCeVBpZCA9IChldmVudHMsIHVpZCkgPT5cbiAgZmlsdGVyUGlkcygncmVhZCcsIGV2ZW50cy5tYXAoZSA9PiBlLnBpZCksIHVpZClcbiAgLnRoZW4oZmlsdGVyZWQgPT4gZXZlbnRzLmZpbHRlcihlID0+IGZpbHRlcmVkLmluY2x1ZGVzKGUucGlkKSkpO1xuXG5jb25zdCBlc2NhcGVFdmVudCA9IGFzeW5jIGV2ZW50ID0+IHtcbiAgY29uc3QgW2xvY2F0aW9uLCBkZXNjcmlwdGlvbl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgZmlyZUhvb2soJ2ZpbHRlcjpwYXJzZS5yYXcnLCBldmVudC5sb2NhdGlvbiksXG4gICAgZmlyZUhvb2soJ2ZpbHRlcjpwYXJzZS5yYXcnLCBldmVudC5kZXNjcmlwdGlvbiksXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgLi4uZXZlbnQsXG4gICAgbG9jYXRpb24sXG4gICAgZGVzY3JpcHRpb24sXG4gIH07XG59O1xuXG5leHBvcnQge1xuICBkZWxldGVFdmVudCxcbiAgc2F2ZUV2ZW50LFxuICBldmVudEV4aXN0cyxcbiAgZ2V0RXZlbnQsXG4gIGdldEV2ZW50c0J5RGF0ZSxcbiAgZmlsdGVyQnlQaWQsXG4gIGVzY2FwZUV2ZW50LFxufTtcbiJdfQ==