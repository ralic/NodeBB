'use strict';

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _responses = require('./responses');

var _event = require('./event');

var _privileges = require('./privileges');

var _template = require('./template');

var _template2 = _interopRequireDefault(_template);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const privileges = require.main.require('./src/privileges');
const pluginSockets = require.main.require('./src/socket.io/plugins');
const translator = require.main.require('./public/src/modules/translator');
const user = require.main.require('./src/user');
const meta = require.main.require('./src/meta');

const p = _bluebird2.default.promisify;

const getUserSettings = p(user.getSettings);
const translate = p((text, language, callback) => {
  translator.translate(text, language, content => callback(null, content));
});

const perm = 'plugin-calendar:event:post';

pluginSockets.calendar = {};
pluginSockets.calendar.canPostEvent = (_ref, _ref2, cb) => {
  let uid = _ref.uid;
  let pid = _ref2.pid;
  let tid = _ref2.tid;
  let cid = _ref2.cid;

  if (!uid) {
    cb(null, false);
    return;
  }
  if (pid) {
    privileges.posts.can(perm, pid, uid, cb);
    return;
  }
  if (tid) {
    privileges.topics.can(perm, tid, uid, cb);
    return;
  }
  if (cid) {
    privileges.categories.can(perm, cid, uid, cb);
    return;
  }
  cb(null, false);
};

pluginSockets.calendar.getResponses = (_ref3, pid, cb) => {
  let uid = _ref3.uid;

  (0, _responses.getAll)({ pid: pid, uid: uid }).asCallback(cb);
};

pluginSockets.calendar.submitResponse = (_ref4, _ref5, cb) => {
  let uid = _ref4.uid;
  let pid = _ref5.pid;
  let value = _ref5.value;

  (0, _responses.submitResponse)({ uid: uid, pid: pid, value: value }).asCallback(cb);
};

pluginSockets.calendar.getUserResponse = (_ref6, pid, cb) => {
  let uid = _ref6.uid;

  (0, _responses.getUserResponse)({ uid: uid, pid: pid }).asCallback(cb);
};

pluginSockets.calendar.getEventsByDate = (_ref7, _ref8, cb) => {
  let uid = _ref7.uid;
  let startDate = _ref8.startDate;
  let endDate = _ref8.endDate;
  return (0, _bluebird.coroutine)(function* () {
    const events = yield (0, _event.getEventsByDate)(startDate, endDate);
    const filtered = yield (0, _event.filterByPid)(events, uid);
    const escaped = yield _bluebird2.default.all(filtered.map(_event.escapeEvent));

    return escaped;
  })().asCallback(cb);
};

pluginSockets.calendar.getParsedEvent = (_ref9, pid, cb) => {
  let uid = _ref9.uid;

  (0, _bluebird.coroutine)(function* () {
    const can = yield (0, _privileges.canViewPost)(pid, uid);
    if (!can) {
      throw new Error('[[error:no-privileges]]');
    }

    const event = yield (0, _event.getEvent)(pid);
    const parsed = yield (0, _event.escapeEvent)(event);
    const lang = (yield getUserSettings(uid)).userLang || meta.config.defaultLang;
    const content = yield translate((0, _template2.default)(parsed), lang);

    return { parsed: parsed, content: content };
  })().asCallback(cb);
};
//# sourceMappingURL=data:application/json;base64,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c3QgcHJpdmlsZWdlcyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9wcml2aWxlZ2VzJyk7XG5jb25zdCBwbHVnaW5Tb2NrZXRzID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3NvY2tldC5pby9wbHVnaW5zJyk7XG5jb25zdCB0cmFuc2xhdG9yID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vcHVibGljL3NyYy9tb2R1bGVzL3RyYW5zbGF0b3InKTtcbmNvbnN0IHVzZXIgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvdXNlcicpO1xuY29uc3QgbWV0YSA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9tZXRhJyk7XG5cbmltcG9ydCB7IGdldEFsbCBhcyBnZXRBbGxSZXNwb25zZXMsIHN1Ym1pdFJlc3BvbnNlLCBnZXRVc2VyUmVzcG9uc2UgfSBmcm9tICcuL3Jlc3BvbnNlcyc7XG5pbXBvcnQgeyBnZXRFdmVudHNCeURhdGUsIGZpbHRlckJ5UGlkLCBlc2NhcGVFdmVudCwgZ2V0RXZlbnQgfSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCB7IGNhblZpZXdQb3N0IH0gZnJvbSAnLi9wcml2aWxlZ2VzJztcbmltcG9ydCBwb3N0VGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5cbmNvbnN0IHAgPSBQcm9taXNlLnByb21pc2lmeTtcblxuY29uc3QgZ2V0VXNlclNldHRpbmdzID0gcCh1c2VyLmdldFNldHRpbmdzKTtcbmNvbnN0IHRyYW5zbGF0ZSA9IHAoKHRleHQsIGxhbmd1YWdlLCBjYWxsYmFjaykgPT4ge1xuICB0cmFuc2xhdG9yLnRyYW5zbGF0ZSh0ZXh0LCBsYW5ndWFnZSwgY29udGVudCA9PiBjYWxsYmFjayhudWxsLCBjb250ZW50KSk7XG59KTtcblxuY29uc3QgcGVybSA9ICdwbHVnaW4tY2FsZW5kYXI6ZXZlbnQ6cG9zdCc7XG5cbnBsdWdpblNvY2tldHMuY2FsZW5kYXIgPSB7fTtcbnBsdWdpblNvY2tldHMuY2FsZW5kYXIuY2FuUG9zdEV2ZW50ID0gKHsgdWlkIH0sIHsgcGlkLCB0aWQsIGNpZCB9LCBjYikgPT4ge1xuICBpZiAoIXVpZCkge1xuICAgIGNiKG51bGwsIGZhbHNlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBpZCkge1xuICAgIHByaXZpbGVnZXMucG9zdHMuY2FuKHBlcm0sIHBpZCwgdWlkLCBjYik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0aWQpIHtcbiAgICBwcml2aWxlZ2VzLnRvcGljcy5jYW4ocGVybSwgdGlkLCB1aWQsIGNiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGNpZCkge1xuICAgIHByaXZpbGVnZXMuY2F0ZWdvcmllcy5jYW4ocGVybSwgY2lkLCB1aWQsIGNiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY2IobnVsbCwgZmFsc2UpO1xufTtcblxucGx1Z2luU29ja2V0cy5jYWxlbmRhci5nZXRSZXNwb25zZXMgPSAoeyB1aWQgfSwgcGlkLCBjYikgPT4ge1xuICBnZXRBbGxSZXNwb25zZXMoeyBwaWQsIHVpZCB9KS5hc0NhbGxiYWNrKGNiKTtcbn07XG5cbnBsdWdpblNvY2tldHMuY2FsZW5kYXIuc3VibWl0UmVzcG9uc2UgPSAoeyB1aWQgfSwgeyBwaWQsIHZhbHVlIH0sIGNiKSA9PiB7XG4gIHN1Ym1pdFJlc3BvbnNlKHsgdWlkLCBwaWQsIHZhbHVlIH0pLmFzQ2FsbGJhY2soY2IpO1xufTtcblxucGx1Z2luU29ja2V0cy5jYWxlbmRhci5nZXRVc2VyUmVzcG9uc2UgPSAoeyB1aWQgfSwgcGlkLCBjYikgPT4ge1xuICBnZXRVc2VyUmVzcG9uc2UoeyB1aWQsIHBpZCB9KS5hc0NhbGxiYWNrKGNiKTtcbn07XG5cbnBsdWdpblNvY2tldHMuY2FsZW5kYXIuZ2V0RXZlbnRzQnlEYXRlID0gKHsgdWlkIH0sIHsgc3RhcnREYXRlLCBlbmREYXRlIH0sIGNiKSA9PlxuICAoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldEV2ZW50c0J5RGF0ZShzdGFydERhdGUsIGVuZERhdGUpO1xuICAgIGNvbnN0IGZpbHRlcmVkID0gYXdhaXQgZmlsdGVyQnlQaWQoZXZlbnRzLCB1aWQpO1xuICAgIGNvbnN0IGVzY2FwZWQgPSBhd2FpdCBQcm9taXNlLmFsbChmaWx0ZXJlZC5tYXAoZXNjYXBlRXZlbnQpKTtcblxuICAgIHJldHVybiBlc2NhcGVkO1xuICB9KSgpLmFzQ2FsbGJhY2soY2IpO1xuXG5wbHVnaW5Tb2NrZXRzLmNhbGVuZGFyLmdldFBhcnNlZEV2ZW50ID0gKHsgdWlkIH0sIHBpZCwgY2IpID0+IHtcbiAgKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjYW4gPSBhd2FpdCBjYW5WaWV3UG9zdChwaWQsIHVpZCk7XG4gICAgaWYgKCFjYW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1tlcnJvcjpuby1wcml2aWxlZ2VzXV0nKTtcbiAgICB9XG5cbiAgICBjb25zdCBldmVudCA9IGF3YWl0IGdldEV2ZW50KHBpZCk7XG4gICAgY29uc3QgcGFyc2VkID0gYXdhaXQgZXNjYXBlRXZlbnQoZXZlbnQpO1xuICAgIGNvbnN0IGxhbmcgPSAoYXdhaXQgZ2V0VXNlclNldHRpbmdzKHVpZCkpLnVzZXJMYW5nIHx8IG1ldGEuY29uZmlnLmRlZmF1bHRMYW5nO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0cmFuc2xhdGUocG9zdFRlbXBsYXRlKHBhcnNlZCksIGxhbmcpO1xuXG4gICAgcmV0dXJuIHsgcGFyc2VkLCBjb250ZW50IH07XG4gIH0pKCkuYXNDYWxsYmFjayhjYik7XG59O1xuIl19