'use strict';

var _bluebird = require('bluebird');

var _responses = require('./responses');

var _event = require('./event');

const privileges = require.main.require('./src/privileges');
const pluginSockets = require.main.require('./src/socket.io/plugins');

const perm = 'plugin-calendar:event:post';

pluginSockets.calendar = {};
pluginSockets.calendar.canPostEvent = (_ref, _ref2, cb) => {
  let uid = _ref.uid;
  let pid = _ref2.pid;
  let tid = _ref2.tid;
  let cid = _ref2.cid;

  if (!uid) {
    cb(null, false);
    return;
  }
  if (pid) {
    privileges.posts.can(perm, pid, uid, cb);
    return;
  }
  if (tid) {
    privileges.topics.can(perm, tid, uid, cb);
    return;
  }
  if (cid) {
    privileges.categories.can(perm, cid, uid, cb);
    return;
  }
  cb(null, false);
};

pluginSockets.calendar.getResponses = (_ref3, pid, cb) => {
  let uid = _ref3.uid;

  (0, _responses.getAll)({ pid: pid, uid: uid }).asCallback(cb);
};

pluginSockets.calendar.submitResponse = (_ref4, _ref5, cb) => {
  let uid = _ref4.uid;
  let pid = _ref5.pid;
  let value = _ref5.value;

  (0, _responses.submitResponse)({ uid: uid, pid: pid, value: value }).asCallback(cb);
};

pluginSockets.calendar.getUserResponse = (_ref6, pid, cb) => {
  let uid = _ref6.uid;

  (0, _responses.getUserResponse)({ uid: uid, pid: pid }).asCallback(cb);
};

// pluginSockets.calendar.getCategoryColors = ({ uid }, cb) => (async () => {
//   const cats = await getAllCategoryFields(['cid', 'bgColor']);
//   const filtered = await filterCids('read', cats.map(c => c.cid), uid);
//
//   return cats.filter(c => filtered.includes(c.cid));
// })().asCallback(cb);

pluginSockets.calendar.getEventsByDate = (_ref7, _ref8, cb) => {
  let uid = _ref7.uid;
  let startDate = _ref8.startDate;
  let endDate = _ref8.endDate;
  return (0, _bluebird.coroutine)(function* () {
    const events = yield (0, _event.getEventsByDate)(startDate, endDate);
    const filtered = yield (0, _event.filterByPid)(events, uid);
    const escaped = yield Promise.all(filtered.map(_event.escapeEvent));

    return escaped;
  })().asCallback(cb);
};
//# sourceMappingURL=data:application/json;base64,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dmlsZWdlcyA9IHJlcXVpcmUubWFpbi5yZXF1aXJlKCcuL3NyYy9wcml2aWxlZ2VzJyk7XG5jb25zdCBwbHVnaW5Tb2NrZXRzID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3NvY2tldC5pby9wbHVnaW5zJyk7XG5cbmltcG9ydCB7IGdldEFsbCBhcyBnZXRBbGxSZXNwb25zZXMsIHN1Ym1pdFJlc3BvbnNlLCBnZXRVc2VyUmVzcG9uc2UgfSBmcm9tICcuL3Jlc3BvbnNlcyc7XG5pbXBvcnQgeyBnZXRFdmVudHNCeURhdGUsIGZpbHRlckJ5UGlkLCBlc2NhcGVFdmVudCB9IGZyb20gJy4vZXZlbnQnO1xuXG5jb25zdCBwZXJtID0gJ3BsdWdpbi1jYWxlbmRhcjpldmVudDpwb3N0JztcblxucGx1Z2luU29ja2V0cy5jYWxlbmRhciA9IHt9O1xucGx1Z2luU29ja2V0cy5jYWxlbmRhci5jYW5Qb3N0RXZlbnQgPSAoeyB1aWQgfSwgeyBwaWQsIHRpZCwgY2lkIH0sIGNiKSA9PiB7XG4gIGlmICghdWlkKSB7XG4gICAgY2IobnVsbCwgZmFsc2UpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGlkKSB7XG4gICAgcHJpdmlsZWdlcy5wb3N0cy5jYW4ocGVybSwgcGlkLCB1aWQsIGNiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHRpZCkge1xuICAgIHByaXZpbGVnZXMudG9waWNzLmNhbihwZXJtLCB0aWQsIHVpZCwgY2IpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoY2lkKSB7XG4gICAgcHJpdmlsZWdlcy5jYXRlZ29yaWVzLmNhbihwZXJtLCBjaWQsIHVpZCwgY2IpO1xuICAgIHJldHVybjtcbiAgfVxuICBjYihudWxsLCBmYWxzZSk7XG59O1xuXG5wbHVnaW5Tb2NrZXRzLmNhbGVuZGFyLmdldFJlc3BvbnNlcyA9ICh7IHVpZCB9LCBwaWQsIGNiKSA9PiB7XG4gIGdldEFsbFJlc3BvbnNlcyh7IHBpZCwgdWlkIH0pLmFzQ2FsbGJhY2soY2IpO1xufTtcblxucGx1Z2luU29ja2V0cy5jYWxlbmRhci5zdWJtaXRSZXNwb25zZSA9ICh7IHVpZCB9LCB7IHBpZCwgdmFsdWUgfSwgY2IpID0+IHtcbiAgc3VibWl0UmVzcG9uc2UoeyB1aWQsIHBpZCwgdmFsdWUgfSkuYXNDYWxsYmFjayhjYik7XG59O1xuXG5wbHVnaW5Tb2NrZXRzLmNhbGVuZGFyLmdldFVzZXJSZXNwb25zZSA9ICh7IHVpZCB9LCBwaWQsIGNiKSA9PiB7XG4gIGdldFVzZXJSZXNwb25zZSh7IHVpZCwgcGlkIH0pLmFzQ2FsbGJhY2soY2IpO1xufTtcblxuLy8gcGx1Z2luU29ja2V0cy5jYWxlbmRhci5nZXRDYXRlZ29yeUNvbG9ycyA9ICh7IHVpZCB9LCBjYikgPT4gKGFzeW5jICgpID0+IHtcbi8vICAgY29uc3QgY2F0cyA9IGF3YWl0IGdldEFsbENhdGVnb3J5RmllbGRzKFsnY2lkJywgJ2JnQ29sb3InXSk7XG4vLyAgIGNvbnN0IGZpbHRlcmVkID0gYXdhaXQgZmlsdGVyQ2lkcygncmVhZCcsIGNhdHMubWFwKGMgPT4gYy5jaWQpLCB1aWQpO1xuLy9cbi8vICAgcmV0dXJuIGNhdHMuZmlsdGVyKGMgPT4gZmlsdGVyZWQuaW5jbHVkZXMoYy5jaWQpKTtcbi8vIH0pKCkuYXNDYWxsYmFjayhjYik7XG5cbnBsdWdpblNvY2tldHMuY2FsZW5kYXIuZ2V0RXZlbnRzQnlEYXRlID0gKHsgdWlkIH0sIHsgc3RhcnREYXRlLCBlbmREYXRlIH0sIGNiKSA9PlxuICAoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldEV2ZW50c0J5RGF0ZShzdGFydERhdGUsIGVuZERhdGUpO1xuICAgIGNvbnN0IGZpbHRlcmVkID0gYXdhaXQgZmlsdGVyQnlQaWQoZXZlbnRzLCB1aWQpO1xuICAgIGNvbnN0IGVzY2FwZWQgPSBhd2FpdCBQcm9taXNlLmFsbChmaWx0ZXJlZC5tYXAoZXNjYXBlRXZlbnQpKTtcblxuICAgIHJldHVybiBlc2NhcGVkO1xuICB9KSgpLmFzQ2FsbGJhY2soY2IpO1xuIl19