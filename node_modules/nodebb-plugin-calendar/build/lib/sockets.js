'use strict';

var _bluebird = require('bluebird');

var _responses = require('./responses');

var _event = require('./event');

const privileges = require.main.require('./src/privileges');
const pluginSockets = require.main.require('./src/socket.io/plugins');

const perm = 'plugin-calendar:event:post';

pluginSockets.calendar = {};
pluginSockets.calendar.canPostEvent = ({ uid }, { pid, tid, cid }, cb) => {
  if (!uid) {
    cb(null, false);
    return;
  }
  if (pid) {
    privileges.posts.can(perm, pid, uid, cb);
    return;
  }
  if (tid) {
    privileges.topics.can(perm, tid, uid, cb);
    return;
  }
  if (cid) {
    privileges.categories.can(perm, cid, uid, cb);
    return;
  }
  cb(null, false);
};

pluginSockets.calendar.getResponses = ({ uid }, pid, cb) => {
  (0, _responses.getAll)({ pid, uid }).asCallback(cb);
};

pluginSockets.calendar.submitResponse = ({ uid }, { pid, value }, cb) => {
  (0, _responses.submitResponse)({ uid, pid, value }).asCallback(cb);
};

pluginSockets.calendar.getUserResponse = ({ uid }, pid, cb) => {
  (0, _responses.getUserResponse)({ uid, pid }).asCallback(cb);
};

// pluginSockets.calendar.getCategoryColors = ({ uid }, cb) => (async () => {
//   const cats = await getAllCategoryFields(['cid', 'bgColor']);
//   const filtered = await filterCids('read', cats.map(c => c.cid), uid);
//
//   return cats.filter(c => filtered.includes(c.cid));
// })().asCallback(cb);

pluginSockets.calendar.getEventsByDate = ({ uid }, { startDate, endDate }, cb) => (0, _bluebird.coroutine)(function* () {
  const events = yield (0, _event.getEventsByDate)(startDate, endDate);
  const filtered = yield (0, _event.filterByPid)(events, uid);
  const escaped = yield Promise.all(filtered.map(_event.escapeEvent));

  return escaped;
})().asCallback(cb);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvc29ja2V0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR0E7O0FBQ0E7O0FBSkEsTUFBTSxhQUFhLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsa0JBQXJCLENBQW5CO0FBQ0EsTUFBTSxnQkFBZ0IsUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQix5QkFBckIsQ0FBdEI7O0FBS0EsTUFBTSxPQUFPLDRCQUFiOztBQUVBLGNBQWMsUUFBZCxHQUF5QixFQUF6QjtBQUNBLGNBQWMsUUFBZCxDQUF1QixZQUF2QixHQUFzQyxDQUFDLEVBQUUsR0FBRixFQUFELEVBQVUsRUFBRSxHQUFGLEVBQU8sR0FBUCxFQUFZLEdBQVosRUFBVixFQUE2QixFQUE3QixLQUFvQztBQUN4RSxNQUFJLENBQUMsR0FBTCxFQUFVO0FBQ1IsT0FBRyxJQUFILEVBQVMsS0FBVDtBQUNBO0FBQ0Q7QUFDRCxNQUFJLEdBQUosRUFBUztBQUNQLGVBQVcsS0FBWCxDQUFpQixHQUFqQixDQUFxQixJQUFyQixFQUEyQixHQUEzQixFQUFnQyxHQUFoQyxFQUFxQyxFQUFyQztBQUNBO0FBQ0Q7QUFDRCxNQUFJLEdBQUosRUFBUztBQUNQLGVBQVcsTUFBWCxDQUFrQixHQUFsQixDQUFzQixJQUF0QixFQUE0QixHQUE1QixFQUFpQyxHQUFqQyxFQUFzQyxFQUF0QztBQUNBO0FBQ0Q7QUFDRCxNQUFJLEdBQUosRUFBUztBQUNQLGVBQVcsVUFBWCxDQUFzQixHQUF0QixDQUEwQixJQUExQixFQUFnQyxHQUFoQyxFQUFxQyxHQUFyQyxFQUEwQyxFQUExQztBQUNBO0FBQ0Q7QUFDRCxLQUFHLElBQUgsRUFBUyxLQUFUO0FBQ0QsQ0FsQkQ7O0FBb0JBLGNBQWMsUUFBZCxDQUF1QixZQUF2QixHQUFzQyxDQUFDLEVBQUUsR0FBRixFQUFELEVBQVUsR0FBVixFQUFlLEVBQWYsS0FBc0I7QUFDMUQseUJBQWdCLEVBQUUsR0FBRixFQUFPLEdBQVAsRUFBaEIsRUFBOEIsVUFBOUIsQ0FBeUMsRUFBekM7QUFDRCxDQUZEOztBQUlBLGNBQWMsUUFBZCxDQUF1QixjQUF2QixHQUF3QyxDQUFDLEVBQUUsR0FBRixFQUFELEVBQVUsRUFBRSxHQUFGLEVBQU8sS0FBUCxFQUFWLEVBQTBCLEVBQTFCLEtBQWlDO0FBQ3ZFLGlDQUFlLEVBQUUsR0FBRixFQUFPLEdBQVAsRUFBWSxLQUFaLEVBQWYsRUFBb0MsVUFBcEMsQ0FBK0MsRUFBL0M7QUFDRCxDQUZEOztBQUlBLGNBQWMsUUFBZCxDQUF1QixlQUF2QixHQUF5QyxDQUFDLEVBQUUsR0FBRixFQUFELEVBQVUsR0FBVixFQUFlLEVBQWYsS0FBc0I7QUFDN0Qsa0NBQWdCLEVBQUUsR0FBRixFQUFPLEdBQVAsRUFBaEIsRUFBOEIsVUFBOUIsQ0FBeUMsRUFBekM7QUFDRCxDQUZEOzs7Ozs7Ozs7QUFXQSxjQUFjLFFBQWQsQ0FBdUIsZUFBdkIsR0FBeUMsQ0FBQyxFQUFFLEdBQUYsRUFBRCxFQUFVLEVBQUUsU0FBRixFQUFhLE9BQWIsRUFBVixFQUFrQyxFQUFsQyxLQUN2Qyx5QkFBQyxhQUFZO0FBQ1gsUUFBTSxTQUFTLE1BQU0sNEJBQWdCLFNBQWhCLEVBQTJCLE9BQTNCLENBQXJCO0FBQ0EsUUFBTSxXQUFXLE1BQU0sd0JBQVksTUFBWixFQUFvQixHQUFwQixDQUF2QjtBQUNBLFFBQU0sVUFBVSxNQUFNLFFBQVEsR0FBUixDQUFZLFNBQVMsR0FBVCxvQkFBWixDQUF0Qjs7QUFFQSxTQUFPLE9BQVA7QUFDRCxDQU5ELElBTUssVUFOTCxDQU1nQixFQU5oQixDQURGIiwiZmlsZSI6InNvY2tldHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwcml2aWxlZ2VzID0gcmVxdWlyZS5tYWluLnJlcXVpcmUoJy4vc3JjL3ByaXZpbGVnZXMnKTtcbmNvbnN0IHBsdWdpblNvY2tldHMgPSByZXF1aXJlLm1haW4ucmVxdWlyZSgnLi9zcmMvc29ja2V0LmlvL3BsdWdpbnMnKTtcblxuaW1wb3J0IHsgZ2V0QWxsIGFzIGdldEFsbFJlc3BvbnNlcywgc3VibWl0UmVzcG9uc2UsIGdldFVzZXJSZXNwb25zZSB9IGZyb20gJy4vcmVzcG9uc2VzJztcbmltcG9ydCB7IGdldEV2ZW50c0J5RGF0ZSwgZmlsdGVyQnlQaWQsIGVzY2FwZUV2ZW50IH0gZnJvbSAnLi9ldmVudCc7XG5cbmNvbnN0IHBlcm0gPSAncGx1Z2luLWNhbGVuZGFyOmV2ZW50OnBvc3QnO1xuXG5wbHVnaW5Tb2NrZXRzLmNhbGVuZGFyID0ge307XG5wbHVnaW5Tb2NrZXRzLmNhbGVuZGFyLmNhblBvc3RFdmVudCA9ICh7IHVpZCB9LCB7IHBpZCwgdGlkLCBjaWQgfSwgY2IpID0+IHtcbiAgaWYgKCF1aWQpIHtcbiAgICBjYihudWxsLCBmYWxzZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwaWQpIHtcbiAgICBwcml2aWxlZ2VzLnBvc3RzLmNhbihwZXJtLCBwaWQsIHVpZCwgY2IpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodGlkKSB7XG4gICAgcHJpdmlsZWdlcy50b3BpY3MuY2FuKHBlcm0sIHRpZCwgdWlkLCBjYik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjaWQpIHtcbiAgICBwcml2aWxlZ2VzLmNhdGVnb3JpZXMuY2FuKHBlcm0sIGNpZCwgdWlkLCBjYik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNiKG51bGwsIGZhbHNlKTtcbn07XG5cbnBsdWdpblNvY2tldHMuY2FsZW5kYXIuZ2V0UmVzcG9uc2VzID0gKHsgdWlkIH0sIHBpZCwgY2IpID0+IHtcbiAgZ2V0QWxsUmVzcG9uc2VzKHsgcGlkLCB1aWQgfSkuYXNDYWxsYmFjayhjYik7XG59O1xuXG5wbHVnaW5Tb2NrZXRzLmNhbGVuZGFyLnN1Ym1pdFJlc3BvbnNlID0gKHsgdWlkIH0sIHsgcGlkLCB2YWx1ZSB9LCBjYikgPT4ge1xuICBzdWJtaXRSZXNwb25zZSh7IHVpZCwgcGlkLCB2YWx1ZSB9KS5hc0NhbGxiYWNrKGNiKTtcbn07XG5cbnBsdWdpblNvY2tldHMuY2FsZW5kYXIuZ2V0VXNlclJlc3BvbnNlID0gKHsgdWlkIH0sIHBpZCwgY2IpID0+IHtcbiAgZ2V0VXNlclJlc3BvbnNlKHsgdWlkLCBwaWQgfSkuYXNDYWxsYmFjayhjYik7XG59O1xuXG4vLyBwbHVnaW5Tb2NrZXRzLmNhbGVuZGFyLmdldENhdGVnb3J5Q29sb3JzID0gKHsgdWlkIH0sIGNiKSA9PiAoYXN5bmMgKCkgPT4ge1xuLy8gICBjb25zdCBjYXRzID0gYXdhaXQgZ2V0QWxsQ2F0ZWdvcnlGaWVsZHMoWydjaWQnLCAnYmdDb2xvciddKTtcbi8vICAgY29uc3QgZmlsdGVyZWQgPSBhd2FpdCBmaWx0ZXJDaWRzKCdyZWFkJywgY2F0cy5tYXAoYyA9PiBjLmNpZCksIHVpZCk7XG4vL1xuLy8gICByZXR1cm4gY2F0cy5maWx0ZXIoYyA9PiBmaWx0ZXJlZC5pbmNsdWRlcyhjLmNpZCkpO1xuLy8gfSkoKS5hc0NhbGxiYWNrKGNiKTtcblxucGx1Z2luU29ja2V0cy5jYWxlbmRhci5nZXRFdmVudHNCeURhdGUgPSAoeyB1aWQgfSwgeyBzdGFydERhdGUsIGVuZERhdGUgfSwgY2IpID0+XG4gIChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0gYXdhaXQgZ2V0RXZlbnRzQnlEYXRlKHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG4gICAgY29uc3QgZmlsdGVyZWQgPSBhd2FpdCBmaWx0ZXJCeVBpZChldmVudHMsIHVpZCk7XG4gICAgY29uc3QgZXNjYXBlZCA9IGF3YWl0IFByb21pc2UuYWxsKGZpbHRlcmVkLm1hcChlc2NhcGVFdmVudCkpO1xuXG4gICAgcmV0dXJuIGVzY2FwZWQ7XG4gIH0pKCkuYXNDYWxsYmFjayhjYik7XG4iXX0=